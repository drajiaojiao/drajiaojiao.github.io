<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法模板</title>
    <link href="/2024/05/13/algorithm1/"/>
    <url>/2024/05/13/algorithm1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>自用模板</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimzie(<span class="hljs-string">&quot;Ofast&quot;</span>, <span class="hljs-string">&quot;inline&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ioio ios::sync_with_stdio(0);cin.tie(0),cout.tie(0)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">int</span> dxy[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-comment">// ********************************************************</span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <br>    <br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ioio;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout); <br>    <span class="hljs-comment">//int T; cin&gt;&gt;T; while(T--)</span><br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p><a href="#1">基础语法</a><br> 1.1 <a href="#1.1">排序*</a><br> 1.2 <a href="#1.2">二分</a><br> 1.3 <a href="#1.3">双指针</a><br> 1.4 <a href="#1.4">高精度</a><br> 1.5 <a href="#1.5">进制转换</a><br> 1.6 <a href="#1.6">位运算</a></p></li><li><p><a href="#2">数据结构</a><br> 2.1 <a href="#2.1">二叉树</a><br> 2.2 <a href="#2.2">栈与队列</a><br> 2.3 <a href="#2.3">并查集</a><br> 2.4 <a href="#2.4">线段树与树状数组*</a></p></li><li><p><a href="#3">图论</a><br> 3.1 <a href="#3.1">DFS与BFS</a><br> 3.2 <a href="#3.2">最短路</a><br> 3.3 <a href="#3.3">最小生成（支撑）树</a></p></li><li><p><a href="#4">数学</a><br> 4.1 <a href="#4.1">质（素）数与约数</a><br> 4.2 <a href="#4.2">快速幂</a></p></li><li><p><a href="#5">动态规划</a></p></li><li><p><a href="#6">字符串</a><br> 6.1 <a href="#6.1">KMP</a><br> 6.2 <a href="#6.2">后缀数组</a> </p></li><li><p><a href="#7">计算几何</a></p></li><li><p><a href="#8">其他</a></p></li></ol><h3 id=1>1 基础算法</h3><h4 id=1.1>1.1 排序</h4><blockquote><p><code>sort自定义排序</code><br>对于 a b俩元素，如果返回T，则a在b前面，反之b在a前面</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&lt;b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), cmp);<br></code></pre></td></tr></table></figure><blockquote><p><code>快速排序</code><br>x是每轮的基准值</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Cswap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span></span>&#123;<br>    <span class="hljs-type">int</span> t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125; <span class="hljs-comment">// C环境下使用的swap函数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qsort</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> i=l<span class="hljs-number">-1</span>, j=r+<span class="hljs-number">1</span>, x=arr[l+r&gt;&gt;<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)&#123; <span class="hljs-comment">// 基准值比较，左右交换</span><br>        <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(arr[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(arr[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">Cswap</span>(&amp;arr[i], &amp;arr[j]);<br>    &#125;<br>    <span class="hljs-built_in">qsort</span>(arr, l, j), <span class="hljs-built_in">qsort</span>(arr, j + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-comment">// a[1]-a[n]排序</span><br><span class="hljs-built_in">sort</span>(a, <span class="hljs-number">1</span>, n);<br></code></pre></td></tr></table></figure><blockquote><p>归并排序</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></figure><h4 id=1.2>1.2 二分</h4><blockquote></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// &gt;=x的第一个元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_1</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)&#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// &lt;=x的最后一个元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsearch_2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r)&#123;<br>        <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>为何不用STL？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// &gt;=x的第一个元素</span><br><span class="hljs-keyword">auto</span> i=<span class="hljs-built_in">lower_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), x);<br>*i;          <span class="hljs-comment">// 值</span><br>i-a.<span class="hljs-built_in">begin</span>(); <span class="hljs-comment">// 位置</span><br><span class="hljs-comment">// 显然 &lt;x 的最后一个元素是</span><br>i-a.<span class="hljs-built_in">begin</span>()<span class="hljs-number">-1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// &gt;x的第一个元素</span><br><span class="hljs-keyword">auto</span> i=<span class="hljs-built_in">upper_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), x);<br><span class="hljs-comment">// 显然 &lt;=x 的最后一个元素是</span><br>i-a.<span class="hljs-built_in">begin</span>()<span class="hljs-number">-1</span>;<br></code></pre></td></tr></table></figure><h4 id=1.3>1.3 双指针</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 左指针 右指针</span><br><span class="hljs-type">int</span> l=<span class="hljs-number">1</span>, r=<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 指针不越界，部分情况下考虑左指针优先右指针</span><br><span class="hljs-keyword">while</span>( r&lt;=n &amp;&amp; l&lt;=n)&#123;<br><span class="hljs-comment">// 右指针右移</span><br><span class="hljs-keyword">while</span>( r&lt;=n &amp;&amp; 条件) r++;<br>&#123;...&#125; <span class="hljs-comment">// 更新答案巴拉巴拉</span><br><span class="hljs-comment">// 左指针右移</span><br>l++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=1.4>1.4 高精度</h4><blockquote><p>高精度加法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">ADD</span><span class="hljs-params">(string A, string B)</span> </span>&#123;  <span class="hljs-comment">// 正序输入 正序输出</span><br><span class="hljs-built_in">reverse</span>(A.<span class="hljs-built_in">begin</span>(), A.<span class="hljs-built_in">end</span>()); <span class="hljs-built_in">reverse</span>(B.<span class="hljs-built_in">begin</span>(), B.<span class="hljs-built_in">end</span>());<br>string res;<br><span class="hljs-type">int</span> add = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || i &lt; B.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) add += A[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) add += B[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">// 取值</span><br>res.<span class="hljs-built_in">push_back</span>(add % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);      <span class="hljs-comment">// +</span><br>add /= <span class="hljs-number">10</span>;                          <span class="hljs-comment">// 进位</span><br>&#125;<br><span class="hljs-keyword">if</span> (add) res.<span class="hljs-built_in">push_back</span>(add + <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>高精度减法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">SUB</span><span class="hljs-params">(string&amp; A, string&amp; B)</span> </span>&#123;  <span class="hljs-comment">// 正序输入 正序输出 自带负号</span><br><span class="hljs-keyword">if</span> (!(A.<span class="hljs-built_in">size</span>() &gt; B.<span class="hljs-built_in">size</span>() || (A.<span class="hljs-built_in">size</span>() == B.<span class="hljs-built_in">size</span>() &amp;&amp; A &gt;= B)))<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-built_in">SUB</span>(B, A);<br><span class="hljs-built_in">reverse</span>(A.<span class="hljs-built_in">begin</span>(), A.<span class="hljs-built_in">end</span>()); <span class="hljs-built_in">reverse</span>(B.<span class="hljs-built_in">begin</span>(), B.<span class="hljs-built_in">end</span>());<br>string res;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-type">int</span> ai = A[i] - <span class="hljs-string">&#x27;0&#x27;</span>, bi = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) bi = B[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>t = ai - t;<br><span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= bi;<br>res.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">while</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;0&#x27;</span>) res.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>高精度乘法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">MUL</span><span class="hljs-params">(string A, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-comment">// 顺序输入 顺序输出</span><br><span class="hljs-built_in">reverse</span>(A.<span class="hljs-built_in">begin</span>(), A.<span class="hljs-built_in">end</span>());<br>string res;<br><span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || t; i++) &#123;<br><span class="hljs-keyword">if</span> (i &lt; A.<span class="hljs-built_in">size</span>()) t += (A[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * b;<br>res.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>t /= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-comment">// 去前导0</span><br><span class="hljs-keyword">while</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;0&#x27;</span>) res.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>高精度除法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">DIV</span><span class="hljs-params">(string A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span>&amp; r)</span> </span>&#123;  <span class="hljs-comment">// 正序输入 正序输出</span><br><span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;         <span class="hljs-comment">// A / b = res ... r </span><br><span class="hljs-built_in">reverse</span>(A.<span class="hljs-built_in">begin</span>(), A.<span class="hljs-built_in">end</span>());<br>string res;<br>r = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><span class="hljs-type">int</span> ai = A[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>r = r * <span class="hljs-number">10</span> + ai;<br>res.<span class="hljs-built_in">push_back</span>(r / b + <span class="hljs-string">&#x27;0&#x27;</span>);<br>r %= b;<br>&#125;<br><span class="hljs-keyword">while</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; res.<span class="hljs-built_in">front</span>() == <span class="hljs-string">&#x27;0&#x27;</span>) res.<span class="hljs-built_in">erase</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=1.5>1.5 进制转换</h4><blockquote><p>x(a) -&gt; x(10)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">x_10</span><span class="hljs-params">(string x, <span class="hljs-type">int</span> a)</span></span>&#123;<br>    string res=<span class="hljs-string">&quot;0&quot;</span>, p=<span class="hljs-string">&quot;1&quot;</span>;  <span class="hljs-comment">// 将 a 进制下的 x 转换为 10 进制</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>        <span class="hljs-type">int</span> t; <span class="hljs-comment">// 判断当前位数字是多少</span><br>        <span class="hljs-keyword">if</span>(x[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; x[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>) t=x[i]-<span class="hljs-string">&#x27;0&#x27;</span>; <br>        <span class="hljs-keyword">if</span>(x[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; x[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>) t=x[i]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(x[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; x[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>) t=x[i]-<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">10</span>;<br>        res=<span class="hljs-built_in">ADD</span>(res, <span class="hljs-built_in">MUL</span>(p, t));<span class="hljs-comment">//res+=t*p; // t*(a^0, a^1, a^2)</span><br>        p=<span class="hljs-built_in">MUL</span>(p, a);            <span class="hljs-comment">//p*=a;     //   (a^0, a^1, a^2)</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>x(10) -&gt; x(a)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">x_a</span><span class="hljs-params">(string x, <span class="hljs-type">int</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-string">&quot;0&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;<br>    string res; <span class="hljs-comment">// 将 10 进制下的 x 转换为 a 进制</span><br>    <span class="hljs-keyword">while</span>(x!=<span class="hljs-string">&quot;0&quot;</span>)&#123;<br>        <span class="hljs-type">int</span> r;<br>        x=<span class="hljs-built_in">DIV</span>(x, a, r);<br>        <span class="hljs-keyword">if</span>( r&gt;=<span class="hljs-number">0</span> &amp;&amp; r&lt;=<span class="hljs-number">9</span> ) r+=<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">else</span> r+=<span class="hljs-string">&#x27;A&#x27;</span><span class="hljs-number">-10</span>;<br>        res+=r;<br>    &#125;<br>    <span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=1.6>1.6 位运算</h4><blockquote><p><code>&amp;</code> 按位与 <code>全1为1</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0</span>&amp;<span class="hljs-number">0</span>=<span class="hljs-number">0</span>   <span class="hljs-number">1</span>&amp;<span class="hljs-number">0</span>=<span class="hljs-number">0</span><br><span class="hljs-number">0</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-number">0</span>   <span class="hljs-number">1</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p><code>|</code> 按位或 <code>一1为1</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0</span>|<span class="hljs-number">0</span>=<span class="hljs-number">0</span>   <span class="hljs-number">1</span>|<span class="hljs-number">0</span>=<span class="hljs-number">1</span><br><span class="hljs-number">0</span>|<span class="hljs-number">1</span>=<span class="hljs-number">1</span>   <span class="hljs-number">1</span>|<span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p><code>^</code> 按位异或 <code>不同为1</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0</span>^<span class="hljs-number">0</span>=<span class="hljs-number">0</span>   <span class="hljs-number">1</span>^<span class="hljs-number">0</span>=<span class="hljs-number">1</span><br><span class="hljs-number">0</span>^<span class="hljs-number">1</span>=<span class="hljs-number">1</span>   <span class="hljs-number">1</span>^<span class="hljs-number">1</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><blockquote><p><code>lowbit</code>  x 的二进制表示中，最低位的 1 的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">lowbit</span>(<span class="hljs-number">0b10110000</span>) == <span class="hljs-number">0b00010000</span> == <span class="hljs-number">16</span><br>         ~~~^~~~~<br><span class="hljs-built_in">lowbit</span>(<span class="hljs-number">0b11100100</span>) == <span class="hljs-number">0b00000100</span> == <span class="hljs-number">4</span><br>         ~~~~~^~~ <br></code></pre></td></tr></table></figure></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=2>2 数据结构</h3><h4 id=2.1>2.1 二叉树</h4><h4 id=2.2>2.2 栈与队列</h4><h4 id=2.3>2.3 并查集</h4><blockquote><p>基础并查集</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> P[N];   <span class="hljs-comment">// 存放每个数的祖宗</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-comment">// 找x的祖宗结点</span><br>    <span class="hljs-keyword">if</span>(x!=p[x]) p[x]=<span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">/* 初始化 */</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) p[i]=i; <br>    <span class="hljs-comment">/* 合并 */</span><br>    x=<span class="hljs-built_in">find</span>(x), y=<span class="hljs-built_in">find</span>(y);   <span class="hljs-comment">// 找到x和y的祖宗</span><br>    <span class="hljs-keyword">if</span>(x!=y) p[y]=x;        <span class="hljs-comment">// 将y的祖宗合并到x</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id=2.4>2.4 线段树与树状数组</h4><blockquote><p>树状数组 二叉索引树 强化版前缀和</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;-x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(; i&lt;=n; i+=<span class="hljs-built_in">lowbit</span>(i))<br>        t[i]+=v;    <span class="hljs-comment">// 该点后面所有后驱都需要+v</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;   <br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;      <span class="hljs-comment">// i的前缀和</span><br>    <span class="hljs-keyword">for</span>(; i&gt;=<span class="hljs-number">1</span>; i-=<span class="hljs-built_in">lowbit</span>(i))<br>        res+=t[i];  <span class="hljs-comment">// 累加所有后驱</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        <span class="hljs-built_in">add</span>(i, a[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">// 这种是一个一个的+</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        t[i]+=a[i];<br>        <span class="hljs-type">int</span> j=i+<span class="hljs-built_in">lowbit</span>(i);<br>        <span class="hljs-keyword">if</span>(j&lt;=n) t[j]+=t[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>线段树 不一定正确</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r;   <span class="hljs-comment">// 左右结点</span><br>    LL sum;    <span class="hljs-comment">// 区间和</span><br>&#125;tr[<span class="hljs-number">4</span> * N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(node&amp; u, node&amp; l, node&amp; r)</span> </span>&#123;<br>    u.sum = l.sum + r.sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    tr[u] = &#123; l,r &#125;;<br>    <span class="hljs-keyword">if</span> (l == r)<br>        tr[u].sum = a[r];<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, mid), <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="hljs-number">1</span>], tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> v)</span> </span>&#123;   <span class="hljs-comment">// 单点修改</span><br>    <span class="hljs-keyword">if</span> (tr[u].l == i &amp;&amp; tr[u].r == i)    <span class="hljs-comment">// 找到叶子结点</span><br>        tr[u] = &#123; i,i,v &#125;;              <span class="hljs-comment">// 修改</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (i &lt;= mid) <span class="hljs-built_in">modify</span>(u &lt;&lt; <span class="hljs-number">1</span>, i, v);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, i, v);  <span class="hljs-comment">// 不在左边就肯定在右边</span><br>        <span class="hljs-built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="hljs-number">1</span>], tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r)<br>        <span class="hljs-keyword">return</span> tr[u];<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (mid &gt;= r)                      <span class="hljs-comment">// tr[l]--------[m]--------tr[r]</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, r);    <span class="hljs-comment">//       l----r         </span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mid &lt; l)                  <span class="hljs-comment">// tr[l]--------[m]--------tr[r]</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<span class="hljs-comment">//                  l----r</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">auto</span> left = <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>            <span class="hljs-keyword">auto</span> right = <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>            node res = &#123; l, r &#125;;<br>            <span class="hljs-built_in">pushup</span>(res, left, right);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=3>3 图论</h3><h4 id=3.1>3.1 DFS与BFS</h4><blockquote><p>DFS<br>一个小tips：枚举状态时候，枚举单个点会爆时间，当从行的角度考虑</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 处理当前点u</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br><span class="hljs-keyword">if</span>( u满足剪枝条件 )<br><span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">if</span>( u&gt;N ) &#123;    <span class="hljs-comment">// 到达边界</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">check</span>() )   <span class="hljs-comment">// 如果当前情况合法</span><br><span class="hljs-built_in">deal</span>();<span class="hljs-comment">// 输出或者更新最终答案</span><br><span class="hljs-keyword">return</span> ;<span class="hljs-comment">// 结束</span><br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : arr)&#123;<span class="hljs-comment">// 显然，当一个点有多个状态，需要全部考虑</span><br><span class="hljs-keyword">if</span>( used[i] ) <span class="hljs-keyword">continue</span> ;<span class="hljs-comment">// 如果此状态仅可出现一次，那么该点不考虑此状态</span><br><br><span class="hljs-built_in">change</span>(u, i);<span class="hljs-comment">// 将 u 点状态设置为 i （如果需要，应当同时考虑下 i 的状态）</span><br><span class="hljs-built_in">dfs</span>( u++ );<span class="hljs-comment">// 进入下一层。应当注意，这里的下一层是指u进入递归层面的下一层 </span><br><span class="hljs-built_in">change</span>(u, row);<span class="hljs-comment">// 恢复现场。通常情况下，u是直接置0</span><br>&#125;<br><span class="hljs-built_in">dfs</span>( u++ );<span class="hljs-comment">// 部分时候，还需要考虑该点不作处理的情况</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>值得一提，STL中的两个全排列函数 <code>next_permutation</code> 和 <code>prev_permutation</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-comment">// cout</span><br><span class="hljs-keyword">do</span>&#123;<span class="hljs-comment">// 2 1 3</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++)<span class="hljs-comment">// 2 3 1</span><br>cout&lt;&lt;arr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">// 3 1 2</span><br>cout&lt;&lt;endl;<span class="hljs-comment">// 3 2 1 </span><br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">next_permutation</span>(arr, arr+<span class="hljs-number">3</span>));<br><span class="hljs-comment">// 应当注意，next_permutaion是直接在序列上更新下一个序列</span><br><span class="hljs-comment">// 并且是在更新完后再检查是否是排名更靠后的序列，是则返回true，否则返回false</span><br><span class="hljs-comment">// 因此，此时的arr为&#123; 1, 2, 3 &#125;</span><br><br><span class="hljs-comment">// prev_permutation同理</span><br><span class="hljs-type">int</span> brr[<span class="hljs-number">3</span>]=&#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">do</span>&#123;<span class="hljs-comment">// cout</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++)      <span class="hljs-comment">// 1 2 3</span><br>cout&lt;&lt;brr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;      <span class="hljs-comment">// 1 3 2</span><br>cout&lt;&lt;endl;<span class="hljs-comment">// 1 2 3</span><br>&#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">prev_permutation</span>(brr, brr+<span class="hljs-number">3</span>));<br><span class="hljs-comment">// 此时的brr为&#123; 3, 2, 1 &#125;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>BFS</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(<span class="hljs-type">int</span> sx, sy)</span></span>&#123;<br>queue&lt;PII&gt; q;<br>q.<span class="hljs-built_in">push</span>( &#123;sx, sy&#125; ); <span class="hljs-comment">// 入队</span><br>used[sx][sy]=<span class="hljs-number">1</span>;     <span class="hljs-comment">// 标记使用</span><br>step[sx][sy]=<span class="hljs-number">0</span>;     <span class="hljs-comment">// 更新步长</span><br><br><span class="hljs-keyword">while</span>( q.<span class="hljs-built_in">size</span>() )&#123;<br><span class="hljs-comment">// 当前步</span><br><span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>().fst;<br><span class="hljs-type">int</span> y = q.<span class="hljs-built_in">front</span>().sed; <br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)&#123;<br><span class="hljs-comment">// 下一步</span><br><span class="hljs-type">int</span> nx = x+dxy[i][<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> ny = y+dxy[i][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">0</span> || nx&gt;=R || ny&lt;<span class="hljs-number">0</span> || ny&gt;=C) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 检查越界</span><br><span class="hljs-keyword">if</span>(used[nx][ny]==<span class="hljs-number">1</span> || g[nx][ny]==<span class="hljs-string">&#x27;不能到达的点&#x27;</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 检查能否到达（此步是否合法）</span><br><br>q.<span class="hljs-built_in">push</span>( &#123;nx, ny&#125; );        <span class="hljs-comment">// 入队</span><br>used[nx][ny]=<span class="hljs-number">1</span>;            <span class="hljs-comment">// 标记使用</span><br>step[nx][ny]=step[x][y]+<span class="hljs-number">1</span>; <span class="hljs-comment">// 更新步长</span><br><br><span class="hljs-keyword">if</span>(g[nx][ny]==<span class="hljs-string">&#x27;终点&#x27;</span>) <span class="hljs-keyword">return</span>;<br>&#125;<br><br>q.<span class="hljs-built_in">pop</span>();<br>&#125;<br><br><span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=3.2>3.2 最短路</h4><blockquote><p><code>Dijkstra（非负权边）</code></p><ol><li>将所有点看作未确定最短路</li><li>将起点的dis[s]&#x3D;0，其余置为+∞</li><li>将未确定的点中，选取距离s最近的点进行松弛操作</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, m;   <span class="hljs-comment">// 点、边</span><br>vector&lt;PII&gt; edge[<span class="hljs-number">100010</span>];   <span class="hljs-comment">// edge[x]=&#123;y,z&#125; x-&gt;y=z</span><br><span class="hljs-type">int</span> dis[N]; <span class="hljs-comment">// 最短路</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 是否已确定最短路</span><br><span class="hljs-comment">// O(mlogm)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-comment">// fst存dis[i] sed存i</span><br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    dis[s]=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 起点入队</span><br>    heap.<span class="hljs-built_in">push</span>(&#123;dis[s], s&#125;);  <br><br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> x=heap.<span class="hljs-built_in">top</span>().sed;  <span class="hljs-comment">// 取最小点</span><br>        heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">// 在出堆的时候判断、确定是否确定最短路</span><br>        <span class="hljs-keyword">if</span>(st[x]) <span class="hljs-keyword">continue</span>;<br>        st[x]=<span class="hljs-number">1</span>; <span class="hljs-comment">// 确定最短路</span><br><br>        <span class="hljs-comment">// 对该点进行松弛操作</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [y, z]: edge[x])<br>            <span class="hljs-keyword">if</span>( dis[y]&gt;dis[x]+z )&#123;<br>                dis[y]=dis[x]+z;<br>                heap.<span class="hljs-built_in">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[e];  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>bellman_ford（万能）</code></p><ol><li>将起点的dis[s]&#x3D;0，其余置为+∞</li><li>将所有边进行松弛操作</li><li>直到某轮迭代中没有执行松弛操作时，退出，或者执行n次</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, m, k; <span class="hljs-comment">// 最多经过k条边</span><br>vector&lt;PII&gt; edge[N];<br><span class="hljs-type">int</span> dis[N];  <span class="hljs-comment">// 最短路</span><br><span class="hljs-type">int</span> bkup[N]; <span class="hljs-comment">// 备份，防止串联</span><br><span class="hljs-comment">// O(nm)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    dis[s]=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=k; i++)&#123; <span class="hljs-comment">// 最多迭代 k 次</span><br>        <span class="hljs-type">bool</span> flg=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memcpy</span>(bkup, dis, <span class="hljs-keyword">sizeof</span> dis);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>; x&lt;=n; x++)     <span class="hljs-comment">// 遍历所有边</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [y, z]: edge[x])  <span class="hljs-comment">// 对每条边进行松弛操作</span><br>            <span class="hljs-keyword">if</span>( dis[y] &gt; bkup[x] + z)&#123;<br>                dis[y] = bkup[x] + z;<br>                flg=<span class="hljs-number">1</span>;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(!flg) <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 当前没有进行松弛操作</span><br>    &#125;<br>    <span class="hljs-comment">// 因为存在无穷大引出的边发生松弛操作</span><br>    <span class="hljs-comment">// 而图中存在负权边，因此要做个小小的处理</span><br>    <span class="hljs-keyword">if</span>(dis[e]&gt;INF/<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> INF; <br>    <span class="hljs-keyword">return</span> dis[e];<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>spfa（非负权回路）</code><br>队列优化版 bellman_ford</p><ol><li>将起点的dis[s]&#x3D;0，其余置为+∞</li><li>将被松弛的点加入队列，进行松弛操作<ul><li>通过一个 st[i] 来判断 i 点是否在队列中，防止重复入队</li></ul></li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, m;<br>vector&lt;PII&gt; edge[N];<br><span class="hljs-type">int</span> dis[N]; <span class="hljs-comment">// 最短路</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 是否在队列中?</span><br><span class="hljs-built_in">O</span>(nm)<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <br>    dis[s]=<span class="hljs-number">0</span>;   <span class="hljs-comment">// 源点</span><br>    st[s]=<span class="hljs-number">1</span>;    <span class="hljs-comment">// 在队列中</span><br>    q.<span class="hljs-built_in">push</span>(s);  <span class="hljs-comment">// 扔进队列</span><br><br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> x=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        st[x]=<span class="hljs-number">0</span>; <span class="hljs-comment">// 不在队列中</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [y, z]: edge[x])<br>            <span class="hljs-keyword">if</span>( dis[y] &gt; dis[x] + z )&#123;<br>                dis[y] = dis[x] + z;<br>                <span class="hljs-keyword">if</span>(!st[y])&#123; <span class="hljs-comment">// 如果被松弛的点不在队列中</span><br>                    st[y]=<span class="hljs-number">1</span>;<span class="hljs-comment">// 就压入队列</span><br>                    q.<span class="hljs-built_in">push</span>(y);<br>                &#125;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[e];<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>Floyd（多源最短路）</code></p><ol><li>将自己到达自己的最短路设置为0，其余设置为+∞</li><li>任意两点，都可以经过任意一点，尝试松弛操作</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 注意，此写法省略了边的存储，及直接将边存储到最短路中</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> dis[N][N];<br><span class="hljs-comment">// O(n^3)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">flody</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>; k&lt;=n; k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>                dis[i][j]=<span class="hljs-built_in">min</span>(dis[i][j], dis[i][k]+dis[k][j]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=3.3>3.3 最小生成树</h4><blockquote><p><code>Prim 稠密图</code></p><ol><li>地图初始化为+∞</li><li>将所有点到达集合的距离设置为+∞，且标记都不在集合中</li><li>迭代n次，每次将未在集合中且距离集合最近的点加入集合</li><li>通过新进入集合的点，更新所有点距离集合的距离</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> edge[N][N];<br><span class="hljs-type">int</span> dis[N]; <span class="hljs-comment">// 每个点到达（最小生成树）集合的最短路</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 是否已经在集合中</span><br><span class="hljs-comment">// O(n^2+m)</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);  <span class="hljs-comment">// 初始化每个点到集合的距离为inf</span><br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);       <span class="hljs-comment">// 初始化每个点都未在集合中</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;n; k++)&#123; <span class="hljs-comment">// 迭代 n 次</span><br><br>        <span class="hljs-type">int</span> t=<span class="hljs-number">-1</span>;           <span class="hljs-comment">// 找到未在集合中且距离集合最近的点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>            <span class="hljs-keyword">if</span>(!st[i] &amp;&amp; (t==<span class="hljs-number">-1</span> || dis[t]&gt;dis[i]))<br>                t=i;<br>        <span class="hljs-keyword">if</span>(k &amp;&amp; dis[t]==INF) <span class="hljs-keyword">return</span> INF;    <span class="hljs-comment">// 孤岛</span><br>        <br>        <span class="hljs-keyword">if</span>(k) res+=dis[t];                  <span class="hljs-comment">// 权值和</span><br>        st[t]=<span class="hljs-number">1</span>;                <span class="hljs-comment">// 进入集合</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-comment">// 通过该点去更新</span><br>            dis[i]=<span class="hljs-built_in">min</span>(dis[i], edge[t][i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>Kruskal 稀疏图</code></p><ol><li>将所有边从小到大排序</li><li>维护一堆集合，查询两个元素是否属于同一集合，合并俩集合</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> p[N];   <span class="hljs-comment">// 并查集</span><br>pair&lt;<span class="hljs-type">int</span>, PII&gt; edge[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;  <span class="hljs-comment">// 找x的祖宗</span><br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=<span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">sort</span>(edge+<span class="hljs-number">1</span>, edge+<span class="hljs-number">1</span>+m); <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) p[i]=i;<br>    <span class="hljs-comment">// 排序 初始化并查集</span><br>    <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>, cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 从小到大枚举所有边</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> a=edge[i].sed.fst;<br>        <span class="hljs-type">int</span> b=edge[i].sed.sed;<br>        <span class="hljs-type">int</span> w=edge[i].fst;<br>        a=<span class="hljs-built_in">find</span>(a), b=<span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span>(a!=b)&#123;<br>            p[a]=b; <span class="hljs-comment">// 合并</span><br>            res+=w; <span class="hljs-comment">// 权值和</span><br>            cnt++;  <span class="hljs-comment">// 判断孤岛</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(cnt&lt;n<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> inf;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=4>4 数学</h3><h4 id=4.1>4.1 质（素）数与约数</h4> <blockquote><p><code>gcd</code> 欧几里得算法（辗转相除法）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br><span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a%b) : a;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>STL中有个相似的 <code>__gcd(int x, int y)</code></p></blockquote><blockquote><p>裴蜀定理：对于任意整数 a,b 存在一对整数 x,y 满足 ax+by&#x3D;gcd(a,b)<br><code>exgcd</code> 拓展欧几里得算法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!b)&#123;<br>x=<span class="hljs-number">1</span>, y=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(b, a%b, y, x);<br>y -= (a/b)*x;<br><span class="hljs-keyword">return</span> d; <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>LCD</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">lcd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a*b/<span class="hljs-built_in">gcd</span>(a, b);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>快筛素数</code> 先生成(2^16)内的素数 再快判</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> primes[<span class="hljs-number">6555</span>], cnt;  <span class="hljs-comment">// 2^16中只有6542个素数</span><br><span class="hljs-type">bool</span> st[<span class="hljs-number">65555</span>];         <span class="hljs-comment">// 生成的时候只用判断这么多个</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span> (!st[i]) primes[cnt++] = i;              <span class="hljs-comment">// 当前数没被筛过st[i]==0，说明是素数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j++) &#123;  <span class="hljs-comment">// 确保 第j个质数 和 i 相乘不会爆</span><br>st[primes[j] * i] = <span class="hljs-number">1</span>;                  <span class="hljs-comment">// 被唯一标记过</span><br><span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;          <span class="hljs-comment">// 此时primes[j]是i的最小质因子，退出避免重复筛</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_p</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!st[<span class="hljs-number">0</span>]) <span class="hljs-built_in">make_primes</span>(<span class="hljs-number">65536</span>), st[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;=<span class="hljs-number">65536</span>) <span class="hljs-keyword">return</span> !st[x];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; primes[i] &lt;= x/primes[i]; i++) <br><span class="hljs-keyword">if</span> (x % primes[i] == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id=4.2>4.2 快速幂</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// a^b%MOD</span><br><span class="hljs-function">LL <span class="hljs-title">quick_pow</span><span class="hljs-params">(LL a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    LL res=<span class="hljs-number">1</span>%MOD;<br>    <span class="hljs-keyword">for</span>( ; b; b&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res=<span class="hljs-number">1LL</span>*a*res%MOD; <span class="hljs-comment">// 决定是否相乘</span><br>        a=<span class="hljs-number">1ll</span>*a*a%MOD;             <span class="hljs-comment">// 每个位置上，递推出的二进制位上的值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=5>5 动态规划</h3><h3 id=6>6 字符串</h3><h4 id=6.1>6.1 KMP</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 主串和模式串</span><br><span class="hljs-comment">// 注意!!!从下标1开始!!!</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">KMP</span><span class="hljs-params">(string s, string p)</span></span>&#123;<br>    <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>, m=p.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> ne[<span class="hljs-number">100010</span>]=&#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 模式串的next串</span><br>    <span class="hljs-comment">//求ne数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>        <span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>        ne[i] = j;<br>    &#125;<br>    <span class="hljs-comment">//kmp匹配</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br>        <span class="hljs-keyword">if</span>(s[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>        <span class="hljs-keyword">if</span>(j == m) &#123;<br>            j = ne[j]; <span class="hljs-comment">//当匹配成功时继续往下匹配</span><br>            <span class="hljs-comment">// 你的操作!!!</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=7>7 计算几何</h3>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《算法竞赛进阶指南》</title>
    <link href="/2022/11/22/teach3/"/>
    <url>/2022/11/22/teach3/</url>
    
    <content type="html"><![CDATA[<h1 id=1><font color="green">初窥门径</font></h1><details><summary>目录</summary><ol><li><p>基础算法</p><ul><li><a href="#1.1.1">枚举与模拟</a></li><li>递推与递归 <a href="">0x02</a></li><li>前缀和与差分 <a href="">0x03</a></li><li>排序 <a href="">0x05</a></li><li>二分 <a href="">0x04</a></li><li>双指针</li></ul></li><li><p>数据结构</p><ul><li>栈 <a href="">0x11</a></li><li>队列 <a href="">0x12</a> </li><li>哈希表 <a href="">0x14</a></li><li>堆</li></ul></li><li><p>搜索</p><ul><li>DFS <a href="">0x22</a></li><li>BFS <a href="">0x25</a></li><li>剪枝优化与Flood Fill</li></ul></li><li><p>字符串</p><ul><li>KMP <a href="">0x15</a> </li><li>Trie <a href="">0x16</a></li></ul></li><li><p>动态规划</p><ul><li>背包问题 <a href="">0x52</a></li><li>线性DP <a href="">0x51</a></li><li>区间DP <a href="">0x53</a></li></ul></li><li><p>数学</p><ul><li>进制转换</li><li>高精度</li><li>快速幂</li><li>质（素）数</li><li>约数个数</li><li>组合计数 <a href="">0x36</a></li></ul></li><li><p>图论</p><ul><li>最短路 <a href="">0x61</a></li><li>拓扑排序 </li><li>最小生成树 <a href="">0x62</a>  </details></li></ul></li></ol><h2 id=1.1><font color="green"> 一、基础算法 </font></h2><ul><li><h3 id=1.1.1> 枚举与模拟 </h3></li></ul><details> <summary>AcWing 466.回文日期</summary>  <ul><li><a href="https://www.acwing.com/problem/content/468/">AcWing 466. 回文日期</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> months[<span class="hljs-number">13</span>]=&#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dateOK</span><span class="hljs-params">(<span class="hljs-type">int</span> ymd)</span></span>&#123;<br>    months[<span class="hljs-number">2</span>]=<span class="hljs-number">28</span>; <span class="hljs-comment">// 恢复现场</span><br>    <span class="hljs-type">int</span> y=ymd/<span class="hljs-number">10000</span>;<br>    <span class="hljs-type">int</span> m=ymd%<span class="hljs-number">10000</span>/<span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> d=ymd%<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">if</span>((y%<span class="hljs-number">4</span>==<span class="hljs-number">0</span> &amp;&amp; y%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>) || y%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) months[<span class="hljs-number">2</span>]=<span class="hljs-number">29</span>; <span class="hljs-comment">// 闰年</span><br>    <span class="hljs-keyword">if</span>(m&lt;<span class="hljs-number">1</span> || m&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(d&lt;<span class="hljs-number">1</span> || d&gt;months[m]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> date1, date2, ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;date1&gt;&gt;date2;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=date1/<span class="hljs-number">10000</span>; i&lt;=date2/<span class="hljs-number">10000</span>; i++)&#123;<br>        <span class="hljs-comment">// 生成回文日期</span><br>        <span class="hljs-comment">// 判断日期是否合法，是否在date区间</span><br>        <span class="hljs-type">int</span> j=i%<span class="hljs-number">10</span>*<span class="hljs-number">1000</span><br>             +i/<span class="hljs-number">10</span>%<span class="hljs-number">10</span>*<span class="hljs-number">100</span><br>             +i/<span class="hljs-number">100</span>%<span class="hljs-number">10</span>*<span class="hljs-number">10</span><br>             +i/<span class="hljs-number">1000</span>%<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> k=i*<span class="hljs-number">10000</span>+j;<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">dateOK</span>(k) &amp;&amp; k&gt;=date1 &amp;&amp; k&lt;=date2)<br>            ans++;<br>    &#125;<br>    <br>    cout&lt;&lt;ans;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 441. 数字统计</summary><ul><li><a href="https://www.acwing.com/problem/content/443/">AcWing 441. 数字统计</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> l, r, ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;l&gt;&gt;r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l; i&lt;=r; i++)&#123;<br>        <span class="hljs-type">int</span> j=i;<br>        <span class="hljs-keyword">while</span>(j)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> == j%<span class="hljs-number">10</span>) ans++;<br>            j/=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 1245. 特别数的和</summary><ul><li><a href="https://www.acwing.com/problem/content/1247/">AcWing 1245. 特别数的和</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, res;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(i)&#123;<br>        <span class="hljs-type">int</span> j=i%<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">2</span> || j==<span class="hljs-number">0</span> || j==<span class="hljs-number">1</span> || j==<span class="hljs-number">9</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        i/=<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">is</span>(i)) res+=i;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 1210. 连号区间数</summary>  <ul><li><a href="https://www.acwing.com/problem/content/1212/">AcWing 1210. 连号区间数</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> arr[N], n, res;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    <br>    <span class="hljs-comment">// 枚举每个区间</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>; l&lt;=n; l++)&#123;<br>        <span class="hljs-type">int</span> mmax=arr[l];<br>        <span class="hljs-type">int</span> mmin=arr[l];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=l; r&lt;=n; r++)&#123;<br>            mmin=<span class="hljs-built_in">min</span>(mmin, arr[r]);<br>            mmax=<span class="hljs-built_in">max</span>(mmax, arr[r]);<br>            <br>            <span class="hljs-keyword">if</span>(r-l==mmax-mmin) res++;<br>        &#125;<br>    &#125;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 1204. 错误票据</summary>  <ul><li><a href="https://www.acwing.com/problem/content/description/1206/">AcWing 1204. 错误票据</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> arr[N], mmin=<span class="hljs-number">0x3f3f3f3f</span>, mmax=<span class="hljs-number">-0x3f3f3f3f</span>, m, n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> t; cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t)!=EOF)&#123;<br>        arr[t]++;<br>        mmin = mmin&lt;t ? mmin:t;<br>        mmax = <span class="hljs-built_in">max</span>(mmax, t);<br>    &#125;    <br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=mmin; i&lt;=mmax; i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i]==<span class="hljs-number">2</span>) n=i;<br>        <span class="hljs-keyword">if</span>(arr[i]==<span class="hljs-number">0</span>) m=i;<br>    &#125;<br>    <br>    cout&lt;&lt;m&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;n;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 1236. 递增三元组</summary>  <ul><li><a href="https://www.acwing.com/problem/content/1238/">AcWing 1236. 递增三元组</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> G++ optimize(<span class="hljs-string">&quot;Ofast&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br>LL ans;<br><span class="hljs-type">int</span> arr[N], brr[N], crr[N], n;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;brr[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;crr[i]);<br>    <br>    <span class="hljs-built_in">sort</span>(arr+<span class="hljs-number">1</span>, arr+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-built_in">sort</span>(brr+<span class="hljs-number">1</span>, brr+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-built_in">sort</span>(crr+<span class="hljs-number">1</span>, crr+<span class="hljs-number">1</span>+n);<br>    <br>    <span class="hljs-comment">// 枚举b</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">lower_bound</span>(arr+<span class="hljs-number">1</span>, arr+<span class="hljs-number">1</span>+n, brr[i])-arr<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> c = <span class="hljs-built_in">upper_bound</span>(crr+<span class="hljs-number">1</span>, crr+<span class="hljs-number">1</span>+n, brr[i])-crr;<br>        <br>        <span class="hljs-keyword">if</span>(a&gt;=<span class="hljs-number">1</span> &amp;&amp; c&lt;=n)<br>            ans+=<span class="hljs-number">1LL</span>*a*(n-c+<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    cout&lt;&lt;ans;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 1219. 移动距离</summary>  <ul><li><a href="https://www.acwing.com/problem/content/1221/">AcWing 1219. 移动距离</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> w, m, n;<br>    cin&gt;&gt;w&gt;&gt;m&gt;&gt;n;<br>    <br>    <span class="hljs-comment">// 1维变2维</span><br>    <span class="hljs-type">int</span> x1=(m<span class="hljs-number">-1</span>)/w+<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> y1=m%w;<br>    <span class="hljs-keyword">if</span>(y1==<span class="hljs-number">0</span>) y1=w;<br>    <br>    <span class="hljs-type">int</span> x2=(n<span class="hljs-number">-1</span>)/w+<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> y2=n%w;<br>    <span class="hljs-keyword">if</span>(y2==<span class="hljs-number">0</span>) y2=w;<br>    <br>    <span class="hljs-keyword">if</span>(!(x1&amp;<span class="hljs-number">1</span>)) y1=w-y1+<span class="hljs-number">1</span>;    <br>    <span class="hljs-keyword">if</span>(!(x2&amp;<span class="hljs-number">1</span>)) y2=w-y2+<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">//cout&lt;&lt;x1&lt;&lt;&quot; &quot;&lt;&lt;y1&lt;&lt;&quot;\n&quot;&lt;&lt;x2&lt;&lt;&quot; &quot;&lt;&lt;y2&lt;&lt;&quot;\n&quot;;</span><br>    <br>    cout&lt;&lt;<span class="hljs-built_in">abs</span>(x2-x1)+<span class="hljs-built_in">abs</span>(y2-y1);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><ul><li><h3 id=1.1.2> 递推与递归 </h3></li><li><h3 id=1.1.3> 前缀和与差分 </h3></li><li><h3 id=1.1.4> 排序 </h3></li><li><h3 id=1.1.5> 二分 </h3></li><li><h3 id=1.1.6> 双指针 </h3></li></ul><h2 id=1.3><font color="green"> 三、搜索 </font></h2><ul><li><h3 id=1.3.1> DFS </h3></li><li><h3 id=1.3.2> BFS </h3></li></ul><details> <summary> AcWing 1101. 献给阿尔吉侬的花束 </summary>  <ul><li><a href="https://www.acwing.com/problem/content/1103/">AcWing 1101. 献给阿尔吉侬的花束</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dxy[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">210</span>;<br><br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">int</span> st[N][N];<br><span class="hljs-type">int</span> res[N][N];<br>PII s, e;<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-built_in">memset</span>(res, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> res);<br>    <br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        string t; cin&gt;&gt;t;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; j++)<br>            <span class="hljs-keyword">if</span>(t[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;S&#x27;</span>)<br>                s=&#123;i,j&#125;;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;E&#x27;</span>)<br>                e=&#123;i,j&#125;;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;#&#x27;</span>)<br>                g[i][j]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    queue&lt;PII&gt; q;<br>    res[s.fst][s.sed]=<span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(s), st[s.fst][s.sed]=<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> u=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)&#123;<br>            <span class="hljs-type">int</span> nx=u.fst+dxy[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ny=u.sed+dxy[i][<span class="hljs-number">1</span>];<br>            <br>            <span class="hljs-keyword">if</span>(g[nx][ny]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">1</span> || ny&lt;<span class="hljs-number">1</span> || nx&gt;n || ny&gt;m) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(st[nx][ny]) <span class="hljs-keyword">continue</span>;<br>            <br>            res[nx][ny]=res[u.fst][u.sed]+<span class="hljs-number">1</span>;<br>            q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st[e.fst][e.sed]) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 剪枝</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(res[e.fst][e.sed])<br>        cout&lt;&lt;res[e.fst][e.sed]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout&lt;&lt;<span class="hljs-string">&quot;oop!\n&quot;</span>;<br>        <br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> T; cin&gt;&gt;T; <span class="hljs-keyword">while</span>(T--)<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><p>BFS：武士风度的牛、逃离迷宫、地牢大师、A计划</p><ul><li><h3 id=1.3.3> 剪枝优化与Flood Fill </h3></li></ul><details> <summary> AcWing 1113. 红与黑 </summary>  <ul><li><a href="https://www.acwing.com/problem/content/1115/">AcWing 1113. 红与黑</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// dfs 写法</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dxy[][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">30</span>;<br><br><span class="hljs-type">int</span> n, m, cnt;<br><span class="hljs-type">bool</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br>PII S;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>    cnt++;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)&#123;<br>        <span class="hljs-type">int</span> nx=x+dxy[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> ny=y+dxy[i][<span class="hljs-number">1</span>];<br>        <br>        <span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">1</span> || ny&lt;<span class="hljs-number">1</span> || nx&gt;n || ny&gt;m) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(g[nx][ny] || st[nx][ny]) <span class="hljs-keyword">continue</span>;<br>        <br>        st[nx][ny]=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs</span>(nx, ny);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; j++)<br>            <span class="hljs-keyword">if</span>(s[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;#&#x27;</span>) g[i][j]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;@&#x27;</span>) S=&#123;i,j&#125;;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 进入这个位置，将其能够搜索到的其他位置打上标记</span><br>    st[S.fst][S.sed]=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs</span>(S.fst, S.sed);<br>    cout&lt;&lt;cnt&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;m&gt;&gt;n)<br>        <span class="hljs-keyword">if</span>(m!=<span class="hljs-number">0</span> &amp;&amp; n!=<span class="hljs-number">0</span>) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// bfs 写法</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dxy[][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">30</span>;<br><br><span class="hljs-type">int</span> n, m, cnt;<br><span class="hljs-type">bool</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br>PII S;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>    <br>    queue&lt;PII&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;x, y&#125;), st[x][y]=<span class="hljs-number">1</span>, cnt++;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> u=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)&#123;<br>            <span class="hljs-type">int</span> nx=u.fst+dxy[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ny=u.sed+dxy[i][<span class="hljs-number">1</span>];<br>            <br>            <span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">1</span> || ny&lt;<span class="hljs-number">1</span> || nx&gt;n || ny&gt;m) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(g[nx][ny] || st[nx][ny]) <span class="hljs-keyword">continue</span>;<br>            <br>            q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class="hljs-number">1</span>, cnt++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> g);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; j++)<br>            <span class="hljs-keyword">if</span>(s[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;#&#x27;</span>) g[i][j]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;@&#x27;</span>) S=&#123;i,j&#125;;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 进入这个位置，将其能够搜索到的其他位置打上标记</span><br>    st[S.fst][S.sed]=<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">bfs</span>(S.fst, S.sed);<br>    cout&lt;&lt;cnt&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;m&gt;&gt;n)<br>        <span class="hljs-keyword">if</span>(m!=<span class="hljs-number">0</span> &amp;&amp; n!=<span class="hljs-number">0</span>) <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary> AcWing 1233. 全球变暖 </summary>  <ul><li><a href="https://www.acwing.com/problem/content/1235/">AcWing 1233. 全球变暖</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dxy[][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br><br><span class="hljs-type">bool</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br><span class="hljs-type">int</span> n, res;<br><br><span class="hljs-comment">// 如果存在一个点，满足其上下左右都是岛屿的情况，那么这个点肯定不会被淹没</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-type">bool</span> flg=<span class="hljs-number">0</span>; <br>    <br>    queue&lt;PII&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;x,y&#125;), st[x][y]=<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> u=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)&#123;<br>            <span class="hljs-type">int</span> nx=u.fst+dxy[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ny=u.sed+dxy[i][<span class="hljs-number">1</span>];<br>            <br>            <span class="hljs-keyword">if</span>(g[nx][ny]==<span class="hljs-number">1</span>) cnt++;<br>            <br>            <span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">1</span> || ny&lt;<span class="hljs-number">1</span> || nx&gt;n || ny&gt;n) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(g[nx][ny]!=<span class="hljs-number">1</span> || st[nx][ny]) <span class="hljs-keyword">continue</span>;<br>            <br>            q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">4</span>) flg=<span class="hljs-number">1</span>; <span class="hljs-comment">// 存在上下左右都有岛屿的情况</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> flg==<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>            <span class="hljs-keyword">if</span>(s[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;#&#x27;</span>) g[i][j]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>            <span class="hljs-keyword">if</span>(g[i][j] &amp;&amp; !st[i][j])<br>                <span class="hljs-keyword">if</span>( <span class="hljs-built_in">bfs</span>(i,j) ) res++;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary> Luogu P1141 01迷宫 </summary>  <ul><li><a href="https://www.luogu.com.cn/problem/P1141">Luogu P1141 01迷宫</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dxy[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e3</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m, flg, cnt;<br><br><span class="hljs-type">bool</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br><span class="hljs-type">int</span> res[N][N]; <span class="hljs-comment">// 用res存标记，每个标记对应连接数量</span><br><span class="hljs-type">int</span> num[<span class="hljs-number">1000000</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> ux, <span class="hljs-type">int</span> uy)</span></span>&#123;<br><br>queue&lt;PII&gt; q;<br>q.<span class="hljs-built_in">push</span>(&#123;ux, uy&#125;), st[ux][uy]=<span class="hljs-number">1</span>, res[ux][uy]=flg;<br><br><span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br><span class="hljs-keyword">auto</span> u=q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br>cnt++;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)&#123;<br><span class="hljs-type">int</span> nx=u.fst+dxy[i][<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> ny=u.sed+dxy[i][<span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">1</span> || ny&lt;<span class="hljs-number">1</span> || nx&gt;n || ny&gt;n) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(g[nx][ny]==g[u.fst][u.sed] || st[nx][ny]) <span class="hljs-keyword">continue</span>;<br><br>q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class="hljs-number">1</span>, res[nx][ny]=flg;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <br>    cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>string s; cin&gt;&gt;s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br><span class="hljs-keyword">if</span>(s[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;1&#x27;</span>) g[i][j]=<span class="hljs-number">1</span>;<br>&#125;<br>    <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br><span class="hljs-keyword">if</span>(!st[i][j]) <br>cnt=<span class="hljs-number">0</span>, ++flg, <span class="hljs-built_in">bfs</span>(i, j), num[flg]=cnt;<br>    <span class="hljs-comment">// 因为每个 连通块 的大小，需要走完才知道</span><br>    <span class="hljs-comment">// 所以我们在进入每一块连通块时，给次连通块每个位置做上唯一flg</span><br>    <span class="hljs-comment">// bfs结束的时候，将cnt赋值给num[flg]，查询时，就可以直接查询了</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br><span class="hljs-type">int</span> a, b; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>cout&lt;&lt;num[res[a][b]]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id=1.6><font color="green"> 六、数学 </font></h2><ul><li><h3 id=1.6.4> 质（素）数 </h3></li></ul><details> <summary> AcWing 866. 试除法判定质数 </summary>  <ul><li><a href="https://www.acwing.com/problem/content/868/">AcWing 866. 试除法判定质数</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isP</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n/i; i++)<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isP</span>(n))<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> T; cin&gt;&gt;T; <span class="hljs-keyword">while</span>(T--)<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary> AcWing 867. 分解质因数 </summary>  <ul><li><a href="https://www.acwing.com/problem/content/869/">AcWing 867. 分解质因数</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n/i; i++)<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 质因数 i</span><br>            <br>            <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(n%i==<span class="hljs-number">0</span>)&#123;<br>                n/=i;<br>                cnt++;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, i, cnt);<br>        &#125;<br>        <br>    <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 1\n&quot;</span>, n);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> T; cin&gt;&gt;T; <span class="hljs-keyword">while</span>(T--)<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary> AcWing 868. 筛质数 </summary>  <ul><li><a href="https://www.acwing.com/problem/content/description/870/">AcWing 867. 分解质因数</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 埃式筛 O(nloglogn)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 素数的数量 近似 N/(2*lgN)</span><br><br><span class="hljs-type">int</span> primes[<span class="hljs-number">100000</span>], cnt;  <span class="hljs-comment">// 素数集合</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 标记合数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    st[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; i++)<br>        <span class="hljs-keyword">if</span>(!st[i])&#123;<br>            primes[++cnt]=i;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i; j&lt;=n; j+=i) st[j]=<span class="hljs-number">1</span>;   <span class="hljs-comment">// 标记合数</span><br>        &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class="hljs-built_in">make_primes</span>(n);<br>    <br>    cout&lt;&lt;cnt;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 欧拉筛 O(n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> primes[<span class="hljs-number">100000</span>], cnt;<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    st[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!st[i]) primes[++cnt]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; primes[j]&lt;=n/i; j++)&#123;<br>            st[ primes[j]*i ] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 用最小质因子去筛</span><br>            <span class="hljs-keyword">if</span>(i%primes[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class="hljs-built_in">make_primes</span>(n);<br>    <br>    cout&lt;&lt;cnt;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>Luogu P1835 素数密度 </summary>  <ul><li><a href="https://www.luogu.com.cn/problem/P1835">Luogu P1835 素数密度</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> primes[<span class="hljs-number">100000</span>], cnt;<br><span class="hljs-type">bool</span> st[N];<br><br>LL L, R, ans;<br>unordered_set &lt;LL&gt; H;    <span class="hljs-comment">// 如果H=1，说明被筛掉</span><br><br><span class="hljs-comment">// 对于 n 而言</span><br><span class="hljs-comment">// 其质因子的范围是 [ 2-sqrt(n) ]</span><br><span class="hljs-comment">// 因此我们可以用质因子去将[ L-R ] 中的合数给弄出来</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    st[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!st[i]) primes[++cnt]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; primes[j]&lt;=n/i; j++)&#123;<br>            st[ primes[j]*i ] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 用最小质因子去筛</span><br>            <span class="hljs-keyword">if</span>(i%primes[j]==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">make_primes</span>( <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)<span class="hljs-number">-1</span>) );<br>    <br>    cin&gt;&gt;L&gt;&gt;R;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=cnt; i++)&#123;  <span class="hljs-comment">// 枚举质数</span><br>        LL b = L / primes[i];<br>        LL j = b * primes[i];<br>        <span class="hljs-keyword">while</span>(j&lt;L) j+=primes[i];   <span class="hljs-comment">// 定位到大于L，同时能被primes[i]整除的第一个数</span><br>        <br>        <span class="hljs-keyword">for</span>( ; j&lt;=R; j+=primes[i])<br>            H.<span class="hljs-built_in">insert</span>(j); <span class="hljs-comment">// 筛掉再说</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(LL i=L; i&lt;=R; i++)&#123;        <br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)<span class="hljs-number">-1</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(st[i]==<span class="hljs-number">0</span>) ans++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!H.<span class="hljs-built_in">count</span>(i)) ans++;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id=1.7><font color="green"> 七、图论 </font></h2><ul><li><h3 id=1.7.1> 最短路 </h3></li></ul><details> <summary> AcWing 849. Dijkstra求最短路 I <font style="background-color:red", color=black><b>dijkstra[ 模板 ]</b></font></summary>  <ul><li><a href="https://www.acwing.com/problem/content/851/">AcWing 849. Dijkstra求最短路 I</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> edge[N][N]; <span class="hljs-comment">// 稠密图</span><br><span class="hljs-type">int</span> dis[N]; <span class="hljs-comment">// 最短路</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 是否确定最短</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <br>    dis[s]=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        <br>        <span class="hljs-type">int</span> t=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>            <span class="hljs-keyword">if</span>(!st[j] &amp;&amp; (t==<span class="hljs-number">-1</span> ||  dis[t]&gt;dis[j]))<br>                t=j;    <br>        <br>        st[t]=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(t==e) <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>            dis[j]=<span class="hljs-built_in">min</span>(dis[j], dis[t]+edge[t][j]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(edge, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, z;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x][y]=<span class="hljs-built_in">min</span>(edge[x][y], z);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dijkstra</span>(<span class="hljs-number">1</span>, n);<br>    <br>    <span class="hljs-keyword">if</span>(dis[n]==inf)<br>        cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>Luogu P4779 【模板】单源最短路径（标准版） <font style="background-color:red", color=black><b>dijkstra堆优化[ 模板 ]</b></font></summary>  <ul><li><a href="https://www.luogu.com.cn/problem/P4779">Luogu P4779 【模板】单源最短路径（标准版）</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><br>vector&lt;vector&lt;PII&gt;&gt; <span class="hljs-built_in">edge</span>(N);    <span class="hljs-comment">// 邻接表</span><br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> dis[N];<br><br><span class="hljs-type">int</span> n, m, S;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123;dis[s], s&#125;);<br><br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> x=heap.<span class="hljs-built_in">top</span>().sed;<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span>(st[x]) <span class="hljs-keyword">continue</span>;<br>        st[x]=<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;[y, z]: edge[x])<br>            <span class="hljs-keyword">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class="hljs-built_in">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;S;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        edge[x].<span class="hljs-built_in">pb</span>(&#123;y, w&#125;);<br>    &#125;<br><br>    <span class="hljs-built_in">dijkstra</span>(S);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) cout&lt;&lt;dis[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 853. 有边数限制的最短路 <font style="background-color:orange", color=black><b>bellman-ford[ 模板 ]</b></font></summary>  <ul><li><a href="https://www.acwing.com/problem/content/855/">AcWing 853. 有边数限制的最短路</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">510</span>;<br><br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> edge[N][N];<br><span class="hljs-type">int</span> dis[N];<br><span class="hljs-type">int</span> bkup[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <br>    dis[s]=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=k; i++)&#123;<br>        <span class="hljs-type">bool</span> flg=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memcpy</span>(bkup, dis, <span class="hljs-keyword">sizeof</span> dis);   <br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>; x&lt;=n; x++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=<span class="hljs-number">1</span>; y&lt;=n; y++)<br>                <span class="hljs-keyword">if</span>( dis[y] &gt; bkup[x]+edge[x][y] )&#123;<br>                    dis[y] = bkup[x]+edge[x][y];<br>                    flg=<span class="hljs-number">1</span>;<br>                &#125;<br>        <br>        <span class="hljs-keyword">if</span>(!flg) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(edge, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, z;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x][y]=<span class="hljs-built_in">min</span>(edge[x][y], z);<br>    &#125;<br>    <br>    <span class="hljs-built_in">bellman_ford</span>(<span class="hljs-number">1</span>, n);<br>    <br>    <span class="hljs-keyword">if</span>(dis[n]&gt;inf/<span class="hljs-number">2</span>)<br>        cout&lt;&lt;<span class="hljs-string">&quot;impossible&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>AcWing 851. spfa求最短路 <font style="background-color:orange", color=black><b>bellman-ford队列优化（spfa）[ 模板 ]</b></font> </summary>  <ul><li><a href="https://www.acwing.com/problem/content/853/">AcWing 851. spfa求最短路</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> G++ optimize(<span class="hljs-string">&quot;Ofast&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br>vector&lt;PII&gt; edge[N];<br><span class="hljs-type">int</span> dis[N]; <br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 是否在队列中</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <br>    dis[s]=<span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(s), st[s]=<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(q.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> x=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>(), st[x]=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; [y, z]: edge[x])<br>            <span class="hljs-keyword">if</span>( dis[y] &gt; dis[x]+z)&#123;<br>                dis[y] = dis[x]+z;<br>                <span class="hljs-keyword">if</span>(!st[y])<br>                    q.<span class="hljs-built_in">push</span>(y), st[y]=<span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, z;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x].<span class="hljs-built_in">push_back</span>(&#123;y, z&#125;);<br>    &#125;<br>    <br>    <span class="hljs-built_in">spfa</span>(<span class="hljs-number">1</span>, n);<br>    <br>    <span class="hljs-keyword">if</span>(dis[n]==inf)<br>        cout&lt;&lt;<span class="hljs-string">&quot;impossible&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary> Luogu P3371 【模板】单源最短路径（弱化版） <font style="background-color:orange", color=black><b>spfa??[ 模板 ]</b></font></summary>  <ul><li><a href="https://www.luogu.com.cn/problem/P3371">Luogu P3371 【模板】单源最短路径（弱化版）</a></li></ul></details><details> <summary>AcWing 854. Floyd求最短路 <font style="background-color:yellow", color=black><b>Floyd[ 模板 ]</b></font> </summary>  <ul><li><a href="https://www.acwing.com/problem/content/856/">AcWing 854. Floyd求最短路</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">210</span>;<br><br><span class="hljs-type">int</span> n, m, k;<br><span class="hljs-type">int</span> dis[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>; k&lt;=n; k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>                dis[i][j]=<span class="hljs-built_in">min</span>(dis[i][j], dis[i][k]+dis[k][j]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=n; j++)<br>            <span class="hljs-keyword">if</span>(i==j) dis[i][j]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> dis[i][j]=inf;<br>                <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, z; <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        dis[x][y]=<span class="hljs-built_in">min</span>(dis[x][y], z);<br>    &#125;<br>    <br>    <span class="hljs-built_in">floyd</span>();<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=k; i++)&#123;<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class="hljs-keyword">if</span>(dis[x][y]&gt;inf/<span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;dis[x][y]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary> Luogu P1629 邮递员送信 <font style="background-color:red", color=black><b>dijkstra堆优化</b></font></summary> <ul><li><a href="https://www.luogu.com.cn/problem/P1629">Luogu P1629 邮递员送信</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e3</span>+<span class="hljs-number">10</span>;<br><br>vector&lt;vector&lt;PII&gt;&gt; <span class="hljs-built_in">edge</span>(N);<br>vector&lt;vector&lt;PII&gt;&gt; <span class="hljs-built_in">redge</span>(N); <span class="hljs-comment">// 反向边</span><br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-type">int</span> dis[N]; <span class="hljs-comment">// 1到每个点的最短路</span><br><br><span class="hljs-type">int</span> n, m;<br>LL ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s, vector&lt;vector&lt;PII&gt;&gt; &amp;e)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123;dis[s], s&#125;);<br><br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> x=heap.<span class="hljs-built_in">top</span>().sed;<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span>(st[x]) <span class="hljs-keyword">continue</span>;<br>        st[x]=<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;[y, z]: e[x])<br>            <span class="hljs-keyword">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class="hljs-built_in">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-type">int</span> n, m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        edge[x].<span class="hljs-built_in">pb</span>(&#123;y, w&#125;);<br>        redge[y].<span class="hljs-built_in">pb</span>(&#123;x, w&#125;);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dijkstra</span>(<span class="hljs-number">1</span>, edge);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; i++) ans+=dis[i];<br>    <span class="hljs-built_in">dijkstra</span>(<span class="hljs-number">1</span>, redge);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; i++) ans+=dis[i];<br>    cout&lt;&lt;ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details> <summary>  Luogu P1119 灾后重建 <font style="background-color:yellow", color=black><b>Floyd</b></font></summary> <ul><li><a href="https://www.luogu.com.cn/problem/P1119">Luogu P1119 灾后重建</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">210</span>;<br><br><span class="hljs-type">int</span> dis[N][N];<br><span class="hljs-type">int</span> ti[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-type">int</span> n, m, q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">floyd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> t)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;n; k++)&#123;<br>        <span class="hljs-keyword">if</span>(ti[k]&gt;t || st[k]) <span class="hljs-keyword">continue</span>;<br>        st[k]=<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;n; j++)<br>                <span class="hljs-keyword">if</span>( dis[i][j] &gt; dis[i][k] + dis[k][j])<br>                    dis[j][i] = dis[i][j] = dis[i][k] + dis[k][j];<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(dis[x][y]==<span class="hljs-number">0x3f3f3f3f</span> || ti[x]&gt;t || ti[y]&gt;t) <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> dis[x][y];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;in.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin); <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ti[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        dis[x][y]=<span class="hljs-built_in">min</span>(dis[x][y], w);<br>        dis[y][x]=<span class="hljs-built_in">min</span>(dis[y][x], w);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++) dis[i][i]=<span class="hljs-number">0</span>;<br><br>    cin&gt;&gt;q;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> x, y, t;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;t);<br>        cout&lt;&lt;<span class="hljs-built_in">floyd</span>(x, y, t)&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> G++ optimize(<span class="hljs-string">&quot;Ofast&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">210</span>;<br><br><span class="hljs-type">int</span> edge[N][N];<br><span class="hljs-type">int</span> dis[N]; <span class="hljs-comment">// 最短路</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 是否确定最短路</span><br><br><span class="hljs-type">int</span> n, m, q;<br><span class="hljs-type">int</span> ti[N];  <span class="hljs-comment">// 每个村庄完成重建的时间</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e, <span class="hljs-type">int</span> t)</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123;dis[s], s&#125;);<br>    <br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> x=heap.<span class="hljs-built_in">top</span>().sed;<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span>(st[x]) <span class="hljs-keyword">continue</span>;<br>        st[x]=<span class="hljs-number">1</span>;<br><br>        edge[s][x]=<span class="hljs-built_in">min</span>(edge[s][x], dis[x]); <span class="hljs-comment">// 更新最短路</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=<span class="hljs-number">1</span>; y&lt;=n; y++)&#123;    <span class="hljs-comment">// 用邻接表可能会更快</span><br>            <span class="hljs-type">int</span> z=edge[x][y];<br><br>            <span class="hljs-keyword">if</span>( dis[y] &gt; dis[x]+z &amp;&amp; ti[x]&lt;=t &amp;&amp; ti[y]&lt;=t )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class="hljs-built_in">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(dis[e]==<span class="hljs-number">0x3f3f3f3f</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> dis[e];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br>    <span class="hljs-built_in">memset</span>(edge, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ti[i]);    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> x, y, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        x++, y++;<br>        edge[x][y]=<span class="hljs-built_in">min</span>(edge[x][y], w);<br>        edge[y][x]=<span class="hljs-built_in">min</span>(edge[y][x], w);<br>    &#125;<br><br>    cin&gt;&gt;q;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> x, y, t;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;t);<br>        x++, y++;<br>        cout&lt;&lt;<span class="hljs-built_in">dijkstra</span>(x, y, t)&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details><summary> AcWing 1488. 最短距离 </summary><ul><li><a href="https://www.acwing.com/problem/content/1490/">AcWing 1488. 最短距离</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 超级源点</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> G++ optimize(<span class="hljs-string">&quot;Ofast&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m, k, q;<br>vector&lt;PII&gt; edge[N];<br><span class="hljs-type">int</span> dis[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span>&#123;<br>    <span class="hljs-type">int</span> ans=inf;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    <br>    dis[s]=<span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123;dis[s], s&#125;);<br>    <br>    <span class="hljs-keyword">while</span>(heap.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">auto</span> x=heap.<span class="hljs-built_in">top</span>().sed;<br>        heap.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-keyword">if</span>(st[x]) <span class="hljs-keyword">continue</span>;<br>        st[x]=<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-comment">//cout&lt;&lt;dis[x]&lt;&lt;&quot;\n&quot;;</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;[y, z]: edge[x])<br>            <span class="hljs-keyword">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class="hljs-built_in">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        edge[a].<span class="hljs-built_in">pb</span>(&#123;b, c&#125;);<br>        edge[b].<span class="hljs-built_in">pb</span>(&#123;a, c&#125;);<br>    &#125;<br>    cin&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=k; i++)&#123;<br>        <span class="hljs-type">int</span> j;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;j);<br>        edge[n+<span class="hljs-number">1</span>].<span class="hljs-built_in">pb</span>(&#123;j, <span class="hljs-number">0</span>&#125;);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dijkstra</span>(n+<span class="hljs-number">1</span>);<br>    <br>    cin&gt;&gt;q;<br>    <span class="hljs-keyword">while</span>(q--)&#123;<br>        <span class="hljs-type">int</span> s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s);<br>        cout&lt;&lt;dis[s]&lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><details><summary> AcWing 1507. 旅行计划 </summary><ul><li><a href="https://www.acwing.com/problem/content/description/1509/">AcWing 1507. 旅行计划</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 记录路径</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> G++ optimize(<span class="hljs-string">&quot;Ofast&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fst first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sed second</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-type">int</span> n, m, S, D;<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, PII&gt;&gt; edge[N]; <span class="hljs-comment">// x-&gt;y </span><br><span class="hljs-type">int</span> pre[N]; <span class="hljs-comment">// 最短路径中，最短的一条路径的前驱</span><br>PII dis[N]; <span class="hljs-comment">// 最短路径及最小花费</span><br><span class="hljs-type">bool</span> st[N]; <span class="hljs-comment">// 是否确定最小</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> e)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    priority_queue&lt;pair&lt;PII, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;PII, <span class="hljs-type">int</span>&gt;&gt;, greater&lt;pair&lt;PII, <span class="hljs-type">int</span>&gt;&gt;&gt; heap;<br><br>    dis[s] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br>    heap.<span class="hljs-built_in">push</span>(&#123; dis[s], s &#125;);<br><br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> x = heap.<span class="hljs-built_in">top</span>().sed;<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">if</span> (st[x]) <span class="hljs-keyword">continue</span>;<br>        st[x] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [y, w] : edge[x]) &#123;<br>            PII t = &#123; dis[x].fst + w.fst, dis[x].sed + w.sed &#125;;<br>            <span class="hljs-keyword">if</span> (dis[y] &gt; t) &#123;<br>                dis[y] = t;<br>                heap.<span class="hljs-built_in">push</span>(&#123; dis[y], y &#125;);<br>                pre[y]=x;   <span class="hljs-comment">// 通过x点到y</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; D;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c, d;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);<br>        edge[a].<span class="hljs-built_in">pb</span>(&#123; b, &#123;c, d&#125; &#125;);<br>        edge[b].<span class="hljs-built_in">pb</span>(&#123; a, &#123;c, d&#125; &#125;);<br>    &#125;<br><br>    <span class="hljs-built_in">dijkstra</span>(D, S); <span class="hljs-comment">// 反着来，这样可以直接用pre输出</span><br><br>    <span class="hljs-type">int</span> u = S;<br>    cout&lt;&lt;S&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">while</span> (u != D) cout &lt;&lt; pre[u] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>, u = pre[u];<br><br>    cout &lt;&lt; dis[S].fst &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; dis[S].sed;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details></details><hr><h1 id=2><font color="blue">牛刀小试</font></h1>  <details>  <summary>目录</summary><ol><li><p>基础算法</p><ul><li>位运算 <a href="">0x01</a></li><li>倍增 <a href="">0x39</a></li><li>构造</li></ul></li><li><p>数据结构</p><ul><li>并查集 <a href="">0x41</a></li><li>树状数组 <a href="">0x42</a></li><li>线段树 <a href="">0x43</a></li><li>二叉搜索树与平衡树 <a href="">0x46</a></li><li>分块</li><li>点分治</li><li>可持久化数据结构</li></ul></li><li><p>搜索</p><ul><li>迭代加深</li><li>双向DFS或BFS</li><li>BFS变形</li><li>A* 与 IDA*  </details></li></ul></li></ol><hr><h1 id=3><font color="red">略有所成</font></h1>  <details>  <summary>目录</summary>  </details>]]></content>
    
    
    <categories>
      
      <category>teach</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>下载fluid</title>
    <link href="/2022/07/21/hexo1/"/>
    <url>/2022/07/21/hexo1/</url>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p><code>下载fluid</code>   </p></blockquote><p>在此目录（即博客地址&#x2F;themes）下  </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">d/code/github/blog/themes</span>    <br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">git</span> <span class="hljs-string">clone</span> <span class="hljs-string">https://github.com/fluid-dev/hexo-theme-fluid.git</span> <span class="hljs-string">fluid</span>    <br></code></pre></td></tr></table></figure><p>下不了？ </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">--unset</span> <span class="hljs-string">http.proxy</span>    <br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo命令</title>
    <link href="/2022/07/21/hexo2/"/>
    <url>/2022/07/21/hexo2/</url>
    
    <content type="html"><![CDATA[<p><strong>清除缓存</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><p><strong>生成静态文件</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p><strong>启动服务器</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo sever</span><br></code></pre></td></tr></table></figure><p><strong>部署网站</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>龙在天</title>
    <link href="/2002/05/13/me/"/>
    <url>/2002/05/13/me/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="龙在天！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="55fc59e46f4d50c08aaa5cacb4d43f3e6e4b7b2863e0d06e2cd8959bdac9dfee">426cf188bce79bdda53fd0c13e4bc5c637b39e34cb3e0c29e0e60757b2a49c2d19ad6aaacd79ec0075f34e879590e03cb1f8a2d8908ed9b24031e1cd88682f758befda1642c9b3192541b015c0b4411b29d0037d081249209d8a683e421125d9b935da1b84c901216904ad7d643c7d73d69ea8cfea6f4d64ad986e40f7bed56ca0380c36da8643b8f2d8408a2667ebec8c545def8f4875c9c875700d8de45a942bee6db70bd9ee974c3a51483ef46e371f75badf64d89aac685452886b9443276006d6ad9f7b6e52e8b8ba7667b9a3e146e8afd63007224786d589b0007aed87e3ea9b706cd494b750c217c107d2236013f5e8f73576717162e0c8382360eeb59d062ae2770e24f597d7ace2fa84bb3a9e1aefc29b968bc899ed38a3a1a89f72c9393d93defef6da49aede5f07c94bba4216214567025836619b33d72827deaa1d789a1e6c134a8ded5faf41c3dde421c565bb2a0e478ff7ead468fac65723b85ddcfcffee38af00c6f705385b342d72e6252e8f013621eba5f885b8b7281f5cfb48145b16835668c8ee87f4833c0167a53c4e821a1e2a6c4e6d50d7265c4d33272bf8495aec2da69358e9a556fc7f8c34b9f4ae4a539c1147df3a226a6070c624c861460da3e9494d5926bdfba26daee74270d93b7b2bd3d801b7c680b896352f4d19900296be14d00b856ec656355b89b7ecc4b13517d599b514b1ec9d0f123f73be895b38e447e0e71d3539df23d34dd14065f8e4c89c650ffdb364cdc85b3c63ecf7ce6f916dd467ee47b703b0ed4f4315a458c9746d581a22cca45b0fdfc6b55069bbdec138708dba98ba41e15035300a572ea607d4ca17a0e654a6c63c6053571ba976d8fc06d95197a31699223542924ee3ac47ce8dea67081f761073fd80a60d5e664afb422a6eb006b3e0beec17e259008934498ee06622bf42260238ecb8b6208f1fb06aaf1cc0fef79c8ef8bb3576a60415bb6a0c9ee5a22965fcaad2b58d74218d4987729f58e443c94943ec717b3b578e8a5d54f0746e444d6826a37f6834a76c63515465c4500a382129902620da9044b15da15fdc7dcc5f30631c04663e13bad81312b3e6c48a642e8a4d9aa43366f117e195210ca61afb70f1a2a452d80722e90a1e34c9b49d3e2d89e91fe5f15e243706eafea475e66766bb0c21ba4540c4798ef5f06564080c89a71a2fb566f3e7bec6b70327dfd3821f7571bac1318ad45fe57fc1e48c22c4a522aa34ad1da7dd87c71c52b1b48dd958cb017118a45410a4b6fd8849caafec871d51071a357ae311ec60f46843417879631b7b5520d12f261d7449692a14bb310d1de68eb3e80845453ca0c232d5a13eba40e338d0821fa3ae139985dd78f4df7a276d100454391a4689dd1f6f568b9f7854b98043c8efb84052f3adba66f81ecbfb4f3aea4217a3a4ce0db65ab137500e6acf553169e146d474f644a3c6f298cf723ae1e9c4d50a58d8608eef033af8b2016e7af6cfcf2f499b3e21b2910da2a6736769c97b1a60e7cd5c9a1323034819184ca8a8347019f1693ef046cf94eeea34da36d1e4f548f47c89ba1fc8e22e4b8b556300c06b8875bb7d2713d2d95c9c414a3d5eb73d65bedfe0b8f0027206913357622e2990f4591e36028ad54dd4992f8e1efe5f19ac01d76541b7d9925534134c10adbb1e410cf170903c980ed197a7b44e3612dcf5a243941d82f0ceebeeed8f8b9cb835f51e70c0035cf68a616bba3fda1f57ddb75b1fd964860e316e80c0e45fc77799d02dfbfa5a67be0c1d861b1a3b501cc3f63e5e8c01eb846c09856718a32a2af8efea1d0c22c391a43d84f7840e44b962aa6e6f26e4be46ce074cbaecabe0f93146d26c3a6448f952aca7777acad5c444e3414814df73c98943aaf38ad533fdf0356b469e0f3d1d1bed2e630d60c32a752b583126e55c5bfe04af0879e684d1e81296bf3dd262eb8ef77148e66314524b01c8074965fc8e521cc183026a6ad1c47c7a6cfcf84656d25fb5fb359f663c012af48175c3d776ef92f35ae17c392e6d0f2729d7fd78b83080ee8407cc27067b1791d6f3620e3e6b0e1cc9675b39c128187f7c4f20e76004dbe46c455d334af809a1c901a82d567097d3740eaf462e8339a0687746d2df5209cf92ffe71d6ed3713e7bcdbcc469535f6b91f646cde78ab60300dea0893f2692784e9cd5d5e0baa8d0f83c64060387538bf89190ed315feb6e5666a628597c6c6ca40038bd6270ec2a2b50f8ea7bd202543487b94b152f083302b54d4cc2a0bee5118673f863dfebff77e53e5940f47c83e33c1f9372b3c0971b38a0385c9561b9c9f1bdb389d35a0d3288bcd0809120e838e1f029e67dac9afc856668682a99475fdbbacbe7796989a49a4bcd113675527a6cdaa356e1a20708bead700f81f0dbe9990a3758bdfd08caa1beabab1f9c55dab38741d04b6111a52d02a4168b1dbeb834382bb410402ab96279831259a0a33a037294b08a9265a65ab0cbf62c79be08bd259c6785b4f593b5cf01ecd10ac0a042c44d913ec05e81d0c13c51107baee62315f9d36ac0b310c49e066dbf9357d7d69f3fdb943c31f41c9258da889f2284364001a8b6a674b7374d7b98b77c7d193c2354b3ffd2f05275f87e62e8df73a96c6a34ec5b1c260f057fb94b5076dd6fcc1f2fcd3b1417b15bce35e967cc56d7d14221a48c8274a25d8697a0582d7a9c9462584c2f216c6aec06d1ec806ad8f75190dd4372a6dab8863b1d37667b61e4dcb11b1ff52bac7232229de3e0962d63efd75f636c59d72675735cc747d46d220ff2ddddf2eb2718a35457b8abeccf4aa3120b6b892797713b0c0e4f683cf0effa0887d4a0875f70e0eba3ce415f3b22beceb5b387562da849aa3145bf2f11d4967d3075a4340427ac345d6b8293058ee4a757a058cedf6c955a78f8f293673bb0695cefa625ab2eaed1e8d61b441fa34726bbced5eb5deed19e165e8d232b01062c14581b11acdd239d5a07904d118eb6625bb0e9ecbcbee5e398d6a9cccd5a497b6a4414ae84b952c72987fff5c032e1818d8bbd4d359b7174e0476b93283cccff3ea3726b4c6ecd99f48d3745e5e9cbd0aa4e5f31c95abec62112cae90e725d47708244ac923350a65e67b69453cbff1c376d54935f34d9d4626c761469388ef2fde0d1f226784a294d85e0ba2f9832bdb0e4a474e744d682bc73119644ca7a4597fed691c5e6c6e04dd27dd93da0fbf1c71ea25cf22387b4de5bf2f3283d32a7d1cd2f32fd2694a08f6e50929578c1e206366aa4850713c8a8acea4234f8f61abddeb4b9363bb28da4e87553248c410a9a176a086f3cb41fea5a7b97b19da575c77274c282308535e6eec55a6d991b7068e179f179d0f8c76d20ab523b10910a03e96b80e024708aa64fba1b231a4f6307ac0ccb25426a62afdc0f94c666dc9ede3411a069b955d3ae63c97f198110eb3a12c403568c589f23a5d29fd0dc6806fa8688faa3a50912d68c0e9c348892dc5c8fd4d06d5be8d48154941e95a9392132c89d4b2e6e1ca5ecb987ac4f468da0ad22b8f367d33f0e151bd351ab507522f3948fb538d529a0ec5b0cd40f21384a10d0025b9c259379a6788b592763818ae3ca19a85561a7689d19a59b03c8ed479ea9d24db44f69a5e2638aa41270a0a1f95ded4f6b7aad54bda1fb6b4e3eb73e7eeb5a63d6fe29335beb32014d8c129189ccbf15c87658c19b1ed37ec6d768da8e4b85d3d9b6595a873e036a2bd3bef1cbe209ba79fc68b4a2e26aca1d1c9853f9a8af06a001fc1475f1e4ea661459b26078f2a8fec0b6686e42b28aff1220e9e36aa2974de91c76accf6e8a181108e2ea3949e20d1bf9aceb6c5f42bbb138463bfac13b849031293cf93e7130cf7cf84cc04ee3cb31d7e3a991847f7fb674324e62a00933828fe2864e7ee1c8f9c06bf8ade2d219157f5bd2022c358e234a17df163f55e71709386da5082155a27d16bf52531ae4a850e2c4040892a58cc27b8d6d67f4144d0067fa92b1a85317e0cb7c97a7a453bd2994c98d575f9d1e1ff9bc6b25223cc0947af99ef37595773cb8c308d7620ced9eda5eee58105c7649e285b658fab4f8a28b4b5a946b37674e6e3a857c8be3b0d1af4d857a762067ec0b8b94130eed86e4fbcc441d5852c829ac4e3b2e5b6292858547019c9299389bd8f341b4b142786150ca581dd069ed345ad0230c7e7d3231d2b4b9652e148a8eab4c44c24ed0ec21c70e8477c8ad5c6643e872481333a1b64aca3438a75ef8e48e7e262e8378373b04b4dcfac5b618ed6bf06fe7aae358dea395f766de3b1c6ca5c47f56f82c786811ca6d1106534de91737db6b53143b0b520ba4ac9ba3602191cfb4762d034aca34185b36b3ef8e594439d1c0494c10aaa3838845e72de2eb3e51dad43f094528b74d54eb5abae82c0b95226b069904f3287ab3bf0ebcd1115b7e4467daa68e9f94882c290c02be7c7992432233fa770c20c6002c0311e465266d13995aca48c82fbbbb8fb070d842cec7e44827a8a47f3f694ed203dbb5e3195d7f85b7265f87acaa7344c61001d11c876630497e08c4418086bfbd432fad6144b43647dcba8c3fc5048934e4620b096c1b175b93dcdab4fbeef57347e0bf1cc6b1cd72f65023fe58d6fca27dceaa4963584ae794bf80131a21e384c06b1afea4eab9fce42b7327f70aa57b4e6927b87a38a5c962136c0ce66abc5f099c5c2e60bc48f301fe2ded1727d1dce162e89fbde344d268c8e8e919801314d234aeca08b1e58068c00606f69e96bad010142b05a3152dda9c70c6579004c75b7bcd85b023d4c2d40095045b9f4e0c4308bd829fa94ce0d9767a825c3fe7c98cfc7bb51bc03d484accad58a50db54e3bf96210ff53e01960116e4ec73a91f7e7a2d488a8c5330cab221089fa431ac029553a2926b10c6df790b18c8b485500a8c37c5199e54d88a488e4c1171bbf959b52586b27c24681e846a0969f781977e5c4aafa30e74d56cb99349f91a6643afe879d64cc25afed0a538a411414b8e8f174dbbe5404cef6a03be4463b9724be86bd2333e29f54a0ea3dd06787c10cc7ea87a02b3788109d96b385d21219b48f9a23172bdf91362a2a367e54d7a6dfd4c89733d76be8830de87201e792eb2845d7f9ff5c786f354dbab781cf4bf5229e138c8c5020aeeb57ee36eab0fb5d64b6c32a7249bd0e559ba0ed34c712227d170d2dceca83a8fbd07c35107d44bdd95f5251765c530df0654d58dbc84f8428f12590131b68b9342d78d4f20f8489c7391ec6176f12a56290933279c473fad1974ffc3ba49f60e9234643e9aac3cf3902d28f5a5410fd89f1a5212b4a11859802aee5e8b6ee1331671960a230bc2e6aae62b9e4a2e69ea3ee733a6a6a80d4c7e81e838a263c356c09f6b61f59aa79a8584a8331d7410f46dfad3ab1210d5d3ec71bc081115ec94c8cf04d4436ce89f16be13fd66c7e06ffa1bb057e9e9e50b2a1c6580bf13dfe873e4677b61edfc384b33be47fb80cd73681b0c85c0c0590a41830107717b917146c6fd842e06bc7484160fd64c487e72c4888246c71f9630bbe160c992166e6d98d8c467483407a678b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">龙在天？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
