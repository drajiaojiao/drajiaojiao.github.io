{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/bg/dl.png","path":"img/bg/dl.png","modified":0,"renderable":0},{"_id":"source/img/bg/head.png","path":"img/bg/head.png","modified":0,"renderable":0},{"_id":"source/img/bg/iron.png","path":"img/bg/iron.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/10.png","path":"img/algorithm/10.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/11.png","path":"img/algorithm/11.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/12.png","path":"img/algorithm/12.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/13.png","path":"img/algorithm/13.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/14.png","path":"img/algorithm/14.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/15.png","path":"img/algorithm/15.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/16.png","path":"img/algorithm/16.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/18.png","path":"img/algorithm/18.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/17.png","path":"img/algorithm/17.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/19.png","path":"img/algorithm/19.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/2.png","path":"img/algorithm/2.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/3.png","path":"img/algorithm/3.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/4.png","path":"img/algorithm/4.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/5.png","path":"img/algorithm/5.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/6.png","path":"img/algorithm/6.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/7.png","path":"img/algorithm/7.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/8.png","path":"img/algorithm/8.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/9.png","path":"img/algorithm/9.png","modified":0,"renderable":0},{"_id":"source/img/algorithm/icpc_logo.png","path":"img/algorithm/icpc_logo.png","modified":0,"renderable":0},{"_id":"source/img/hexo/1.png","path":"img/hexo/1.png","modified":0,"renderable":0},{"_id":"source/img/hexo/2.png","path":"img/hexo/2.png","modified":0,"renderable":0},{"_id":"source/img/hexo/4.png","path":"img/hexo/4.png","modified":0,"renderable":0},{"_id":"source/img/hexo/3.png","path":"img/hexo/3.png","modified":0,"renderable":0},{"_id":"source/img/hexo/5.png","path":"img/hexo/5.png","modified":0,"renderable":0},{"_id":"source/img/hexo/6.png","path":"img/hexo/6.png","modified":0,"renderable":0},{"_id":"source/img/teach/2.png","path":"img/teach/2.png","modified":0,"renderable":0},{"_id":"source/img/teach/1.png","path":"img/teach/1.png","modified":0,"renderable":0},{"_id":"source/img/teach/3.png","path":"img/teach/3.png","modified":0,"renderable":0},{"_id":"source/ff/（省1）蓝桥杯22.jpg","path":"ff/（省1）蓝桥杯22.jpg","modified":0,"renderable":0},{"_id":"source/ff/ttt.jpg","path":"ff/ttt.jpg","modified":0,"renderable":0},{"_id":"source/ff/（证）码题集.jpg","path":"ff/（证）码题集.jpg","modified":0,"renderable":0},{"_id":"source/ff/（省1）互联网+.jpg","path":"ff/（省1）互联网+.jpg","modified":0,"renderable":0},{"_id":"source/ff/（省3）挑战杯.jpg","path":"ff/（省3）挑战杯.jpg","modified":0,"renderable":0},{"_id":"source/ff/（排名）22挑战杯.pdf","path":"ff/（排名）22挑战杯.pdf","modified":0,"renderable":0},{"_id":"source/ff/（排名）22互联网+.pdf","path":"ff/（排名）22互联网+.pdf","modified":0,"renderable":0},{"_id":"source/ff/（单项）3000.jpg","path":"ff/（单项）3000.jpg","modified":0,"renderable":0},{"_id":"source/ff/（单项）150.jpg","path":"ff/（单项）150.jpg","modified":0,"renderable":0},{"_id":"source/ff/（国优）蓝桥杯22.jpg","path":"ff/（国优）蓝桥杯22.jpg","modified":0,"renderable":0},{"_id":"source/ff/（排名）数据标注& 21.9.jpg","path":"ff/（排名）数据标注& 21.9.jpg","modified":0,"renderable":0},{"_id":"source/ff/（省2）工业大数据算法.jpg","path":"ff/（省2）工业大数据算法.jpg","modified":0,"renderable":0},{"_id":"source/ff/（省2）心理.jpg","path":"ff/（省2）心理.jpg","modified":0,"renderable":0},{"_id":"source/ff/（综合）400.jpg","path":"ff/（综合）400.jpg","modified":0,"renderable":0},{"_id":"source/ff/（证）普通话二乙.png","path":"ff/（证）普通话二乙.png","modified":0,"renderable":0},{"_id":"source/ff/（证）英语B级.jpg","path":"ff/（证）英语B级.jpg","modified":0,"renderable":0},{"_id":"source/ff/（证）计算机二级.png","path":"ff/（证）计算机二级.png","modified":0,"renderable":0},{"_id":"source/ff/（排名）工业大数据.jpg","path":"ff/（排名）工业大数据.jpg","modified":0,"renderable":0},{"_id":"source/ff/（排名）心理.png","path":"ff/（排名）心理.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hexo1.md","hash":"d893602d482bd352800c775d1ca5c7cea0d4b88a","modified":1668946580806},{"_id":"source/categories/index.md","hash":"082765b30f76364c3d0bd7ff91155142b0fc8f0a","modified":1658404563020},{"_id":"source/_posts/hexo2.md","hash":"1486032e72813378a13703f12fd1ad6873fd3693","modified":1668946589151},{"_id":"source/_posts/algorithm1.md","hash":"cbd7182243474e058421f08b665c889f8b1975ac","modified":1670044884971},{"_id":"source/js/duration.js","hash":"d227a48dd344779e3f3334a69520ff17ed9d1ee1","modified":1658368856360},{"_id":"source/img/hexo/bg/1.png","hash":"674401b1559acae2d2ea0b50c52704e5ff980a70","modified":1646701272483},{"_id":"source/img/hexo/bg/3.png","hash":"7ccb7e9c44ff21bdda1cb62b8e437efa6894df2d","modified":1658465856588},{"_id":"source/img/hexo/bg/2.png","hash":"bffc8e0466b443ad3546a0f6b0147793c340adde","modified":1658465858654},{"_id":"source/img/hexo/bg/6.png","hash":"0fdc7c514f515e8ff56efec209e947390d18b3ab","modified":1658465857055},{"_id":"source/img/hexo/bg/4.png","hash":"72caf8e68bfbecf8bd4a597d37224e840c43d1f7","modified":1658465855732},{"_id":"source/img/hexo/bg/5.png","hash":"a1b02f5dbb340ee30c82818992bc954b7bd1979c","modified":1658465858215},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1658376784524},{"_id":"source/img/bg/head.png","hash":"bac6ee10b7fbc8473e723f80c5321377c220709c","modified":1658405471224},{"_id":"source/img/bg/dl.png","hash":"02aa902e96f654134f17282d27150c9b6ce861c2","modified":1658405471157},{"_id":"source/img/bg/iron.png","hash":"64f926f6078b44252553811a32e6d1cdabc8c828","modified":1658405471569},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1658376784490},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1658376784492},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1658376784490},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1658376784490},{"_id":"themes/fluid/README_en.md","hash":"10ff41f4b3cf24ad0fece6555b77f61694916133","modified":1658376784493},{"_id":"themes/fluid/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1658376784493},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1658376784493},{"_id":"themes/fluid/package.json","hash":"1c05cec69cd3cf349b268f027a6916a9187601e0","modified":1658376784507},{"_id":"themes/fluid/_config.yml","hash":"3e309acfd433067266c4f6c6e9e4726eb814d6c3","modified":1658376784494},{"_id":"themes/fluid/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1658376784494},{"_id":"themes/fluid/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1658376784494},{"_id":"themes/fluid/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1658376784495},{"_id":"themes/fluid/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1658376784495},{"_id":"themes/fluid/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1658376784494},{"_id":"themes/fluid/layout/404.ejs","hash":"0a589faccde6c2c9572e8d3d359e7c8fb166335e","modified":1658376784496},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1658376784495},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1658376784495},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1658376784505},{"_id":"themes/fluid/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1658376784505},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1658376784506},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1658376784506},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1658376784495},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1658376784507},{"_id":"themes/fluid/layout/index.ejs","hash":"33ee985aaf03c8839d8f48e38113e851705cb2db","modified":1658376784506},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1658376784506},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1658376784506},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1658376784507},{"_id":"themes/fluid/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1658376784507},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1658376784492},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1658376784507},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1658376784491},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1658376784496},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"beb3474d6f65c1e56700ba872c6a0d0836d4168e","modified":1658376784491},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1658376784492},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1658376784491},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"78ce211415d502c5a4398d786d5c697d34d868b9","modified":1658376784491},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1658376784491},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1658376784496},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"bfea4674af78eb72b3a6baaa7ec9fc3c3db55ebd","modified":1658376784497},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"bd763ffc145a1f0b2c4a5dc8a101f0bc94b3f2f7","modified":1658376784496},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1658376784499},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1658376784500},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1658376784501},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1658376784499},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"3ca4c60a38b6b895986b15128a668266b1b12009","modified":1658376784500},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1658376784501},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1658376784505},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1658376784505},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1658376784526},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1658376784526},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1658376784526},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1658376784525},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1658376784527},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1658376784528},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1658376784508},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1658376784510},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1658376784529},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1658376784510},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1658376784510},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1658376784529},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1658376784530},{"_id":"themes/fluid/source/js/boot.js","hash":"3f92a93cb12e01f5ce54bc941fa6626b3ee2571a","modified":1658376784529},{"_id":"themes/fluid/source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1658376784530},{"_id":"themes/fluid/source/js/events.js","hash":"7d70feed0a19e3d9f5886416ae99a72e21e2f10c","modified":1658376784530},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1658376784530},{"_id":"themes/fluid/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1658376784530},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1658376784510},{"_id":"themes/fluid/source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1658376784531},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1658376784511},{"_id":"themes/fluid/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1658376784531},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1658376784511},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1658376784511},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1658376784531},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1658376784511},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1658376784511},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1658376784512},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1658376784512},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1658376784512},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"a93b87835bfa491fa2aa90f97f25281e3a4ffed9","modified":1658376784512},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1658376784512},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1658376784515},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1658376784514},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1658376784513},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1658376784515},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1658376784513},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1658376784515},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1658376784513},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1658376784514},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1658376784513},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1658376784514},{"_id":"themes/fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1658376784514},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1658376784497},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1658376784497},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1658376784497},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1658376784498},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1658376784498},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1658376784497},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1658376784498},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1658376784498},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1658376784499},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1658376784499},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1658376784499},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1658376784501},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"1560b1ca7f1f40fe1e18047ab68a3576f6613619","modified":1658376784501},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1658376784500},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1658376784500},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1658376784502},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1658376784502},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1658376784502},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1658376784501},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"76a224723775388d3fbb0433b32dfb5dcbc75a4c","modified":1658376784502},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1658376784503},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"3b31e068f394c3f63a98843711e64ac4af463fef","modified":1658376784502},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"fedcfb5de65c0828f6925d60a758e0c79a45396f","modified":1658376784503},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"887292388acb8e90c1a7a415a82d128d881f8c9d","modified":1658376784502},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"eac44cfb6b0843304b2da35b32b0fa24afd9d7f9","modified":1658376784503},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1658376784503},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1658376784504},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1658376784504},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1658376784516},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"77cda31b5434b75ff7ac600f60a97918bc389616","modified":1658376784503},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1658376784504},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1658376784504},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1658376784525},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1658376784508},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1658376784508},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1658376784516},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1658376784508},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1658376784509},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1658376784509},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1658376784509},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1658376784517},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1658376784509},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"ac544baecc05df96c6558d42b57af219e1d59e52","modified":1658376784505},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1658376784525},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1658376784517},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1658376784521},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1658376784521},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1658376784521},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1658376784521},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"7f95c49025a347605c726b0874fe074d888e1cc2","modified":1658376784522},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1658376784522},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1658376784523},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1658376784522},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1658376784522},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4bd2449fb8a3620229f0862a3b499faf1eedf2fd","modified":1658376784523},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1658376784523},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1658376784524},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1658376784517},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1658376784525},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1658376784524},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1658376784524},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1658376784518},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1658376784518},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1658376784518},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1658376784519},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1658376784519},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1658376784518},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1658376784518},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"30f50446609d49c896e92a89225591b606adc863","modified":1658376784519},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1658376784520},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1658376784520},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1658376784519},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1658376784520},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1658376784520},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1658376784520},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1658376784521},{"_id":"source/img/algorithm/bg/12.png","hash":"ddec267cc33f50cf31756de2c069e4dda73305f5","modified":1658466134641},{"_id":"source/img/algorithm/bg/17.png","hash":"cdf918cb4398bd07e37f789c0391ebb7923827b1","modified":1658466134786},{"_id":"source/img/algorithm/bg/11.png","hash":"d426906020695f0a291709f05b81ee79596bdad9","modified":1658466134612},{"_id":"source/img/algorithm/bg/14.png","hash":"37e30fa02d82be5a9ae1a0a2782493054b2ae612","modified":1658466134698},{"_id":"source/img/algorithm/bg/2.png","hash":"b3223e41c1d8d18e79c2f20fcb3f33c9f9a9391d","modified":1658466134330},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1658376784528},{"_id":"source/img/algorithm/bg/1.png","hash":"69482ad1de18d6f8ce3f40418915e28ecf460ede","modified":1667707591002},{"_id":"source/img/algorithm/bg/3.png","hash":"5c3c6f2e4eecbf1b519416048e644208c6cd6df2","modified":1658466134359},{"_id":"source/img/algorithm/bg/4.png","hash":"9a7cec1398dafa219eabab1caa7209916ceade7a","modified":1658466134386},{"_id":"source/img/algorithm/bg/8.png","hash":"cd6e12c3a0b6a71b79f36f98fc5ccb7916a44e57","modified":1658466134521},{"_id":"source/img/algorithm/bg/13.png","hash":"e37a1c906daa9998cb886abacfadca0dda9b91b0","modified":1658466134672},{"_id":"source/img/algorithm/bg/10.png","hash":"f455aef9ce87b0eb7d71ab1b4485762eeb284718","modified":1658466134589},{"_id":"source/img/algorithm/bg/15.png","hash":"6ef18aa322d95c82d73a4aeb9e7d7765dbfba770","modified":1658466134729},{"_id":"source/img/algorithm/bg/16.png","hash":"c434756c9c98d8015d7b4c943d93773cda027476","modified":1658466134761},{"_id":"source/img/algorithm/bg/18.png","hash":"4835e9200340e0b974dc61d8078d8a556c0229ad","modified":1658466134818},{"_id":"source/img/algorithm/bg/5.png","hash":"0b937f3da285a59e572befa30cfc091f6226ac39","modified":1658466134420},{"_id":"source/img/algorithm/bg/7.png","hash":"4ef591779781d1f2c21aaba84c8c2f1c691e5eed","modified":1658466134493},{"_id":"source/img/algorithm/bg/9.png","hash":"98c717c4d66650c3930e1145bff80014ffa4b456","modified":1658466134558},{"_id":"source/img/algorithm/bg/6.png","hash":"e4fed7bd11665cbc6c91a4a24affab61ffb8e743","modified":1658466134458},{"_id":"public/js/duration.js","hash":"1fde1bb7c97269d384f9574fd198c338de08a1d0","modified":1666408753678},{"_id":"public/local-search.xml","hash":"7f6e8d49991e1fb5dc061bc66d5f6ef1545d0c42","modified":1671374421063},{"_id":"public/categories/index.html","hash":"23ee2ccb3873eeff4100316c939bb4fa376816a5","modified":1671093398031},{"_id":"public/2022/07/21/hexo2/index.html","hash":"5a69af52ac5a7cfdb12d37a8920cb75352c63799","modified":1671094813533},{"_id":"public/categories/algorithm/index.html","hash":"8a8775541ff60bd324d3d2ed64c7646f5a61cab1","modified":1670423674927},{"_id":"public/categories/hexo/index.html","hash":"11bcb0650f5ffa0ea9c83f665f99b749af8637df","modified":1666408753678},{"_id":"public/archives/index.html","hash":"02b97946f515f66059ccfd6961859ad05949094d","modified":1671094813533},{"_id":"public/archives/2022/index.html","hash":"329f7f617e394e5e629f169bd21d9c5f273da88f","modified":1671093398031},{"_id":"public/archives/2022/07/index.html","hash":"ffa54720547400acc1101f5269d06af4387354a1","modified":1671092984956},{"_id":"public/index.html","hash":"174bcdaa83d83340c25e65a1ca4eeff079ef06b6","modified":1671094813533},{"_id":"public/404.html","hash":"7cc9bdc5359b6f42736ab3aaa98832fc6ce02abc","modified":1666408753678},{"_id":"public/tags/index.html","hash":"83208dad5816a0c31768d60b71017e7a4544c557","modified":1666408753678},{"_id":"public/links/index.html","hash":"2520bf5f98d0dfbe123b24bf5fb5df2a5a739063","modified":1666408753678},{"_id":"public/2022/07/22/algorithm1/index.html","hash":"4fceb66514dd0de844f32e53abc30fb7a52a900c","modified":1666410527291},{"_id":"public/2022/07/21/hexo1/index.html","hash":"a87287da8bcb03cf1c1b4c71d4fed97a092856a3","modified":1671093398031},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1666408753678},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1666408753678},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1666408753678},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1666408753678},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1666408753678},{"_id":"public/img/hexo/bg/1.png","hash":"674401b1559acae2d2ea0b50c52704e5ff980a70","modified":1666408753678},{"_id":"public/img/hexo/bg/3.png","hash":"7ccb7e9c44ff21bdda1cb62b8e437efa6894df2d","modified":1666408753678},{"_id":"public/img/hexo/bg/2.png","hash":"bffc8e0466b443ad3546a0f6b0147793c340adde","modified":1666408753678},{"_id":"public/img/hexo/bg/4.png","hash":"72caf8e68bfbecf8bd4a597d37224e840c43d1f7","modified":1666408753678},{"_id":"public/img/hexo/bg/6.png","hash":"0fdc7c514f515e8ff56efec209e947390d18b3ab","modified":1666408753678},{"_id":"public/img/hexo/bg/5.png","hash":"a1b02f5dbb340ee30c82818992bc954b7bd1979c","modified":1666408753678},{"_id":"public/img/bg/dl.png","hash":"02aa902e96f654134f17282d27150c9b6ce861c2","modified":1666408753678},{"_id":"public/img/bg/head.png","hash":"bac6ee10b7fbc8473e723f80c5321377c220709c","modified":1666408753678},{"_id":"public/img/bg/iron.png","hash":"64f926f6078b44252553811a32e6d1cdabc8c828","modified":1666408753678},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1666408753678},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1666408753678},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1666408753678},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1666408753678},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1666408753678},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1666408753678},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1666408753678},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1666408753678},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1666408753678},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1666408753678},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1666408753678},{"_id":"public/css/main.css","hash":"94f9e394de6d759eaeb0d9eaba2588057e3e935d","modified":1666408753678},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1666408753678},{"_id":"public/img/algorithm/bg/12.png","hash":"ddec267cc33f50cf31756de2c069e4dda73305f5","modified":1666408753678},{"_id":"public/img/algorithm/bg/17.png","hash":"cdf918cb4398bd07e37f789c0391ebb7923827b1","modified":1666408753678},{"_id":"public/img/algorithm/bg/11.png","hash":"d426906020695f0a291709f05b81ee79596bdad9","modified":1666408753678},{"_id":"public/img/algorithm/bg/14.png","hash":"37e30fa02d82be5a9ae1a0a2782493054b2ae612","modified":1666408753678},{"_id":"public/img/algorithm/bg/2.png","hash":"b3223e41c1d8d18e79c2f20fcb3f33c9f9a9391d","modified":1666408753678},{"_id":"public/img/algorithm/bg/1.png","hash":"69482ad1de18d6f8ce3f40418915e28ecf460ede","modified":1667707650581},{"_id":"public/img/algorithm/bg/3.png","hash":"5c3c6f2e4eecbf1b519416048e644208c6cd6df2","modified":1666408753678},{"_id":"public/img/algorithm/bg/4.png","hash":"9a7cec1398dafa219eabab1caa7209916ceade7a","modified":1666408753678},{"_id":"public/img/algorithm/bg/8.png","hash":"cd6e12c3a0b6a71b79f36f98fc5ccb7916a44e57","modified":1666408753678},{"_id":"public/img/algorithm/bg/10.png","hash":"f455aef9ce87b0eb7d71ab1b4485762eeb284718","modified":1666408753678},{"_id":"public/img/algorithm/bg/13.png","hash":"e37a1c906daa9998cb886abacfadca0dda9b91b0","modified":1666408753678},{"_id":"public/img/algorithm/bg/15.png","hash":"6ef18aa322d95c82d73a4aeb9e7d7765dbfba770","modified":1666408753678},{"_id":"public/img/algorithm/bg/16.png","hash":"c434756c9c98d8015d7b4c943d93773cda027476","modified":1666408753678},{"_id":"public/img/algorithm/bg/18.png","hash":"4835e9200340e0b974dc61d8078d8a556c0229ad","modified":1666408753678},{"_id":"public/img/algorithm/bg/5.png","hash":"0b937f3da285a59e572befa30cfc091f6226ac39","modified":1666408753678},{"_id":"public/img/algorithm/bg/7.png","hash":"4ef591779781d1f2c21aaba84c8c2f1c691e5eed","modified":1666408753678},{"_id":"public/img/algorithm/bg/9.png","hash":"98c717c4d66650c3930e1145bff80014ffa4b456","modified":1666408753678},{"_id":"public/img/algorithm/bg/6.png","hash":"e4fed7bd11665cbc6c91a4a24affab61ffb8e743","modified":1666408753678},{"_id":"public/archives/2022/10/index.html","hash":"d9532768419820545473aceba17abc01b83f9c7d","modified":1670044907711},{"_id":"public/2022/10/22/algorithm1/index.html","hash":"6219091ea76ba921c1436424a47247e168eec892","modified":1668332223039},{"_id":"source/_posts/algorithm2.md","hash":"4b21b04dc55b4410f557545d6c717682587d49a0","modified":1668946553689},{"_id":"public/2022/10/28/algorithm2/index.html","hash":"da5f562d989b9d583153617201c4a86f98c2299e","modified":1670044907711},{"_id":"source/img/algorithm/bg/19.png","hash":"17046695278ef154e0fa7e783992673ed34d8383","modified":1658466134304},{"_id":"public/img/algorithm/bg/19.png","hash":"17046695278ef154e0fa7e783992673ed34d8383","modified":1667707650581},{"_id":"source/_posts/teach1.md","hash":"03dba818efc657991bb3044cbfbf1af5a2dd2dc2","modified":1668947035500},{"_id":"public/2022/11/19/teach1/index.html","hash":"d926d030367747986e0846dc6bb8edd5dd5f9359","modified":1669179245268},{"_id":"public/archives/2022/11/index.html","hash":"24d08f1605d70ef44e9da075838c5451a7ac74c2","modified":1671093398031},{"_id":"public/categories/teach/index.html","hash":"f9b1734b644ee504999832a4f8989e5ce4c85aeb","modified":1670044907711},{"_id":"source/_posts/teach2.md","hash":"400fc9e5b39676a04f49468a9fc18c6fa03b7d3f","modified":1669179237753},{"_id":"source/img/hexo/1.png","hash":"674401b1559acae2d2ea0b50c52704e5ff980a70","modified":1646701272483},{"_id":"source/img/hexo/4.png","hash":"72caf8e68bfbecf8bd4a597d37224e840c43d1f7","modified":1658465855732},{"_id":"source/img/hexo/2.png","hash":"bffc8e0466b443ad3546a0f6b0147793c340adde","modified":1658465858654},{"_id":"source/img/teach/2.png","hash":"a56bad057bfcff6acc9c7950fffcb82e43472411","modified":1668946064028},{"_id":"source/img/hexo/3.png","hash":"7ccb7e9c44ff21bdda1cb62b8e437efa6894df2d","modified":1658465856588},{"_id":"source/img/hexo/5.png","hash":"a1b02f5dbb340ee30c82818992bc954b7bd1979c","modified":1658465858215},{"_id":"source/img/hexo/6.png","hash":"0fdc7c514f515e8ff56efec209e947390d18b3ab","modified":1658465857055},{"_id":"source/img/teach/1.png","hash":"97ec6dd3873f14f628cf84adaeadbadcf618bfca","modified":1668946705534},{"_id":"source/img/algorithm/12.png","hash":"ddec267cc33f50cf31756de2c069e4dda73305f5","modified":1658466134641},{"_id":"source/img/algorithm/17.png","hash":"cdf918cb4398bd07e37f789c0391ebb7923827b1","modified":1658466134786},{"_id":"source/img/algorithm/11.png","hash":"d426906020695f0a291709f05b81ee79596bdad9","modified":1658466134612},{"_id":"source/img/algorithm/14.png","hash":"37e30fa02d82be5a9ae1a0a2782493054b2ae612","modified":1658466134698},{"_id":"source/img/algorithm/2.png","hash":"b3223e41c1d8d18e79c2f20fcb3f33c9f9a9391d","modified":1658466134330},{"_id":"source/img/algorithm/4.png","hash":"9a7cec1398dafa219eabab1caa7209916ceade7a","modified":1658466134386},{"_id":"source/img/algorithm/3.png","hash":"5c3c6f2e4eecbf1b519416048e644208c6cd6df2","modified":1658466134359},{"_id":"source/img/algorithm/19.png","hash":"17046695278ef154e0fa7e783992673ed34d8383","modified":1658466134304},{"_id":"source/img/algorithm/8.png","hash":"cd6e12c3a0b6a71b79f36f98fc5ccb7916a44e57","modified":1658466134521},{"_id":"source/img/algorithm/10.png","hash":"f455aef9ce87b0eb7d71ab1b4485762eeb284718","modified":1658466134589},{"_id":"source/img/algorithm/13.png","hash":"e37a1c906daa9998cb886abacfadca0dda9b91b0","modified":1658466134672},{"_id":"source/img/algorithm/15.png","hash":"6ef18aa322d95c82d73a4aeb9e7d7765dbfba770","modified":1658466134729},{"_id":"source/img/algorithm/16.png","hash":"c434756c9c98d8015d7b4c943d93773cda027476","modified":1658466134761},{"_id":"source/img/algorithm/18.png","hash":"4835e9200340e0b974dc61d8078d8a556c0229ad","modified":1658466134818},{"_id":"source/img/algorithm/5.png","hash":"0b937f3da285a59e572befa30cfc091f6226ac39","modified":1658466134420},{"_id":"source/img/algorithm/7.png","hash":"4ef591779781d1f2c21aaba84c8c2f1c691e5eed","modified":1658466134493},{"_id":"source/img/algorithm/9.png","hash":"98c717c4d66650c3930e1145bff80014ffa4b456","modified":1658466134558},{"_id":"source/img/algorithm/6.png","hash":"e4fed7bd11665cbc6c91a4a24affab61ffb8e743","modified":1658466134458},{"_id":"source/img/algorithm/icpc_logo.png","hash":"c63d062a0cea3ccd86bffce335e79ae11602b421","modified":1666603747353},{"_id":"public/2022/11/20/teach2/index.html","hash":"f8c7a04c8066e7af1429ed024ca3524a3ba8f13a","modified":1669179245268},{"_id":"public/archives/2024/index.html","hash":"13dbcd933e419499f0006fc7c70c668bf5922978","modified":1671092984956},{"_id":"public/archives/2024/05/index.html","hash":"298e0bdf4d72779efd23ab60868dbc3f812002de","modified":1671092984956},{"_id":"public/2024/05/13/algorithm1/index.html","hash":"980037bcc4c50d65989efbd6d75eadb7e38439fd","modified":1670044907711},{"_id":"public/img/hexo/1.png","hash":"674401b1559acae2d2ea0b50c52704e5ff980a70","modified":1668946881407},{"_id":"public/img/hexo/2.png","hash":"bffc8e0466b443ad3546a0f6b0147793c340adde","modified":1668946881407},{"_id":"public/img/hexo/4.png","hash":"72caf8e68bfbecf8bd4a597d37224e840c43d1f7","modified":1668946881407},{"_id":"public/img/hexo/3.png","hash":"7ccb7e9c44ff21bdda1cb62b8e437efa6894df2d","modified":1668946881407},{"_id":"public/img/teach/2.png","hash":"a56bad057bfcff6acc9c7950fffcb82e43472411","modified":1668946881407},{"_id":"public/img/hexo/5.png","hash":"a1b02f5dbb340ee30c82818992bc954b7bd1979c","modified":1668946881407},{"_id":"public/img/hexo/6.png","hash":"0fdc7c514f515e8ff56efec209e947390d18b3ab","modified":1668946881407},{"_id":"public/img/teach/1.png","hash":"97ec6dd3873f14f628cf84adaeadbadcf618bfca","modified":1668946881407},{"_id":"public/img/algorithm/12.png","hash":"ddec267cc33f50cf31756de2c069e4dda73305f5","modified":1668946881407},{"_id":"public/img/algorithm/17.png","hash":"cdf918cb4398bd07e37f789c0391ebb7923827b1","modified":1668946881407},{"_id":"public/img/algorithm/11.png","hash":"d426906020695f0a291709f05b81ee79596bdad9","modified":1668946881407},{"_id":"public/img/algorithm/14.png","hash":"37e30fa02d82be5a9ae1a0a2782493054b2ae612","modified":1668946881407},{"_id":"public/img/algorithm/2.png","hash":"b3223e41c1d8d18e79c2f20fcb3f33c9f9a9391d","modified":1668946881407},{"_id":"public/img/algorithm/19.png","hash":"17046695278ef154e0fa7e783992673ed34d8383","modified":1668946881407},{"_id":"public/img/algorithm/3.png","hash":"5c3c6f2e4eecbf1b519416048e644208c6cd6df2","modified":1668946881407},{"_id":"public/img/algorithm/4.png","hash":"9a7cec1398dafa219eabab1caa7209916ceade7a","modified":1668946881407},{"_id":"public/img/algorithm/8.png","hash":"cd6e12c3a0b6a71b79f36f98fc5ccb7916a44e57","modified":1668946881407},{"_id":"public/img/algorithm/10.png","hash":"f455aef9ce87b0eb7d71ab1b4485762eeb284718","modified":1668946881407},{"_id":"public/img/algorithm/13.png","hash":"e37a1c906daa9998cb886abacfadca0dda9b91b0","modified":1668946881407},{"_id":"public/img/algorithm/15.png","hash":"6ef18aa322d95c82d73a4aeb9e7d7765dbfba770","modified":1668946881407},{"_id":"public/img/algorithm/16.png","hash":"c434756c9c98d8015d7b4c943d93773cda027476","modified":1668946881407},{"_id":"public/img/algorithm/18.png","hash":"4835e9200340e0b974dc61d8078d8a556c0229ad","modified":1668946881407},{"_id":"public/img/algorithm/5.png","hash":"0b937f3da285a59e572befa30cfc091f6226ac39","modified":1668946881407},{"_id":"public/img/algorithm/7.png","hash":"4ef591779781d1f2c21aaba84c8c2f1c691e5eed","modified":1668946881407},{"_id":"public/img/algorithm/9.png","hash":"98c717c4d66650c3930e1145bff80014ffa4b456","modified":1668946881407},{"_id":"public/img/algorithm/6.png","hash":"e4fed7bd11665cbc6c91a4a24affab61ffb8e743","modified":1668946881407},{"_id":"public/img/algorithm/icpc_logo.png","hash":"c63d062a0cea3ccd86bffce335e79ae11602b421","modified":1668946881407},{"_id":"source/_posts/teach3.md","hash":"66f0fc3862868492934bf23f346bbe36e6d93a72","modified":1671373209013},{"_id":"source/img/teach/3.png","hash":"f61f4a76afde051a9dd9dbf50516c2226f91f698","modified":1669095193521},{"_id":"public/2022/11/22/teach3/index.html","hash":"40246b3c33433b97c2bc76c7d5ba95e9aa69fe83","modified":1671374421063},{"_id":"public/img/teach/3.png","hash":"f61f4a76afde051a9dd9dbf50516c2226f91f698","modified":1669095211704},{"_id":"source/_posts/me.md","hash":"3d4e28f50f4110e01892dcf79c0faf4622c09a2b","modified":1671100819670},{"_id":"public/categories/me/index.html","hash":"993cd6438701f59698e6f934e2d71c9046d6467f","modified":1671092984956},{"_id":"public/2022/11/22/me/index.html","hash":"fa0d6478a1c01c0d3f002a9bb8fd16d8e6df0adb","modified":1671092984956},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1671092984956},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1671092984956},{"_id":"public/2020/03/13/me/index.html","hash":"b36126902e761c8a3709223edbd9049206dd0a88","modified":1671093398031},{"_id":"public/archives/2020/index.html","hash":"065cf409d49e31d0098309942beb3d7fa829473f","modified":1671093398031},{"_id":"public/archives/2020/03/index.html","hash":"724ec42a239c2a52d3988a3f408f34ac9d65d521","modified":1671093398031},{"_id":"public/2002/05/13/me/index.html","hash":"74177166af33271cdc36e9b080787ce120be56af","modified":1671100838422},{"_id":"public/archives/2002/05/index.html","hash":"9e052f7e7a1e12b5acaa6a1272ee33c4357f5610","modified":1671094813533},{"_id":"public/archives/2002/index.html","hash":"5d28f9bda94104c01314daa2e1222d9e8543a91d","modified":1671094813533},{"_id":"source/ff/（排名）初赛B组成绩榜单（拟）.xlsx","hash":"1357343955c022365fdfc11eb45fb55129028d4f","modified":1671090574252},{"_id":"source/ff/（排名）十三届蓝桥杯重庆赛区获奖名单.pdf","hash":"eb8ab77eb82a9c10be036dfb48682c953ee9963c","modified":1651470171000},{"_id":"public/ff/（排名）初赛B组成绩榜单（拟）.xlsx","hash":"1357343955c022365fdfc11eb45fb55129028d4f","modified":1671094813533},{"_id":"public/ff/（排名）十三届蓝桥杯重庆赛区获奖名单.pdf","hash":"eb8ab77eb82a9c10be036dfb48682c953ee9963c","modified":1671094813533},{"_id":"source/ff/（省1）蓝桥杯22.jpg","hash":"1e746c41136de797ae8ffd8a1905f6331b59123d","modified":1655041266000},{"_id":"public/ff/（省1）蓝桥杯22.jpg","hash":"1e746c41136de797ae8ffd8a1905f6331b59123d","modified":1671095850650},{"_id":"source/ff/ttt.jpg","hash":"e232a620a59c48d69a42bb4b53abf562be59ecc0","modified":1671096525674},{"_id":"public/ff/ttt.jpg","hash":"e232a620a59c48d69a42bb4b53abf562be59ecc0","modified":1671096592876},{"_id":"source/ff/（排名）附件3：第八届中国国际“互联网+”大学生创新创业大赛重庆赛区选拔赛职教赛道获奖项目名单.pdf","hash":"46e3ea9458beab983a8b1f2d4d840d13c6db2b74","modified":1660726654000},{"_id":"source/ff/（证）码题集.jpg","hash":"5683ba129ae25b404941c04b9a5a3ddc7d505451","modified":1665405423000},{"_id":"public/ff/（排名）附件3：第八届中国国际“互联网+”大学生创新创业大赛重庆赛区选拔赛职教赛道获奖项目名单.pdf","hash":"46e3ea9458beab983a8b1f2d4d840d13c6db2b74","modified":1671097855991},{"_id":"public/ff/（证）码题集.jpg","hash":"5683ba129ae25b404941c04b9a5a3ddc7d505451","modified":1671097855991},{"_id":"source/ff/（省1）互联网+.jpg","hash":"5007fd945dbe7bd56653f3a53fed4753372830ea","modified":1665041755000},{"_id":"public/ff/（省1）互联网+.jpg","hash":"5007fd945dbe7bd56653f3a53fed4753372830ea","modified":1671098014332},{"_id":"source/ff/（省3）挑战杯.jpg","hash":"d0bafc42c4ba978f5875684f82d039ff78818c15","modified":1663144640000},{"_id":"source/ff/（排名）22互联网+.pdf","hash":"46e3ea9458beab983a8b1f2d4d840d13c6db2b74","modified":1660726654000},{"_id":"source/ff/（排名）22挑战杯.pdf","hash":"8b2e50732d1d87bab074f51f185a07f74f6a109c","modified":1660726677000},{"_id":"public/ff/（省3）挑战杯.jpg","hash":"d0bafc42c4ba978f5875684f82d039ff78818c15","modified":1671098331001},{"_id":"public/ff/（排名）22互联网+.pdf","hash":"46e3ea9458beab983a8b1f2d4d840d13c6db2b74","modified":1671098331001},{"_id":"public/ff/（排名）22挑战杯.pdf","hash":"8b2e50732d1d87bab074f51f185a07f74f6a109c","modified":1671098331001},{"_id":"source/ff/（排名）心理 21.5.png","hash":"488376f650cfed6c6fc0f779732b8f4673543bd4","modified":1641128712000},{"_id":"source/ff/（证）普通话二乙.png","hash":"32f1940047d211a5ed2640a0e123bdc9cd2b824d","modified":1641128606000},{"_id":"source/ff/（综合）400.jpg","hash":"0901f7503bed1cd7c6f756edeb0a3247da1235ec","modified":1665454834000},{"_id":"source/ff/（单项）3000.jpg","hash":"5db3d029d8a64d66d991d68181a0cc10240d4216","modified":1665454821000},{"_id":"source/ff/（单项）150.jpg","hash":"afc2f44a383e7a2f26638baf47e0421f8919ff4b","modified":1665454828000},{"_id":"source/ff/（证）计算机二级.png","hash":"e852d3a8ba446004efda66cca2dd88d122cb4bb3","modified":1641128485000},{"_id":"source/ff/（省2）工业大数据算法.jpg","hash":"4445b230805a99383546dfffece43e155f092894","modified":1655041254000},{"_id":"source/ff/（排名）数据标注& 21.9.jpg","hash":"80537cbe88495df1c9ddfdb02758949648701dea","modified":1641128750000},{"_id":"source/ff/（排名）工业大数据 21.10.jpg","hash":"e9551a18540e55a92d6079950d7715f28521e61a","modified":1641128721000},{"_id":"source/ff/（证）英语B级.jpg","hash":"ec720ad5d87896fee18c1513616db9ce4e89c345","modified":1650344713000},{"_id":"source/ff/（省2）心理.jpg","hash":"67a9f32a414c9a0f09ce31e3b0f5bbf42650f575","modified":1655041259000},{"_id":"source/ff/（国优）蓝桥杯22.jpg","hash":"c57d1051396b72d57cc11a7628a57cbc6c907c94","modified":1657074889000},{"_id":"public/ff/（排名）心理 21.5.png","hash":"488376f650cfed6c6fc0f779732b8f4673543bd4","modified":1671100079965},{"_id":"public/ff/（证）普通话二乙.png","hash":"32f1940047d211a5ed2640a0e123bdc9cd2b824d","modified":1671100079965},{"_id":"public/ff/（综合）400.jpg","hash":"0901f7503bed1cd7c6f756edeb0a3247da1235ec","modified":1671100079965},{"_id":"public/ff/（单项）3000.jpg","hash":"5db3d029d8a64d66d991d68181a0cc10240d4216","modified":1671100079965},{"_id":"public/ff/（单项）150.jpg","hash":"afc2f44a383e7a2f26638baf47e0421f8919ff4b","modified":1671100079965},{"_id":"public/ff/（证）计算机二级.png","hash":"e852d3a8ba446004efda66cca2dd88d122cb4bb3","modified":1671100079965},{"_id":"public/ff/（省2）工业大数据算法.jpg","hash":"4445b230805a99383546dfffece43e155f092894","modified":1671100079965},{"_id":"public/ff/（排名）数据标注& 21.9.jpg","hash":"80537cbe88495df1c9ddfdb02758949648701dea","modified":1671100079965},{"_id":"public/ff/（排名）工业大数据 21.10.jpg","hash":"e9551a18540e55a92d6079950d7715f28521e61a","modified":1671100079965},{"_id":"public/ff/（证）英语B级.jpg","hash":"ec720ad5d87896fee18c1513616db9ce4e89c345","modified":1671100079965},{"_id":"public/ff/（省2）心理.jpg","hash":"67a9f32a414c9a0f09ce31e3b0f5bbf42650f575","modified":1671100079965},{"_id":"public/ff/（国优）蓝桥杯22.jpg","hash":"c57d1051396b72d57cc11a7628a57cbc6c907c94","modified":1671100079965},{"_id":"source/ff/（排名）心理.png","hash":"488376f650cfed6c6fc0f779732b8f4673543bd4","modified":1641128712000},{"_id":"source/ff/（排名）工业大数据.jpg","hash":"e9551a18540e55a92d6079950d7715f28521e61a","modified":1641128721000},{"_id":"public/ff/（排名）心理.png","hash":"488376f650cfed6c6fc0f779732b8f4673543bd4","modified":1671100251731},{"_id":"public/ff/（排名）工业大数据.jpg","hash":"e9551a18540e55a92d6079950d7715f28521e61a","modified":1671100251731}],"Category":[{"name":"algorithm","_id":"cl9jcqvzt0004qoh3b5jg837b"},{"name":"hexo","_id":"cl9jcqvzv0006qoh3c5op5k8h"},{"name":"teach","_id":"clanjlipp0001gsh34cpq3bt7"},{"name":"me","_id":"clbot8ivk0001f4h342rv94td"}],"Data":[],"Page":[{"title":"categories","date":"2022-07-21T05:57:19.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-07-21 13:57:19\ntype: \"categories\"\n---\n","updated":"2022-07-21T11:56:03.020Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl9jcqvzk0000qoh3c9rofem0","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"_content":"!(function() {\n  /** 计时起始时间，自行修改 **/\n  var start = new Date(\"2022/07/21 00:00:00\");\n\n  function update() {\n    var now = new Date();\n    now.setTime(now.getTime()+250);\n    days = (now - start) / 1000 / 60 / 60 / 24;\n    dnum = Math.floor(days);\n    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n    hnum = Math.floor(hours);\n    if(String(hnum).length === 1 ){\n      hnum = \"0\" + hnum;\n    }\n    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes);\n    if(String(mnum).length === 1 ){\n      mnum = \"0\" + mnum;\n    }\n    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds);\n    if(String(snum).length === 1 ){\n      snum = \"0\" + snum;\n    }\n    document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n    document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n  }\n\n  update();\n  setInterval(update, 1000);\n})();","source":"js/duration.js","raw":"!(function() {\n  /** 计时起始时间，自行修改 **/\n  var start = new Date(\"2022/07/21 00:00:00\");\n\n  function update() {\n    var now = new Date();\n    now.setTime(now.getTime()+250);\n    days = (now - start) / 1000 / 60 / 60 / 24;\n    dnum = Math.floor(days);\n    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n    hnum = Math.floor(hours);\n    if(String(hnum).length === 1 ){\n      hnum = \"0\" + hnum;\n    }\n    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes);\n    if(String(mnum).length === 1 ){\n      mnum = \"0\" + mnum;\n    }\n    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds);\n    if(String(snum).length === 1 ){\n      snum = \"0\" + snum;\n    }\n    document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n    document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n  }\n\n  update();\n  setInterval(update, 1000);\n})();","date":"2022-07-21T02:00:56.360Z","updated":"2022-07-21T02:00:56.360Z","path":"js/duration.js","layout":"false","title":"","comments":1,"_id":"cl9jcqvzn0001qoh345jghpe6","content":"!(function() {\n  /** 计时起始时间，自行修改 **/\n  var start = new Date(\"2022/07/21 00:00:00\");\n\n  function update() {\n    var now = new Date();\n    now.setTime(now.getTime()+250);\n    days = (now - start) / 1000 / 60 / 60 / 24;\n    dnum = Math.floor(days);\n    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n    hnum = Math.floor(hours);\n    if(String(hnum).length === 1 ){\n      hnum = \"0\" + hnum;\n    }\n    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes);\n    if(String(mnum).length === 1 ){\n      mnum = \"0\" + mnum;\n    }\n    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds);\n    if(String(snum).length === 1 ){\n      snum = \"0\" + snum;\n    }\n    document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n    document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n  }\n\n  update();\n  setInterval(update, 1000);\n})();","site":{"data":{}},"wordcount":753,"excerpt":"","more":"!(function() {\n  /** 计时起始时间，自行修改 **/\n  var start = new Date(\"2022/07/21 00:00:00\");\n\n  function update() {\n    var now = new Date();\n    now.setTime(now.getTime()+250);\n    days = (now - start) / 1000 / 60 / 60 / 24;\n    dnum = Math.floor(days);\n    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n    hnum = Math.floor(hours);\n    if(String(hnum).length === 1 ){\n      hnum = \"0\" + hnum;\n    }\n    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes);\n    if(String(mnum).length === 1 ){\n      mnum = \"0\" + mnum;\n    }\n    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds);\n    if(String(snum).length === 1 ){\n      snum = \"0\" + snum;\n    }\n    document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n    document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n  }\n\n  update();\n  setInterval(update, 1000);\n})();"}],"Post":[{"title":"算法模板","excerpt":"入门用","index_img":"/img/algorithm/icpc_logo.png","banner_img":"/img/algorithm/icpc_logo.png","date":"2024-05-12T22:45:00.000Z","_content":"\n> 自用模板\n```cpp\n#pragma GCC optimzie(\"Ofast\", \"inline\")\n\n#define ioio ios::sync_with_stdio(0);cin.tie(0),cout.tie(0)\n#define fst first\n#define sed second\n#define pb push_back\n\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <map>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\n\nint dxy[4][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\nconst double PI = acos(-1.0);\nconst int inf = 0x3f3f3f3f;\nconst int MOD = 1e9+7;\nconst int N = 2e5+10;\n// ********************************************************\n\nint n, m;\nint a[N];\n\nvoid solve(){\n    \n    \n    \n    return ;\n}\n\nint main(){\n    ioio;\n    freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout); \n    //int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n\n1. [基础语法](#1)     \n    1.1 [排序*](#1.1)   \n    1.2 [二分](#1.2)   \n    1.3 [双指针](#1.3)   \n    1.4 [高精度](#1.4)   \n    1.5 [进制转换](#1.5)     \n    1.6 [位运算](#1.6)\n\n2. [数据结构](#2)   \n    2.1 [二叉树](#2.1)  \n    2.2 [栈与队列](#2.2)  \n    2.3 [并查集](#2.3)  \n    2.4 [线段树与树状数组*](#2.4)\n\n3. [图论](#3)  \n    3.1 [DFS与BFS](#3.1)   \n    3.2 [最短路](#3.2)  \n    3.3 [最小生成（支撑）树](#3.3)\n\n4. [数学](#4)  \n    4.1 [质（素）数与约数](#4.1)   \n    4.2 [快速幂](#4.2)\n\n5. [动态规划](#5)\n\n6. [字符串](#6)  \n    6.1 [KMP](#6.1)   \n    6.2 [后缀数组](#6.2) \n\n7. [计算几何](#7)\n\n8. [其他](#8)\n\n\n\n\n\n\n\n\n\n\n<h3 id=1>1 基础算法</h3>\n\n<h4 id=1.1>1.1 排序</h4>\n\n> `sort自定义排序`\n> 对于 a b俩元素，如果返回T，则a在b前面，反之b在a前面\n```cpp\nbool cmp(int a, int b){\n    if(a<b) return 1;\n    return 0;\n}\n\nsort(a.begin(), a.end(), cmp);\n```\n> `快速排序`\n> x是每轮的基准值\n```cpp\nvoid Cswap(int *a, int *b){\n    int t=*a;\n    *a=*b;\n    *b=t;\n} // C环境下使用的swap函数\n\nvoid qsort(int *arr, int l, int r){\n    if (l >= r) return;\n    int i=l-1, j=r+1, x=arr[l+r>>1];\n    while (i < j){ // 基准值比较，左右交换\n        do i++; while(arr[i] < x);\n        do j--; while(arr[j] > x);\n        if (i < j) Cswap(&arr[i], &arr[j]);\n    }\n    qsort(arr, l, j), qsort(arr, j + 1, r);\n}\n// a[1]-a[n]排序\nsort(a, 1, n);\n```\n> 归并排序\n```cpp\n\n```\n\n<h4 id=1.2>1.2 二分</h4>\n\n>\n```cpp\n// >=x的第一个元素\nint bsearch_1(int l, int r){\n    while (l < r){\n        int mid = l + r >> 1;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    return l;\n}\n```\n\n```cpp\n// <=x的最后一个元素\nint bsearch_2(int l, int r){\n    while (l < r){\n        int mid = l + r + 1 >> 1;\n        if (check(mid)) l = mid;\n        else r = mid - 1;\n    }\n    return l;\n}\n```\n\n> 为何不用STL？\n```cpp\n// >=x的第一个元素\nauto i=lower_bound(a.begin(), a.end(), x);\n*i;          // 值\ni-a.begin(); // 位置\n// 显然 <x 的最后一个元素是\ni-a.begin()-1;\n```\n\n```cpp\n// >x的第一个元素\nauto i=upper_bound(a.begin(), a.end(), x);\n// 显然 <=x 的最后一个元素是\ni-a.begin()-1;\n```\n<h4 id=1.3>1.3 双指针</h4>\n\n```cpp\n// 左指针 右指针\nint l=1, r=1;\n// 指针不越界，部分情况下考虑左指针优先右指针\nwhile( r<=n && l<=n){\n\t// 右指针右移\n\twhile( r<=n && 条件) r++;\n\t{...} // 更新答案巴拉巴拉\n\t// 左指针右移\n\tl++;\n}\n```\n\n\n<h4 id=1.4>1.4 高精度</h4>\n\n> 高精度加法\n```cpp\nstring ADD(string A, string B) {  // 正序输入 正序输出\n\treverse(A.begin(), A.end()); reverse(B.begin(), B.end());\n\tstring res;\n\tint add = 0;\n\tfor (int i = 0; i < A.size() || i < B.size(); i++) {\n\t\tif (i < A.size()) add += A[i] - '0';\n\t\tif (i < B.size()) add += B[i] - '0';// 取值\n\t\tres.push_back(add % 10 + '0');      // +\n\t\tadd /= 10;                          // 进位\n\t}\n\tif (add) res.push_back(add + '0');\n\treverse(res.begin(), res.end());\n\treturn res;\n}\n```\n\n> 高精度减法\n```cpp\nstring SUB(string& A, string& B) {  // 正序输入 正序输出 自带负号\n\tif (!(A.size() > B.size() || (A.size() == B.size() && A >= B)))\n\t\treturn \"-\" + SUB(B, A);\n\treverse(A.begin(), A.end()); reverse(B.begin(), B.end());\n\tstring res;\n\tfor (int i = 0, t = 0; i < A.size(); i++) {\n\t\tint ai = A[i] - '0', bi = 0;\n\t\tif (i < B.size()) bi = B[i] - '0';\n\t\tt = ai - t;\n\t\tif (i < B.size()) t -= bi;\n\t\tres.push_back((t + 10) % 10 + '0');\n\t\tif (t < 0) t = 1;\n\t\telse t = 0;\n\t}\n\twhile (res.size() > 1 && res.back() == '0') res.pop_back();\n\treverse(res.begin(), res.end());\n\treturn res;\n}\n```\n\n> 高精度乘法\n```cpp\nstring MUL(string A, int b) { // 顺序输入 顺序输出\n\treverse(A.begin(), A.end());\n\tstring res;\n\tint t = 0;\n\tfor (int i = 0; i < A.size() || t; i++) {\n\t\tif (i < A.size()) t += (A[i] - '0') * b;\n\t\tres.push_back(t % 10 + '0');\n\t\tt /= 10;\n\t}\n\t// 去前导0\n\twhile (res.size() > 1 && res.back() == '0') res.pop_back();\n\treverse(res.begin(), res.end());\n\treturn res;\n}\n```\n> 高精度除法\n```cpp\nstring DIV(string A, int b, int& r) {  // 正序输入 正序输出\n\tif (b == 0) return \"ERROR\";         // A / b = res ... r \n\treverse(A.begin(), A.end());\n\tstring res;\n\tr = 0;\n\tfor (int i = A.size() - 1; i >= 0; i--) {\n\t\tint ai = A[i] - '0';\n\t\tr = r * 10 + ai;\n\t\tres.push_back(r / b + '0');\n\t\tr %= b;\n\t}\n\twhile (res.size() > 1 && res.front() == '0') res.erase(res.begin(), res.begin() + 1);\n\treturn res;\n}\n```\n\n<h4 id=1.5>1.5 进制转换</h4>\n\n> x(a) -> x(10)\n```cpp\nstring x_10(string x, int a){\n    string res=\"0\", p=\"1\";  // 将 a 进制下的 x 转换为 10 进制\n    for(int i=x.size()-1; i>=0; i--){\n        int t; // 判断当前位数字是多少\n        if(x[i]>='0' && x[i]<='9') t=x[i]-'0'; \n        if(x[i]>='A' && x[i]<='Z') t=x[i]-'A'+10;\n        if(x[i]>='a' && x[i]<='z') t=x[i]-'a'+10;\n        res=ADD(res, MUL(p, t));//res+=t*p; // t*(a^0, a^1, a^2)\n        p=MUL(p, a);            //p*=a;     //   (a^0, a^1, a^2)\n    }\n    return res;\n}\n```\n\n> x(10) -> x(a)\n```cpp\nstring x_a(string x, int a){\n    if(x==\"0\") return \"0\";\n    string res; // 将 10 进制下的 x 转换为 a 进制\n    while(x!=\"0\"){\n        int r;\n        x=DIV(x, a, r);\n        if( r>=0 && r<=9 ) r+='0';\n        else r+='A'-10;\n        res+=r;\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\n```\n\n<h4 id=1.6>1.6 位运算</h4>\n\n> ` & ` 按位与 `全1为1`\n```c\n0&0=0   1&0=0\n0&1=0   1&1=1\n```\n> ` | ` 按位或 `一1为1`\n```c\n0|0=0   1|0=1\n0|1=1   1|1=1\n```\n> ` ^ ` 按位异或 `不同为1`\n```c\n0^0=0   1^0=1\n0^1=1   1^1=0\n```\n> ` lowbit `  x 的二进制表示中，最低位的 1 的位置\n> ```cpp\n> lowbit(0b10110000) == 0b00010000 == 16\n>          ~~~^~~~~\n> lowbit(0b11100100) == 0b00000100 == 4\n>          ~~~~~^~~ \n> ```\n```cpp\nint lowbit(int x) {\n    return x & -x;\n}\n```\n<h3 id=2>2 数据结构</h3>\n\n\n<h4 id=2.1>2.1 二叉树</h4>\n\n<h4 id=2.2>2.2 栈与队列</h4>\n\n\n<h4 id=2.3>2.3 并查集</h4>\n\n> 基础并查集\n\n```cpp\nint P[N];   // 存放每个数的祖宗\n\nint find(int x){// 找x的祖宗结点\n    if(x!=p[x]) p[x]=find(p[x]);\n    return p[x];\n}\n\nvoid solve(){\n    /* 初始化 */\n    for(int i=1; i<=n; i++) p[i]=i; \n    /* 合并 */\n    x=find(x), y=find(y);   // 找到x和y的祖宗\n    if(x!=y) p[y]=x;        // 将y的祖宗合并到x\n}\n```\n\n\n<h4 id=2.4>2.4 线段树与树状数组</h4>\n\n> 树状数组 二叉索引树 强化版前缀和\n```cpp\nint lowbit(int x){\n    return x&-x;\n}\n\nvoid add(int i, int v){\n    for(; i<=n; i+=lowbit(i))\n        t[i]+=v;    // 该点后面所有后驱都需要+v\n}\n\nint query(int i){   \n    int res=0;      // i的前缀和\n    for(; i>=1; i-=lowbit(i))\n        res+=t[i];  // 累加所有后驱\n    return res;\n}\n\nvoid init(){\n    for(int i=1; i<=n; i++)\n        add(i, a[i]);\n}\n\nvoid init(){  // 这种是一个一个的+\n    for(int i=1; i<=n; i++){\n        t[i]+=a[i];\n        int j=i+lowbit(i);\n        if(j<=n) t[j]+=t[i];\n    }\n}\n```\n\n> 线段树 不一定正确\n\n```cpp\nstruct node {\n    int l, r;   // 左右结点\n    LL sum;    // 区间和\n}tr[4 * N];\n\nvoid pushup(node& u, node& l, node& r) {\n    u.sum = l.sum + r.sum;\n}\n\nvoid build(int u, int l, int r) {\n    tr[u] = { l,r };\n    if (l == r)\n        tr[u].sum = a[r];\n    else {\n        int mid = l + r >> 1;\n        build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);\n        pushup(tr[u], tr[u << 1], tr[u << 1 | 1]);\n    }\n}\n\nvoid modify(int u, int i, int v) {   // 单点修改\n    if (tr[u].l == i && tr[u].r == i)    // 找到叶子结点\n        tr[u] = { i,i,v };              // 修改\n    else {\n        int mid = tr[u].l + tr[u].r >> 1;\n        if (i <= mid) modify(u << 1, i, v);\n        else modify(u << 1 | 1, i, v);  // 不在左边就肯定在右边\n        pushup(tr[u], tr[u << 1], tr[u << 1 | 1]);\n    }\n}\n\nnode query(int u, int l, int r) {\n    if (l <= tr[u].l && tr[u].r <= r)\n        return tr[u];\n    else {\n        int mid = tr[u].l + tr[u].r >> 1;\n        if (mid >= r)                      // tr[l]--------[m]--------tr[r]\n            return query(u << 1, l, r);    //       l----r         \n        else if (mid < l)                  // tr[l]--------[m]--------tr[r]\n            return query(u << 1 | 1, l, r);//                  l----r\n        else {\n            auto left = query(u << 1, l, r);\n            auto right = query(u << 1 | 1, l, r);\n            node res = { l, r };\n            pushup(res, left, right);\n            return res;\n        }\n    }\n}\n```\n\n\n\n\n\n\n\n\n<h3 id=3>3 图论</h3>\n\n<h4 id=3.1>3.1 DFS与BFS</h4>\n\n> DFS  \n> 一个小tips：枚举状态时候，枚举单个点会爆时间，当从行的角度考虑\n```cpp\n// 处理当前点u\nvoid dfs(int u){\n\tif( u满足剪枝条件 )\n\t\treturn ;\t\n\tif( u>N ) {\t    \t// 到达边界\n\t\tif( check() )   // 如果当前情况合法\n\t\t\tdeal();\t\t// 输出或者更新最终答案\t\t\n\t\treturn ;\t\t// 结束\n\t}\n\t\n\tfor(auto i : arr){\t\t\t\t// 显然，当一个点有多个状态，需要全部考虑\n\t\tif( used[i] ) continue ;\t// 如果此状态仅可出现一次，那么该点不考虑此状态\n\t\t\n\t\tchange(u, i);\t\t// 将 u 点状态设置为 i （如果需要，应当同时考虑下 i 的状态）\t\n\t\tdfs( u++ );\t\t\t// 进入下一层。应当注意，这里的下一层是指u进入递归层面的下一层 \n\t\tchange(u, row);\t\t// 恢复现场。通常情况下，u是直接置0\n\t}\n\tdfs( u++ );\t\t\t\t// 部分时候，还需要考虑该点不作处理的情况\t\n}\n\n```\n> 值得一提，STL中的两个全排列函数 `next_permutation` 和 `prev_permutation`\n\n```cpp\n#include <algorithm>\n\nint arr[3]={2, 1, 3};\n\t\t\t\t\t\t\t\t// cout\ndo{\t\t\t\t\t\t\t\t// 2 1 3\n\tfor(int i=0; i<3; i++)\t\t// 2 3 1\n\t\tcout<<arr[i]<<\" \";\t\t// 3 1 2\n\tcout<<endl;\t\t\t\t\t// 3 2 1 \n}while(next_permutation(arr, arr+3));\n// 应当注意，next_permutaion是直接在序列上更新下一个序列\n// 并且是在更新完后再检查是否是排名更靠后的序列，是则返回true，否则返回false\n// 因此，此时的arr为{ 1, 2, 3 }\n\n// prev_permutation同理\nint brr[3]={2, 1, 3};\n\ndo{\t\t\t\t\t\t\t\t// cout\n\tfor(int i=0; i<3; i++)      // 1 2 3\n\t\tcout<<brr[i]<<\" \";      // 1 3 2\n\tcout<<endl;\t\t\t\t\t// 1 2 3\n}while(prev_permutation(brr, brr+3));\n// 此时的brr为{ 3, 2, 1 }\n\n```\n\n> BFS\n\n```cpp\nvoid BFS(int sx, sy){\n\tqueue<PII> q;\n\tq.push( {sx, sy} ); // 入队\n\tused[sx][sy]=1;     // 标记使用\n\tstep[sx][sy]=0;     // 更新步长\n\t\n\twhile( q.size() ){\n\t\t// 当前步\n\t\tint x = q.front().fst;\n\t\tint y = q.front().sed; \n\t\t\n\t\tfor(int i=0; i<4; i++){\n\t\t\t// 下一步\n\t\t\tint nx = x+dxy[i][0];\n\t\t\tint ny = y+dxy[i][1];\n\t\t\tif(nx<0 || nx>=R || ny<0 || ny>=C) continue; \t\t\t\t// 检查越界\n\t\t\tif(used[nx][ny]==1 || g[nx][ny]=='不能到达的点') continue; \t// 检查能否到达（此步是否合法）\n\t\t\t\n\t\t\tq.push( {nx, ny} );        // 入队\n\t\t\tused[nx][ny]=1;            // 标记使用\n\t\t\tstep[nx][ny]=step[x][y]+1; // 更新步长\n\n\t\t\tif(g[nx][ny]=='终点') return;\n\t\t}\n\t\t\n\t\tq.pop();\n\t}\n\n\treturn ;\n}\n```\n\n\n<h4 id=3.2>3.2 最短路</h4>\n\n> `Dijkstra（非负权边）`\n> 1. 将所有点看作未确定最短路\n> 2. 将起点的dis[s]=0，其余置为+∞\n> 3. 将未确定的点中，选取距离s最近的点进行松弛操作\n```cpp\nint n, m;   // 点、边\nvector<PII> edge[100010];   // edge[x]={y,z} x->y=z\nint dis[N]; // 最短路\nbool st[N]; // 是否已确定最短路\n// O(mlogm)\nint dijkstra(int s, int e){\n    // fst存dis[i] sed存i\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n    // 初始化\n    memset(dis, 0x3f, sizeof dis);\n    dis[s]=0;\n    // 起点入队\n    heap.push({dis[s], s});  \n\n    while(heap.size()){\n        auto x=heap.top().sed;  // 取最小点\n        heap.pop();\n        // 在出堆的时候判断、确定是否确定最短路\n        if(st[x]) continue;\n        st[x]=1; // 确定最短路\n\n        // 对该点进行松弛操作\n        for(auto& [y, z]: edge[x])\n            if( dis[y]>dis[x]+z ){\n                dis[y]=dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n    return dis[e];  \n}\n```\n\n\n> `bellman_ford（万能）`\n> 1. 将起点的dis[s]=0，其余置为+∞\n> 2. 将所有边进行松弛操作\n> 3. 直到某轮迭代中没有执行松弛操作时，退出，或者执行n次\n```cpp\nint n, m, k; // 最多经过k条边\nvector<PII> edge[N];\nint dis[N];  // 最短路\nint bkup[N]; // 备份，防止串联\n// O(nm)\nint bellman_ford(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    dis[s]=0;\n\n    for(int i=1; i<=k; i++){ // 最多迭代 k 次\n        bool flg=0;\n        memcpy(bkup, dis, sizeof dis);\n        for(int x=1; x<=n; x++)     // 遍历所有边\n        for(auto& [y, z]: edge[x])  // 对每条边进行松弛操作\n            if( dis[y] > bkup[x] + z){\n                dis[y] = bkup[x] + z;\n                flg=1;\n            }\n        if(!flg) break;  // 当前没有进行松弛操作\n    }\n    // 因为存在无穷大引出的边发生松弛操作\n    // 而图中存在负权边，因此要做个小小的处理\n    if(dis[e]>INF/2) return INF; \n    return dis[e];\n}\n```\n\n\n> `spfa（非负权回路）`\n> 队列优化版 bellman_ford\n> 1. 将起点的dis[s]=0，其余置为+∞\n> 2. 将被松弛的点加入队列，进行松弛操作\n>     * 通过一个 st[i] 来判断 i 点是否在队列中，防止重复入队\n```cpp\nint n, m;\nvector<PII> edge[N];\nint dis[N]; // 最短路\nbool st[N]; // 是否在队列中?\nO(nm)\nint spfa(int s, int e){\n    queue<int> q;\n    memset(dis, 0x3f, sizeof dis);\n    \n    dis[s]=0;   // 源点\n    st[s]=1;    // 在队列中\n    q.push(s);  // 扔进队列\n\n    while(q.size()){\n        auto x=q.front();\n        q.pop();\n        st[x]=0; // 不在队列中\n\n        for(auto& [y, z]: edge[x])\n            if( dis[y] > dis[x] + z ){\n                dis[y] = dis[x] + z;\n                if(!st[y]){ // 如果被松弛的点不在队列中\n                    st[y]=1;// 就压入队列\n                    q.push(y);\n                }\n            }\n    }\n    return dis[e];\n}\n```\n\n> `Floyd（多源最短路）`\n> 1. 将自己到达自己的最短路设置为0，其余设置为+∞\n> 2. 任意两点，都可以经过任意一点，尝试松弛操作\n```cpp\n// 注意，此写法省略了边的存储，及直接将边存储到最短路中\nint n, m;\nint dis[N][N];\n// O(n^3)\nvoid flody(){\n    for(int k=1; k<=n; k++)\n        for(int i=1; i<=n; i++)\n            for(int j=1; j<=n; j++)\n                dis[i][j]=min(dis[i][j], dis[i][k]+dis[k][j]);\n}\n```\n\n<h4 id=3.3>3.3 最小生成树</h4>\n\n> `Prim 稠密图`\n> 1. 地图初始化为+∞\n> 2. 将所有点到达集合的距离设置为+∞，且标记都不在集合中\n> 3. 迭代n次，每次将未在集合中且距离集合最近的点加入集合\n> 4. 通过新进入集合的点，更新所有点距离集合的距离\n```cpp\nint n, m;\nint edge[N][N];\nint dis[N]; // 每个点到达（最小生成树）集合的最短路\nbool st[N]; // 是否已经在集合中\n// O(n^2+m)\nint prim(){\n    int res=0;\n    memset(dis, 0x3f, sizeof dis);  // 初始化每个点到集合的距离为inf\n    memset(st, 0, sizeof st);       // 初始化每个点都未在集合中\n\n    for(int k=0; k<n; k++){ // 迭代 n 次\n\n        int t=-1;           // 找到未在集合中且距离集合最近的点\n        for(int i=1; i<=n; i++)\n            if(!st[i] && (t==-1 || dis[t]>dis[i]))\n                t=i;\n        if(k && dis[t]==INF) return INF;    // 孤岛\n        \n        if(k) res+=dis[t];                  // 权值和\n        st[t]=1;                // 进入集合\n        for(int i=1; i<=n; i++) // 通过该点去更新\n            dis[i]=min(dis[i], edge[t][i]);\n    }\n    return res;\n}\n```\n\n> `Kruskal 稀疏图`\n> 1. 将所有边从小到大排序\n> 2. 维护一堆集合，查询两个元素是否属于同一集合，合并俩集合\n\n```cpp\nint n, m;\nint p[N];   // 并查集\npair<int, PII> edge[N];\n\nint find(int x){  // 找x的祖宗\n    if(p[x]!=x) p[x]=find(p[x]);\n    return p[x];\n}\n\nint kruskal(){\n    sort(edge+1, edge+1+m); \n    for(int i=1; i<=n; i++) p[i]=i;\n    // 排序 初始化并查集\n    int res=0, cnt=0;\n    // 从小到大枚举所有边\n    for(int i=1; i<=m; i++){\n        int a=edge[i].sed.fst;\n        int b=edge[i].sed.sed;\n        int w=edge[i].fst;\n        a=find(a), b=find(b);\n        if(a!=b){\n            p[a]=b; // 合并\n            res+=w; // 权值和\n            cnt++;  // 判断孤岛\n        }\n    }\n\n    if(cnt<n-1) return inf;\n    return res;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=4>4 数学</h3>\n\n<h4 id=4.1>4.1 质（素）数与约数</h4>\n \n> `gcd` 欧几里得算法（辗转相除法）\n```cpp\nint gcd(int a, int b){\n\treturn b ? gcd(b, a%b) : a;\n}\n```\n> STL中有个相似的 `__gcd(int x, int y)`\n\n> 裴蜀定理：对于任意整数 a,b 存在一对整数 x,y 满足 ax+by=gcd(a,b)  \n`exgcd` 拓展欧几里得算法\n\n```cpp\nint exgcd(int a, int b, int &x, int &y){\n\tif(!b){\n\t\tx=1, y=0;\n\t\treturn a;\n\t}\n\tint d = exgcd(b, a%b, y, x);\n\ty -= (a/b)*x;\n\treturn d; \n}\n```\n> `LCD`\n```cpp\nint  lcd(int x, int y){\n    return a*b/gcd(a, b);\n}\n```\n> `快筛素数` 先生成(2^16)内的素数 再快判\n```cpp\nint primes[6555], cnt;  // 2^16中只有6542个素数\nbool st[65555];         // 生成的时候只用判断这么多个\n\nvoid make_primes(int n) {\n\tfor (int i = 2; i <= n; i++) {\n\t\tif (!st[i]) primes[cnt++] = i;              // 当前数没被筛过st[i]==0，说明是素数\n\t\tfor (int j = 0; primes[j] <= n / i; j++) {  // 确保 第j个质数 和 i 相乘不会爆\n\t\t\tst[primes[j] * i] = 1;                  // 被唯一标记过\n\t\t\tif (i % primes[j] == 0) break;          // 此时primes[j]是i的最小质因子，退出避免重复筛\n\t\t}\n\t}\n\treturn ;\n}\n\nbool is_p(int x) {\n    if(!st[0]) make_primes(65536), st[0]=1;\n    if(x<=65536) return !st[x];\n\tfor (int i = 0; primes[i] <= x/primes[i]; i++) \n\t\tif (x % primes[i] == 0)\n\t\t\treturn 0;\n\treturn 1;\n}\n```\n\n<h4 id=4.2>4.2 快速幂</h4>\n\n```cpp\n// a^b%MOD\nLL quick_pow(LL a, int b){\n    LL res=1%MOD;\n    for( ; b; b>>=1){\n        if(b&1) res=1LL*a*res%MOD; // 决定是否相乘\n        a=1ll*a*a%MOD;             // 每个位置上，递推出的二进制位上的值\n    }\n    return res;\n}\n```\n\n\n<h3 id=5>5 动态规划</h3>\n\n\n\n\n\n\n\n\n<h3 id=6>6 字符串</h3>\n\n<h4 id=6.1>6.1 KMP</h4>\n\n```cpp\n// 主串和模式串\n// 注意!!!从下标1开始!!!\nvoid KMP(string s, string p){\n    int n=s.size()-1, m=p.size()-1;\n    int ne[100010]={0}; // 模式串的next串\n    //求ne数组\n    for(int i = 2, j = 0; i <= m; i++) {\n        while(j && p[i] != p[j + 1]) j = ne[j];\n        if(p[i] == p[j + 1]) j++;\n        ne[i] = j;\n    }\n    //kmp匹配\n    for(int i = 1, j = 0; i <= n; i++) {\n        while(j && s[i] != p[j + 1]) j = ne[j];\n        if(s[i] == p[j + 1]) j++;\n        if(j == m) {\n            j = ne[j]; //当匹配成功时继续往下匹配\n            // 你的操作!!!\n        }\n    }\n    return ;\n}\n```\n\n\n\n\n\n<h3 id=7>7 计算几何</h3>","source":"_posts/algorithm1.md","raw":"---\ntitle: 算法模板 \nexcerpt: 入门用\nindex_img: /img/algorithm/icpc_logo.png\nbanner_img: /img/algorithm/icpc_logo.png\ndate: 2024-05-13 6:45:00\ncategories: algorithm\n---\n\n> 自用模板\n```cpp\n#pragma GCC optimzie(\"Ofast\", \"inline\")\n\n#define ioio ios::sync_with_stdio(0);cin.tie(0),cout.tie(0)\n#define fst first\n#define sed second\n#define pb push_back\n\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <map>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int, int> PII;\n\nint dxy[4][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\nconst double PI = acos(-1.0);\nconst int inf = 0x3f3f3f3f;\nconst int MOD = 1e9+7;\nconst int N = 2e5+10;\n// ********************************************************\n\nint n, m;\nint a[N];\n\nvoid solve(){\n    \n    \n    \n    return ;\n}\n\nint main(){\n    ioio;\n    freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout); \n    //int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n\n1. [基础语法](#1)     \n    1.1 [排序*](#1.1)   \n    1.2 [二分](#1.2)   \n    1.3 [双指针](#1.3)   \n    1.4 [高精度](#1.4)   \n    1.5 [进制转换](#1.5)     \n    1.6 [位运算](#1.6)\n\n2. [数据结构](#2)   \n    2.1 [二叉树](#2.1)  \n    2.2 [栈与队列](#2.2)  \n    2.3 [并查集](#2.3)  \n    2.4 [线段树与树状数组*](#2.4)\n\n3. [图论](#3)  \n    3.1 [DFS与BFS](#3.1)   \n    3.2 [最短路](#3.2)  \n    3.3 [最小生成（支撑）树](#3.3)\n\n4. [数学](#4)  \n    4.1 [质（素）数与约数](#4.1)   \n    4.2 [快速幂](#4.2)\n\n5. [动态规划](#5)\n\n6. [字符串](#6)  \n    6.1 [KMP](#6.1)   \n    6.2 [后缀数组](#6.2) \n\n7. [计算几何](#7)\n\n8. [其他](#8)\n\n\n\n\n\n\n\n\n\n\n<h3 id=1>1 基础算法</h3>\n\n<h4 id=1.1>1.1 排序</h4>\n\n> `sort自定义排序`\n> 对于 a b俩元素，如果返回T，则a在b前面，反之b在a前面\n```cpp\nbool cmp(int a, int b){\n    if(a<b) return 1;\n    return 0;\n}\n\nsort(a.begin(), a.end(), cmp);\n```\n> `快速排序`\n> x是每轮的基准值\n```cpp\nvoid Cswap(int *a, int *b){\n    int t=*a;\n    *a=*b;\n    *b=t;\n} // C环境下使用的swap函数\n\nvoid qsort(int *arr, int l, int r){\n    if (l >= r) return;\n    int i=l-1, j=r+1, x=arr[l+r>>1];\n    while (i < j){ // 基准值比较，左右交换\n        do i++; while(arr[i] < x);\n        do j--; while(arr[j] > x);\n        if (i < j) Cswap(&arr[i], &arr[j]);\n    }\n    qsort(arr, l, j), qsort(arr, j + 1, r);\n}\n// a[1]-a[n]排序\nsort(a, 1, n);\n```\n> 归并排序\n```cpp\n\n```\n\n<h4 id=1.2>1.2 二分</h4>\n\n>\n```cpp\n// >=x的第一个元素\nint bsearch_1(int l, int r){\n    while (l < r){\n        int mid = l + r >> 1;\n        if (check(mid)) r = mid;\n        else l = mid + 1;\n    }\n    return l;\n}\n```\n\n```cpp\n// <=x的最后一个元素\nint bsearch_2(int l, int r){\n    while (l < r){\n        int mid = l + r + 1 >> 1;\n        if (check(mid)) l = mid;\n        else r = mid - 1;\n    }\n    return l;\n}\n```\n\n> 为何不用STL？\n```cpp\n// >=x的第一个元素\nauto i=lower_bound(a.begin(), a.end(), x);\n*i;          // 值\ni-a.begin(); // 位置\n// 显然 <x 的最后一个元素是\ni-a.begin()-1;\n```\n\n```cpp\n// >x的第一个元素\nauto i=upper_bound(a.begin(), a.end(), x);\n// 显然 <=x 的最后一个元素是\ni-a.begin()-1;\n```\n<h4 id=1.3>1.3 双指针</h4>\n\n```cpp\n// 左指针 右指针\nint l=1, r=1;\n// 指针不越界，部分情况下考虑左指针优先右指针\nwhile( r<=n && l<=n){\n\t// 右指针右移\n\twhile( r<=n && 条件) r++;\n\t{...} // 更新答案巴拉巴拉\n\t// 左指针右移\n\tl++;\n}\n```\n\n\n<h4 id=1.4>1.4 高精度</h4>\n\n> 高精度加法\n```cpp\nstring ADD(string A, string B) {  // 正序输入 正序输出\n\treverse(A.begin(), A.end()); reverse(B.begin(), B.end());\n\tstring res;\n\tint add = 0;\n\tfor (int i = 0; i < A.size() || i < B.size(); i++) {\n\t\tif (i < A.size()) add += A[i] - '0';\n\t\tif (i < B.size()) add += B[i] - '0';// 取值\n\t\tres.push_back(add % 10 + '0');      // +\n\t\tadd /= 10;                          // 进位\n\t}\n\tif (add) res.push_back(add + '0');\n\treverse(res.begin(), res.end());\n\treturn res;\n}\n```\n\n> 高精度减法\n```cpp\nstring SUB(string& A, string& B) {  // 正序输入 正序输出 自带负号\n\tif (!(A.size() > B.size() || (A.size() == B.size() && A >= B)))\n\t\treturn \"-\" + SUB(B, A);\n\treverse(A.begin(), A.end()); reverse(B.begin(), B.end());\n\tstring res;\n\tfor (int i = 0, t = 0; i < A.size(); i++) {\n\t\tint ai = A[i] - '0', bi = 0;\n\t\tif (i < B.size()) bi = B[i] - '0';\n\t\tt = ai - t;\n\t\tif (i < B.size()) t -= bi;\n\t\tres.push_back((t + 10) % 10 + '0');\n\t\tif (t < 0) t = 1;\n\t\telse t = 0;\n\t}\n\twhile (res.size() > 1 && res.back() == '0') res.pop_back();\n\treverse(res.begin(), res.end());\n\treturn res;\n}\n```\n\n> 高精度乘法\n```cpp\nstring MUL(string A, int b) { // 顺序输入 顺序输出\n\treverse(A.begin(), A.end());\n\tstring res;\n\tint t = 0;\n\tfor (int i = 0; i < A.size() || t; i++) {\n\t\tif (i < A.size()) t += (A[i] - '0') * b;\n\t\tres.push_back(t % 10 + '0');\n\t\tt /= 10;\n\t}\n\t// 去前导0\n\twhile (res.size() > 1 && res.back() == '0') res.pop_back();\n\treverse(res.begin(), res.end());\n\treturn res;\n}\n```\n> 高精度除法\n```cpp\nstring DIV(string A, int b, int& r) {  // 正序输入 正序输出\n\tif (b == 0) return \"ERROR\";         // A / b = res ... r \n\treverse(A.begin(), A.end());\n\tstring res;\n\tr = 0;\n\tfor (int i = A.size() - 1; i >= 0; i--) {\n\t\tint ai = A[i] - '0';\n\t\tr = r * 10 + ai;\n\t\tres.push_back(r / b + '0');\n\t\tr %= b;\n\t}\n\twhile (res.size() > 1 && res.front() == '0') res.erase(res.begin(), res.begin() + 1);\n\treturn res;\n}\n```\n\n<h4 id=1.5>1.5 进制转换</h4>\n\n> x(a) -> x(10)\n```cpp\nstring x_10(string x, int a){\n    string res=\"0\", p=\"1\";  // 将 a 进制下的 x 转换为 10 进制\n    for(int i=x.size()-1; i>=0; i--){\n        int t; // 判断当前位数字是多少\n        if(x[i]>='0' && x[i]<='9') t=x[i]-'0'; \n        if(x[i]>='A' && x[i]<='Z') t=x[i]-'A'+10;\n        if(x[i]>='a' && x[i]<='z') t=x[i]-'a'+10;\n        res=ADD(res, MUL(p, t));//res+=t*p; // t*(a^0, a^1, a^2)\n        p=MUL(p, a);            //p*=a;     //   (a^0, a^1, a^2)\n    }\n    return res;\n}\n```\n\n> x(10) -> x(a)\n```cpp\nstring x_a(string x, int a){\n    if(x==\"0\") return \"0\";\n    string res; // 将 10 进制下的 x 转换为 a 进制\n    while(x!=\"0\"){\n        int r;\n        x=DIV(x, a, r);\n        if( r>=0 && r<=9 ) r+='0';\n        else r+='A'-10;\n        res+=r;\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\n```\n\n<h4 id=1.6>1.6 位运算</h4>\n\n> ` & ` 按位与 `全1为1`\n```c\n0&0=0   1&0=0\n0&1=0   1&1=1\n```\n> ` | ` 按位或 `一1为1`\n```c\n0|0=0   1|0=1\n0|1=1   1|1=1\n```\n> ` ^ ` 按位异或 `不同为1`\n```c\n0^0=0   1^0=1\n0^1=1   1^1=0\n```\n> ` lowbit `  x 的二进制表示中，最低位的 1 的位置\n> ```cpp\n> lowbit(0b10110000) == 0b00010000 == 16\n>          ~~~^~~~~\n> lowbit(0b11100100) == 0b00000100 == 4\n>          ~~~~~^~~ \n> ```\n```cpp\nint lowbit(int x) {\n    return x & -x;\n}\n```\n<h3 id=2>2 数据结构</h3>\n\n\n<h4 id=2.1>2.1 二叉树</h4>\n\n<h4 id=2.2>2.2 栈与队列</h4>\n\n\n<h4 id=2.3>2.3 并查集</h4>\n\n> 基础并查集\n\n```cpp\nint P[N];   // 存放每个数的祖宗\n\nint find(int x){// 找x的祖宗结点\n    if(x!=p[x]) p[x]=find(p[x]);\n    return p[x];\n}\n\nvoid solve(){\n    /* 初始化 */\n    for(int i=1; i<=n; i++) p[i]=i; \n    /* 合并 */\n    x=find(x), y=find(y);   // 找到x和y的祖宗\n    if(x!=y) p[y]=x;        // 将y的祖宗合并到x\n}\n```\n\n\n<h4 id=2.4>2.4 线段树与树状数组</h4>\n\n> 树状数组 二叉索引树 强化版前缀和\n```cpp\nint lowbit(int x){\n    return x&-x;\n}\n\nvoid add(int i, int v){\n    for(; i<=n; i+=lowbit(i))\n        t[i]+=v;    // 该点后面所有后驱都需要+v\n}\n\nint query(int i){   \n    int res=0;      // i的前缀和\n    for(; i>=1; i-=lowbit(i))\n        res+=t[i];  // 累加所有后驱\n    return res;\n}\n\nvoid init(){\n    for(int i=1; i<=n; i++)\n        add(i, a[i]);\n}\n\nvoid init(){  // 这种是一个一个的+\n    for(int i=1; i<=n; i++){\n        t[i]+=a[i];\n        int j=i+lowbit(i);\n        if(j<=n) t[j]+=t[i];\n    }\n}\n```\n\n> 线段树 不一定正确\n\n```cpp\nstruct node {\n    int l, r;   // 左右结点\n    LL sum;    // 区间和\n}tr[4 * N];\n\nvoid pushup(node& u, node& l, node& r) {\n    u.sum = l.sum + r.sum;\n}\n\nvoid build(int u, int l, int r) {\n    tr[u] = { l,r };\n    if (l == r)\n        tr[u].sum = a[r];\n    else {\n        int mid = l + r >> 1;\n        build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);\n        pushup(tr[u], tr[u << 1], tr[u << 1 | 1]);\n    }\n}\n\nvoid modify(int u, int i, int v) {   // 单点修改\n    if (tr[u].l == i && tr[u].r == i)    // 找到叶子结点\n        tr[u] = { i,i,v };              // 修改\n    else {\n        int mid = tr[u].l + tr[u].r >> 1;\n        if (i <= mid) modify(u << 1, i, v);\n        else modify(u << 1 | 1, i, v);  // 不在左边就肯定在右边\n        pushup(tr[u], tr[u << 1], tr[u << 1 | 1]);\n    }\n}\n\nnode query(int u, int l, int r) {\n    if (l <= tr[u].l && tr[u].r <= r)\n        return tr[u];\n    else {\n        int mid = tr[u].l + tr[u].r >> 1;\n        if (mid >= r)                      // tr[l]--------[m]--------tr[r]\n            return query(u << 1, l, r);    //       l----r         \n        else if (mid < l)                  // tr[l]--------[m]--------tr[r]\n            return query(u << 1 | 1, l, r);//                  l----r\n        else {\n            auto left = query(u << 1, l, r);\n            auto right = query(u << 1 | 1, l, r);\n            node res = { l, r };\n            pushup(res, left, right);\n            return res;\n        }\n    }\n}\n```\n\n\n\n\n\n\n\n\n<h3 id=3>3 图论</h3>\n\n<h4 id=3.1>3.1 DFS与BFS</h4>\n\n> DFS  \n> 一个小tips：枚举状态时候，枚举单个点会爆时间，当从行的角度考虑\n```cpp\n// 处理当前点u\nvoid dfs(int u){\n\tif( u满足剪枝条件 )\n\t\treturn ;\t\n\tif( u>N ) {\t    \t// 到达边界\n\t\tif( check() )   // 如果当前情况合法\n\t\t\tdeal();\t\t// 输出或者更新最终答案\t\t\n\t\treturn ;\t\t// 结束\n\t}\n\t\n\tfor(auto i : arr){\t\t\t\t// 显然，当一个点有多个状态，需要全部考虑\n\t\tif( used[i] ) continue ;\t// 如果此状态仅可出现一次，那么该点不考虑此状态\n\t\t\n\t\tchange(u, i);\t\t// 将 u 点状态设置为 i （如果需要，应当同时考虑下 i 的状态）\t\n\t\tdfs( u++ );\t\t\t// 进入下一层。应当注意，这里的下一层是指u进入递归层面的下一层 \n\t\tchange(u, row);\t\t// 恢复现场。通常情况下，u是直接置0\n\t}\n\tdfs( u++ );\t\t\t\t// 部分时候，还需要考虑该点不作处理的情况\t\n}\n\n```\n> 值得一提，STL中的两个全排列函数 `next_permutation` 和 `prev_permutation`\n\n```cpp\n#include <algorithm>\n\nint arr[3]={2, 1, 3};\n\t\t\t\t\t\t\t\t// cout\ndo{\t\t\t\t\t\t\t\t// 2 1 3\n\tfor(int i=0; i<3; i++)\t\t// 2 3 1\n\t\tcout<<arr[i]<<\" \";\t\t// 3 1 2\n\tcout<<endl;\t\t\t\t\t// 3 2 1 \n}while(next_permutation(arr, arr+3));\n// 应当注意，next_permutaion是直接在序列上更新下一个序列\n// 并且是在更新完后再检查是否是排名更靠后的序列，是则返回true，否则返回false\n// 因此，此时的arr为{ 1, 2, 3 }\n\n// prev_permutation同理\nint brr[3]={2, 1, 3};\n\ndo{\t\t\t\t\t\t\t\t// cout\n\tfor(int i=0; i<3; i++)      // 1 2 3\n\t\tcout<<brr[i]<<\" \";      // 1 3 2\n\tcout<<endl;\t\t\t\t\t// 1 2 3\n}while(prev_permutation(brr, brr+3));\n// 此时的brr为{ 3, 2, 1 }\n\n```\n\n> BFS\n\n```cpp\nvoid BFS(int sx, sy){\n\tqueue<PII> q;\n\tq.push( {sx, sy} ); // 入队\n\tused[sx][sy]=1;     // 标记使用\n\tstep[sx][sy]=0;     // 更新步长\n\t\n\twhile( q.size() ){\n\t\t// 当前步\n\t\tint x = q.front().fst;\n\t\tint y = q.front().sed; \n\t\t\n\t\tfor(int i=0; i<4; i++){\n\t\t\t// 下一步\n\t\t\tint nx = x+dxy[i][0];\n\t\t\tint ny = y+dxy[i][1];\n\t\t\tif(nx<0 || nx>=R || ny<0 || ny>=C) continue; \t\t\t\t// 检查越界\n\t\t\tif(used[nx][ny]==1 || g[nx][ny]=='不能到达的点') continue; \t// 检查能否到达（此步是否合法）\n\t\t\t\n\t\t\tq.push( {nx, ny} );        // 入队\n\t\t\tused[nx][ny]=1;            // 标记使用\n\t\t\tstep[nx][ny]=step[x][y]+1; // 更新步长\n\n\t\t\tif(g[nx][ny]=='终点') return;\n\t\t}\n\t\t\n\t\tq.pop();\n\t}\n\n\treturn ;\n}\n```\n\n\n<h4 id=3.2>3.2 最短路</h4>\n\n> `Dijkstra（非负权边）`\n> 1. 将所有点看作未确定最短路\n> 2. 将起点的dis[s]=0，其余置为+∞\n> 3. 将未确定的点中，选取距离s最近的点进行松弛操作\n```cpp\nint n, m;   // 点、边\nvector<PII> edge[100010];   // edge[x]={y,z} x->y=z\nint dis[N]; // 最短路\nbool st[N]; // 是否已确定最短路\n// O(mlogm)\nint dijkstra(int s, int e){\n    // fst存dis[i] sed存i\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n    // 初始化\n    memset(dis, 0x3f, sizeof dis);\n    dis[s]=0;\n    // 起点入队\n    heap.push({dis[s], s});  \n\n    while(heap.size()){\n        auto x=heap.top().sed;  // 取最小点\n        heap.pop();\n        // 在出堆的时候判断、确定是否确定最短路\n        if(st[x]) continue;\n        st[x]=1; // 确定最短路\n\n        // 对该点进行松弛操作\n        for(auto& [y, z]: edge[x])\n            if( dis[y]>dis[x]+z ){\n                dis[y]=dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n    return dis[e];  \n}\n```\n\n\n> `bellman_ford（万能）`\n> 1. 将起点的dis[s]=0，其余置为+∞\n> 2. 将所有边进行松弛操作\n> 3. 直到某轮迭代中没有执行松弛操作时，退出，或者执行n次\n```cpp\nint n, m, k; // 最多经过k条边\nvector<PII> edge[N];\nint dis[N];  // 最短路\nint bkup[N]; // 备份，防止串联\n// O(nm)\nint bellman_ford(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    dis[s]=0;\n\n    for(int i=1; i<=k; i++){ // 最多迭代 k 次\n        bool flg=0;\n        memcpy(bkup, dis, sizeof dis);\n        for(int x=1; x<=n; x++)     // 遍历所有边\n        for(auto& [y, z]: edge[x])  // 对每条边进行松弛操作\n            if( dis[y] > bkup[x] + z){\n                dis[y] = bkup[x] + z;\n                flg=1;\n            }\n        if(!flg) break;  // 当前没有进行松弛操作\n    }\n    // 因为存在无穷大引出的边发生松弛操作\n    // 而图中存在负权边，因此要做个小小的处理\n    if(dis[e]>INF/2) return INF; \n    return dis[e];\n}\n```\n\n\n> `spfa（非负权回路）`\n> 队列优化版 bellman_ford\n> 1. 将起点的dis[s]=0，其余置为+∞\n> 2. 将被松弛的点加入队列，进行松弛操作\n>     * 通过一个 st[i] 来判断 i 点是否在队列中，防止重复入队\n```cpp\nint n, m;\nvector<PII> edge[N];\nint dis[N]; // 最短路\nbool st[N]; // 是否在队列中?\nO(nm)\nint spfa(int s, int e){\n    queue<int> q;\n    memset(dis, 0x3f, sizeof dis);\n    \n    dis[s]=0;   // 源点\n    st[s]=1;    // 在队列中\n    q.push(s);  // 扔进队列\n\n    while(q.size()){\n        auto x=q.front();\n        q.pop();\n        st[x]=0; // 不在队列中\n\n        for(auto& [y, z]: edge[x])\n            if( dis[y] > dis[x] + z ){\n                dis[y] = dis[x] + z;\n                if(!st[y]){ // 如果被松弛的点不在队列中\n                    st[y]=1;// 就压入队列\n                    q.push(y);\n                }\n            }\n    }\n    return dis[e];\n}\n```\n\n> `Floyd（多源最短路）`\n> 1. 将自己到达自己的最短路设置为0，其余设置为+∞\n> 2. 任意两点，都可以经过任意一点，尝试松弛操作\n```cpp\n// 注意，此写法省略了边的存储，及直接将边存储到最短路中\nint n, m;\nint dis[N][N];\n// O(n^3)\nvoid flody(){\n    for(int k=1; k<=n; k++)\n        for(int i=1; i<=n; i++)\n            for(int j=1; j<=n; j++)\n                dis[i][j]=min(dis[i][j], dis[i][k]+dis[k][j]);\n}\n```\n\n<h4 id=3.3>3.3 最小生成树</h4>\n\n> `Prim 稠密图`\n> 1. 地图初始化为+∞\n> 2. 将所有点到达集合的距离设置为+∞，且标记都不在集合中\n> 3. 迭代n次，每次将未在集合中且距离集合最近的点加入集合\n> 4. 通过新进入集合的点，更新所有点距离集合的距离\n```cpp\nint n, m;\nint edge[N][N];\nint dis[N]; // 每个点到达（最小生成树）集合的最短路\nbool st[N]; // 是否已经在集合中\n// O(n^2+m)\nint prim(){\n    int res=0;\n    memset(dis, 0x3f, sizeof dis);  // 初始化每个点到集合的距离为inf\n    memset(st, 0, sizeof st);       // 初始化每个点都未在集合中\n\n    for(int k=0; k<n; k++){ // 迭代 n 次\n\n        int t=-1;           // 找到未在集合中且距离集合最近的点\n        for(int i=1; i<=n; i++)\n            if(!st[i] && (t==-1 || dis[t]>dis[i]))\n                t=i;\n        if(k && dis[t]==INF) return INF;    // 孤岛\n        \n        if(k) res+=dis[t];                  // 权值和\n        st[t]=1;                // 进入集合\n        for(int i=1; i<=n; i++) // 通过该点去更新\n            dis[i]=min(dis[i], edge[t][i]);\n    }\n    return res;\n}\n```\n\n> `Kruskal 稀疏图`\n> 1. 将所有边从小到大排序\n> 2. 维护一堆集合，查询两个元素是否属于同一集合，合并俩集合\n\n```cpp\nint n, m;\nint p[N];   // 并查集\npair<int, PII> edge[N];\n\nint find(int x){  // 找x的祖宗\n    if(p[x]!=x) p[x]=find(p[x]);\n    return p[x];\n}\n\nint kruskal(){\n    sort(edge+1, edge+1+m); \n    for(int i=1; i<=n; i++) p[i]=i;\n    // 排序 初始化并查集\n    int res=0, cnt=0;\n    // 从小到大枚举所有边\n    for(int i=1; i<=m; i++){\n        int a=edge[i].sed.fst;\n        int b=edge[i].sed.sed;\n        int w=edge[i].fst;\n        a=find(a), b=find(b);\n        if(a!=b){\n            p[a]=b; // 合并\n            res+=w; // 权值和\n            cnt++;  // 判断孤岛\n        }\n    }\n\n    if(cnt<n-1) return inf;\n    return res;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=4>4 数学</h3>\n\n<h4 id=4.1>4.1 质（素）数与约数</h4>\n \n> `gcd` 欧几里得算法（辗转相除法）\n```cpp\nint gcd(int a, int b){\n\treturn b ? gcd(b, a%b) : a;\n}\n```\n> STL中有个相似的 `__gcd(int x, int y)`\n\n> 裴蜀定理：对于任意整数 a,b 存在一对整数 x,y 满足 ax+by=gcd(a,b)  \n`exgcd` 拓展欧几里得算法\n\n```cpp\nint exgcd(int a, int b, int &x, int &y){\n\tif(!b){\n\t\tx=1, y=0;\n\t\treturn a;\n\t}\n\tint d = exgcd(b, a%b, y, x);\n\ty -= (a/b)*x;\n\treturn d; \n}\n```\n> `LCD`\n```cpp\nint  lcd(int x, int y){\n    return a*b/gcd(a, b);\n}\n```\n> `快筛素数` 先生成(2^16)内的素数 再快判\n```cpp\nint primes[6555], cnt;  // 2^16中只有6542个素数\nbool st[65555];         // 生成的时候只用判断这么多个\n\nvoid make_primes(int n) {\n\tfor (int i = 2; i <= n; i++) {\n\t\tif (!st[i]) primes[cnt++] = i;              // 当前数没被筛过st[i]==0，说明是素数\n\t\tfor (int j = 0; primes[j] <= n / i; j++) {  // 确保 第j个质数 和 i 相乘不会爆\n\t\t\tst[primes[j] * i] = 1;                  // 被唯一标记过\n\t\t\tif (i % primes[j] == 0) break;          // 此时primes[j]是i的最小质因子，退出避免重复筛\n\t\t}\n\t}\n\treturn ;\n}\n\nbool is_p(int x) {\n    if(!st[0]) make_primes(65536), st[0]=1;\n    if(x<=65536) return !st[x];\n\tfor (int i = 0; primes[i] <= x/primes[i]; i++) \n\t\tif (x % primes[i] == 0)\n\t\t\treturn 0;\n\treturn 1;\n}\n```\n\n<h4 id=4.2>4.2 快速幂</h4>\n\n```cpp\n// a^b%MOD\nLL quick_pow(LL a, int b){\n    LL res=1%MOD;\n    for( ; b; b>>=1){\n        if(b&1) res=1LL*a*res%MOD; // 决定是否相乘\n        a=1ll*a*a%MOD;             // 每个位置上，递推出的二进制位上的值\n    }\n    return res;\n}\n```\n\n\n<h3 id=5>5 动态规划</h3>\n\n\n\n\n\n\n\n\n<h3 id=6>6 字符串</h3>\n\n<h4 id=6.1>6.1 KMP</h4>\n\n```cpp\n// 主串和模式串\n// 注意!!!从下标1开始!!!\nvoid KMP(string s, string p){\n    int n=s.size()-1, m=p.size()-1;\n    int ne[100010]={0}; // 模式串的next串\n    //求ne数组\n    for(int i = 2, j = 0; i <= m; i++) {\n        while(j && p[i] != p[j + 1]) j = ne[j];\n        if(p[i] == p[j + 1]) j++;\n        ne[i] = j;\n    }\n    //kmp匹配\n    for(int i = 1, j = 0; i <= n; i++) {\n        while(j && s[i] != p[j + 1]) j = ne[j];\n        if(s[i] == p[j + 1]) j++;\n        if(j == m) {\n            j = ne[j]; //当匹配成功时继续往下匹配\n            // 你的操作!!!\n        }\n    }\n    return ;\n}\n```\n\n\n\n\n\n<h3 id=7>7 计算几何</h3>","slug":"algorithm1","published":1,"updated":"2022-12-03T05:21:24.971Z","_id":"cl9jcqvzp0002qoh30xp65ia1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>自用模板</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimzie(<span class=\"hljs-string\">&quot;Ofast&quot;</span>, <span class=\"hljs-string\">&quot;inline&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ioio ios::sync_with_stdio(0);cin.tie(0),cout.tie(0)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;map&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">int</span> dxy[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> PI = <span class=\"hljs-built_in\">acos</span>(<span class=\"hljs-number\">-1.0</span>);<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf = <span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MOD = <span class=\"hljs-number\">1e9</span>+<span class=\"hljs-number\">7</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">2e5</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-comment\">// ********************************************************</span><br><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> a[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <br>    <br>    <br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    ioio;<br>    <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;in.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, stdin); <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;out.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>, stdout); <br>    <span class=\"hljs-comment\">//int T; cin&gt;&gt;T; while(T--)</span><br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<ol>\n<li><p><a href=\"#1\">基础语法</a><br> 1.1 <a href=\"#1.1\">排序*</a><br> 1.2 <a href=\"#1.2\">二分</a><br> 1.3 <a href=\"#1.3\">双指针</a><br> 1.4 <a href=\"#1.4\">高精度</a><br> 1.5 <a href=\"#1.5\">进制转换</a><br> 1.6 <a href=\"#1.6\">位运算</a></p>\n</li>\n<li><p><a href=\"#2\">数据结构</a><br> 2.1 <a href=\"#2.1\">二叉树</a><br> 2.2 <a href=\"#2.2\">栈与队列</a><br> 2.3 <a href=\"#2.3\">并查集</a><br> 2.4 <a href=\"#2.4\">线段树与树状数组*</a></p>\n</li>\n<li><p><a href=\"#3\">图论</a><br> 3.1 <a href=\"#3.1\">DFS与BFS</a><br> 3.2 <a href=\"#3.2\">最短路</a><br> 3.3 <a href=\"#3.3\">最小生成（支撑）树</a></p>\n</li>\n<li><p><a href=\"#4\">数学</a><br> 4.1 <a href=\"#4.1\">质（素）数与约数</a><br> 4.2 <a href=\"#4.2\">快速幂</a></p>\n</li>\n<li><p><a href=\"#5\">动态规划</a></p>\n</li>\n<li><p><a href=\"#6\">字符串</a><br> 6.1 <a href=\"#6.1\">KMP</a><br> 6.2 <a href=\"#6.2\">后缀数组</a> </p>\n</li>\n<li><p><a href=\"#7\">计算几何</a></p>\n</li>\n<li><p><a href=\"#8\">其他</a></p>\n</li>\n</ol>\n<h3 id=1>1 基础算法</h3>\n\n<h4 id=1.1>1.1 排序</h4>\n\n<blockquote>\n<p><code>sort自定义排序</code><br>对于 a b俩元素，如果返回T，则a在b前面，反之b在a前面</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a&lt;b) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-built_in\">sort</span>(a.<span class=\"hljs-built_in\">begin</span>(), a.<span class=\"hljs-built_in\">end</span>(), cmp);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>快速排序</code><br>x是每轮的基准值</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Cswap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125; <span class=\"hljs-comment\">// C环境下使用的swap函数</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">qsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-type\">int</span> i=l<span class=\"hljs-number\">-1</span>, j=r+<span class=\"hljs-number\">1</span>, x=arr[l+r&gt;&gt;<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)&#123; <span class=\"hljs-comment\">// 基准值比较，左右交换</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">Cswap</span>(&amp;arr[i], &amp;arr[j]);<br>    &#125;<br>    <span class=\"hljs-built_in\">qsort</span>(arr, l, j), <span class=\"hljs-built_in\">qsort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br><span class=\"hljs-comment\">// a[1]-a[n]排序</span><br><span class=\"hljs-built_in\">sort</span>(a, <span class=\"hljs-number\">1</span>, n);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>归并排序</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><br></code></pre></td></tr></table></figure>\n\n<h4 id=1.2>1.2 二分</h4>\n\n<blockquote>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &gt;=x的第一个元素</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">bsearch_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)&#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">check</span>(mid)) r = mid;<br>        <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &lt;=x的最后一个元素</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">bsearch_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)&#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r + <span class=\"hljs-number\">1</span> &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">check</span>(mid)) l = mid;<br>        <span class=\"hljs-keyword\">else</span> r = mid - <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为何不用STL？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &gt;=x的第一个元素</span><br><span class=\"hljs-keyword\">auto</span> i=<span class=\"hljs-built_in\">lower_bound</span>(a.<span class=\"hljs-built_in\">begin</span>(), a.<span class=\"hljs-built_in\">end</span>(), x);<br>*i;          <span class=\"hljs-comment\">// 值</span><br>i-a.<span class=\"hljs-built_in\">begin</span>(); <span class=\"hljs-comment\">// 位置</span><br><span class=\"hljs-comment\">// 显然 &lt;x 的最后一个元素是</span><br>i-a.<span class=\"hljs-built_in\">begin</span>()<span class=\"hljs-number\">-1</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &gt;x的第一个元素</span><br><span class=\"hljs-keyword\">auto</span> i=<span class=\"hljs-built_in\">upper_bound</span>(a.<span class=\"hljs-built_in\">begin</span>(), a.<span class=\"hljs-built_in\">end</span>(), x);<br><span class=\"hljs-comment\">// 显然 &lt;=x 的最后一个元素是</span><br>i-a.<span class=\"hljs-built_in\">begin</span>()<span class=\"hljs-number\">-1</span>;<br></code></pre></td></tr></table></figure>\n<h4 id=1.3>1.3 双指针</h4>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 左指针 右指针</span><br><span class=\"hljs-type\">int</span> l=<span class=\"hljs-number\">1</span>, r=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-comment\">// 指针不越界，部分情况下考虑左指针优先右指针</span><br><span class=\"hljs-keyword\">while</span>( r&lt;=n &amp;&amp; l&lt;=n)&#123;<br>\t<span class=\"hljs-comment\">// 右指针右移</span><br>\t<span class=\"hljs-keyword\">while</span>( r&lt;=n &amp;&amp; 条件) r++;<br>\t&#123;...&#125; <span class=\"hljs-comment\">// 更新答案巴拉巴拉</span><br>\t<span class=\"hljs-comment\">// 左指针右移</span><br>\tl++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=1.4>1.4 高精度</h4>\n\n<blockquote>\n<p>高精度加法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">ADD</span><span class=\"hljs-params\">(string A, string B)</span> </span>&#123;  <span class=\"hljs-comment\">// 正序输入 正序输出</span><br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>()); <span class=\"hljs-built_in\">reverse</span>(B.<span class=\"hljs-built_in\">begin</span>(), B.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\t<span class=\"hljs-type\">int</span> add = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>() || i &lt; B.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; A.<span class=\"hljs-built_in\">size</span>()) add += A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) add += B[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<span class=\"hljs-comment\">// 取值</span><br>\t\tres.<span class=\"hljs-built_in\">push_back</span>(add % <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;0&#x27;</span>);      <span class=\"hljs-comment\">// +</span><br>\t\tadd /= <span class=\"hljs-number\">10</span>;                          <span class=\"hljs-comment\">// 进位</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> (add) res.<span class=\"hljs-built_in\">push_back</span>(add + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t<span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高精度减法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">SUB</span><span class=\"hljs-params\">(string&amp; A, string&amp; B)</span> </span>&#123;  <span class=\"hljs-comment\">// 正序输入 正序输出 自带负号</span><br>\t<span class=\"hljs-keyword\">if</span> (!(A.<span class=\"hljs-built_in\">size</span>() &gt; B.<span class=\"hljs-built_in\">size</span>() || (A.<span class=\"hljs-built_in\">size</span>() == B.<span class=\"hljs-built_in\">size</span>() &amp;&amp; A &gt;= B)))<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + <span class=\"hljs-built_in\">SUB</span>(B, A);<br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>()); <span class=\"hljs-built_in\">reverse</span>(B.<span class=\"hljs-built_in\">begin</span>(), B.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, t = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br>\t\t<span class=\"hljs-type\">int</span> ai = A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>, bi = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) bi = B[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>\t\tt = ai - t;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) t -= bi;<br>\t\tres.<span class=\"hljs-built_in\">push_back</span>((t + <span class=\"hljs-number\">10</span>) % <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t\t<span class=\"hljs-keyword\">if</span> (t &lt; <span class=\"hljs-number\">0</span>) t = <span class=\"hljs-number\">1</span>;<br>\t\t<span class=\"hljs-keyword\">else</span> t = <span class=\"hljs-number\">0</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; res.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-string\">&#x27;0&#x27;</span>) res.<span class=\"hljs-built_in\">pop_back</span>();<br>\t<span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高精度乘法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">MUL</span><span class=\"hljs-params\">(string A, <span class=\"hljs-type\">int</span> b)</span> </span>&#123; <span class=\"hljs-comment\">// 顺序输入 顺序输出</span><br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\t<span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>() || t; i++) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; A.<span class=\"hljs-built_in\">size</span>()) t += (A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>) * b;<br>\t\tres.<span class=\"hljs-built_in\">push_back</span>(t % <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t\tt /= <span class=\"hljs-number\">10</span>;<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 去前导0</span><br>\t<span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; res.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-string\">&#x27;0&#x27;</span>) res.<span class=\"hljs-built_in\">pop_back</span>();<br>\t<span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>高精度除法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">DIV</span><span class=\"hljs-params\">(string A, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span>&amp; r)</span> </span>&#123;  <span class=\"hljs-comment\">// 正序输入 正序输出</span><br>\t<span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;ERROR&quot;</span>;         <span class=\"hljs-comment\">// A / b = res ... r </span><br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\tr = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) &#123;<br>\t\t<span class=\"hljs-type\">int</span> ai = A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>\t\tr = r * <span class=\"hljs-number\">10</span> + ai;<br>\t\tres.<span class=\"hljs-built_in\">push_back</span>(r / b + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t\tr %= b;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; res.<span class=\"hljs-built_in\">front</span>() == <span class=\"hljs-string\">&#x27;0&#x27;</span>) res.<span class=\"hljs-built_in\">erase</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">begin</span>() + <span class=\"hljs-number\">1</span>);<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=1.5>1.5 进制转换</h4>\n\n<blockquote>\n<p>x(a) -&gt; x(10)</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">x_10</span><span class=\"hljs-params\">(string x, <span class=\"hljs-type\">int</span> a)</span></span>&#123;<br>    string res=<span class=\"hljs-string\">&quot;0&quot;</span>, p=<span class=\"hljs-string\">&quot;1&quot;</span>;  <span class=\"hljs-comment\">// 将 a 进制下的 x 转换为 10 进制</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=x.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>; i&gt;=<span class=\"hljs-number\">0</span>; i--)&#123;<br>        <span class=\"hljs-type\">int</span> t; <span class=\"hljs-comment\">// 判断当前位数字是多少</span><br>        <span class=\"hljs-keyword\">if</span>(x[i]&gt;=<span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; x[i]&lt;=<span class=\"hljs-string\">&#x27;9&#x27;</span>) t=x[i]-<span class=\"hljs-string\">&#x27;0&#x27;</span>; <br>        <span class=\"hljs-keyword\">if</span>(x[i]&gt;=<span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; x[i]&lt;=<span class=\"hljs-string\">&#x27;Z&#x27;</span>) t=x[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>+<span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">if</span>(x[i]&gt;=<span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; x[i]&lt;=<span class=\"hljs-string\">&#x27;z&#x27;</span>) t=x[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>+<span class=\"hljs-number\">10</span>;<br>        res=<span class=\"hljs-built_in\">ADD</span>(res, <span class=\"hljs-built_in\">MUL</span>(p, t));<span class=\"hljs-comment\">//res+=t*p; // t*(a^0, a^1, a^2)</span><br>        p=<span class=\"hljs-built_in\">MUL</span>(p, a);            <span class=\"hljs-comment\">//p*=a;     //   (a^0, a^1, a^2)</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>x(10) -&gt; x(a)</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">x_a</span><span class=\"hljs-params\">(string x, <span class=\"hljs-type\">int</span> a)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x==<span class=\"hljs-string\">&quot;0&quot;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span>;<br>    string res; <span class=\"hljs-comment\">// 将 10 进制下的 x 转换为 a 进制</span><br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-string\">&quot;0&quot;</span>)&#123;<br>        <span class=\"hljs-type\">int</span> r;<br>        x=<span class=\"hljs-built_in\">DIV</span>(x, a, r);<br>        <span class=\"hljs-keyword\">if</span>( r&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; r&lt;=<span class=\"hljs-number\">9</span> ) r+=<span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>        <span class=\"hljs-keyword\">else</span> r+=<span class=\"hljs-string\">&#x27;A&#x27;</span><span class=\"hljs-number\">-10</span>;<br>        res+=r;<br>    &#125;<br>    <span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=1.6>1.6 位运算</h4>\n\n<blockquote>\n<p><code>&amp;</code> 按位与 <code>全1为1</code></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0</span>&amp;<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>&amp;<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span>&amp;<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>&amp;<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>|</code> 按位或 <code>一1为1</code></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>^</code> 按位异或 <code>不同为1</code></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0</span>^<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>^<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lowbit</code>  x 的二进制表示中，最低位的 1 的位置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">lowbit</span>(<span class=\"hljs-number\">0b10110000</span>) == <span class=\"hljs-number\">0b00010000</span> == <span class=\"hljs-number\">16</span><br>         ~~~^~~~~<br><span class=\"hljs-built_in\">lowbit</span>(<span class=\"hljs-number\">0b11100100</span>) == <span class=\"hljs-number\">0b00000100</span> == <span class=\"hljs-number\">4</span><br>         ~~~~~^~~ <br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">lowbit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x &amp; -x;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=2>2 数据结构</h3>\n\n\n<h4 id=2.1>2.1 二叉树</h4>\n\n<h4 id=2.2>2.2 栈与队列</h4>\n\n\n<h4 id=2.3>2.3 并查集</h4>\n\n<blockquote>\n<p>基础并查集</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> P[N];   <span class=\"hljs-comment\">// 存放每个数的祖宗</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>&#123;<span class=\"hljs-comment\">// 找x的祖宗结点</span><br>    <span class=\"hljs-keyword\">if</span>(x!=p[x]) p[x]=<span class=\"hljs-built_in\">find</span>(p[x]);<br>    <span class=\"hljs-keyword\">return</span> p[x];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-comment\">/* 初始化 */</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) p[i]=i; <br>    <span class=\"hljs-comment\">/* 合并 */</span><br>    x=<span class=\"hljs-built_in\">find</span>(x), y=<span class=\"hljs-built_in\">find</span>(y);   <span class=\"hljs-comment\">// 找到x和y的祖宗</span><br>    <span class=\"hljs-keyword\">if</span>(x!=y) p[y]=x;        <span class=\"hljs-comment\">// 将y的祖宗合并到x</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=2.4>2.4 线段树与树状数组</h4>\n\n<blockquote>\n<p>树状数组 二叉索引树 强化版前缀和</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">lowbit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x&amp;-x;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> v)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(; i&lt;=n; i+=<span class=\"hljs-built_in\">lowbit</span>(i))<br>        t[i]+=v;    <span class=\"hljs-comment\">// 该点后面所有后驱都需要+v</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span></span>&#123;   <br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// i的前缀和</span><br>    <span class=\"hljs-keyword\">for</span>(; i&gt;=<span class=\"hljs-number\">1</span>; i-=<span class=\"hljs-built_in\">lowbit</span>(i))<br>        res+=t[i];  <span class=\"hljs-comment\">// 累加所有后驱</span><br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-built_in\">add</span>(i, a[i]);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>&#123;  <span class=\"hljs-comment\">// 这种是一个一个的+</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        t[i]+=a[i];<br>        <span class=\"hljs-type\">int</span> j=i+<span class=\"hljs-built_in\">lowbit</span>(i);<br>        <span class=\"hljs-keyword\">if</span>(j&lt;=n) t[j]+=t[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>线段树 不一定正确</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> &#123;<br>    <span class=\"hljs-type\">int</span> l, r;   <span class=\"hljs-comment\">// 左右结点</span><br>    LL sum;    <span class=\"hljs-comment\">// 区间和</span><br>&#125;tr[<span class=\"hljs-number\">4</span> * N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">pushup</span><span class=\"hljs-params\">(node&amp; u, node&amp; l, node&amp; r)</span> </span>&#123;<br>    u.sum = l.sum + r.sum;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">build</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>&#123;<br>    tr[u] = &#123; l,r &#125;;<br>    <span class=\"hljs-keyword\">if</span> (l == r)<br>        tr[u].sum = a[r];<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">build</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, l, mid), <span class=\"hljs-built_in\">build</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, mid + <span class=\"hljs-number\">1</span>, r);<br>        <span class=\"hljs-built_in\">pushup</span>(tr[u], tr[u &lt;&lt; <span class=\"hljs-number\">1</span>], tr[u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>]);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">modify</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> v)</span> </span>&#123;   <span class=\"hljs-comment\">// 单点修改</span><br>    <span class=\"hljs-keyword\">if</span> (tr[u].l == i &amp;&amp; tr[u].r == i)    <span class=\"hljs-comment\">// 找到叶子结点</span><br>        tr[u] = &#123; i,i,v &#125;;              <span class=\"hljs-comment\">// 修改</span><br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (i &lt;= mid) <span class=\"hljs-built_in\">modify</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, i, v);<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">modify</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, i, v);  <span class=\"hljs-comment\">// 不在左边就肯定在右边</span><br>        <span class=\"hljs-built_in\">pushup</span>(tr[u], tr[u &lt;&lt; <span class=\"hljs-number\">1</span>], tr[u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>]);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\">node <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r)<br>        <span class=\"hljs-keyword\">return</span> tr[u];<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (mid &gt;= r)                      <span class=\"hljs-comment\">// tr[l]--------[m]--------tr[r]</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, l, r);    <span class=\"hljs-comment\">//       l----r         </span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mid &lt; l)                  <span class=\"hljs-comment\">// tr[l]--------[m]--------tr[r]</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, l, r);<span class=\"hljs-comment\">//                  l----r</span><br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">auto</span> left = <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, l, r);<br>            <span class=\"hljs-keyword\">auto</span> right = <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, l, r);<br>            node res = &#123; l, r &#125;;<br>            <span class=\"hljs-built_in\">pushup</span>(res, left, right);<br>            <span class=\"hljs-keyword\">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n<h3 id=3>3 图论</h3>\n\n<h4 id=3.1>3.1 DFS与BFS</h4>\n\n<blockquote>\n<p>DFS<br>一个小tips：枚举状态时候，枚举单个点会爆时间，当从行的角度考虑</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 处理当前点u</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u)</span></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>( u满足剪枝条件 )<br>\t\t<span class=\"hljs-keyword\">return</span> ;\t<br>\t<span class=\"hljs-keyword\">if</span>( u&gt;N ) &#123;\t    \t<span class=\"hljs-comment\">// 到达边界</span><br>\t\t<span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">check</span>() )   <span class=\"hljs-comment\">// 如果当前情况合法</span><br>\t\t\t<span class=\"hljs-built_in\">deal</span>();\t\t<span class=\"hljs-comment\">// 输出或者更新最终答案\t\t</span><br>\t\t<span class=\"hljs-keyword\">return</span> ;\t\t<span class=\"hljs-comment\">// 结束</span><br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> i : arr)&#123;\t\t\t\t<span class=\"hljs-comment\">// 显然，当一个点有多个状态，需要全部考虑</span><br>\t\t<span class=\"hljs-keyword\">if</span>( used[i] ) <span class=\"hljs-keyword\">continue</span> ;\t<span class=\"hljs-comment\">// 如果此状态仅可出现一次，那么该点不考虑此状态</span><br>\t\t<br>\t\t<span class=\"hljs-built_in\">change</span>(u, i);\t\t<span class=\"hljs-comment\">// 将 u 点状态设置为 i （如果需要，应当同时考虑下 i 的状态）\t</span><br>\t\t<span class=\"hljs-built_in\">dfs</span>( u++ );\t\t\t<span class=\"hljs-comment\">// 进入下一层。应当注意，这里的下一层是指u进入递归层面的下一层 </span><br>\t\t<span class=\"hljs-built_in\">change</span>(u, row);\t\t<span class=\"hljs-comment\">// 恢复现场。通常情况下，u是直接置0</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">dfs</span>( u++ );\t\t\t\t<span class=\"hljs-comment\">// 部分时候，还需要考虑该点不作处理的情况\t</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>值得一提，STL中的两个全排列函数 <code>next_permutation</code> 和 <code>prev_permutation</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><br><span class=\"hljs-type\">int</span> arr[<span class=\"hljs-number\">3</span>]=&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>&#125;;<br>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// cout</span><br><span class=\"hljs-keyword\">do</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// 2 1 3</span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++)\t\t<span class=\"hljs-comment\">// 2 3 1</span><br>\t\tcout&lt;&lt;arr[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;\t\t<span class=\"hljs-comment\">// 3 1 2</span><br>\tcout&lt;&lt;endl;\t\t\t\t\t<span class=\"hljs-comment\">// 3 2 1 </span><br>&#125;<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">next_permutation</span>(arr, arr+<span class=\"hljs-number\">3</span>));<br><span class=\"hljs-comment\">// 应当注意，next_permutaion是直接在序列上更新下一个序列</span><br><span class=\"hljs-comment\">// 并且是在更新完后再检查是否是排名更靠后的序列，是则返回true，否则返回false</span><br><span class=\"hljs-comment\">// 因此，此时的arr为&#123; 1, 2, 3 &#125;</span><br><br><span class=\"hljs-comment\">// prev_permutation同理</span><br><span class=\"hljs-type\">int</span> brr[<span class=\"hljs-number\">3</span>]=&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>&#125;;<br><br><span class=\"hljs-keyword\">do</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// cout</span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++)      <span class=\"hljs-comment\">// 1 2 3</span><br>\t\tcout&lt;&lt;brr[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;      <span class=\"hljs-comment\">// 1 3 2</span><br>\tcout&lt;&lt;endl;\t\t\t\t\t<span class=\"hljs-comment\">// 1 2 3</span><br>&#125;<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">prev_permutation</span>(brr, brr+<span class=\"hljs-number\">3</span>));<br><span class=\"hljs-comment\">// 此时的brr为&#123; 3, 2, 1 &#125;</span><br><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>BFS</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">BFS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sx, sy)</span></span>&#123;<br>\tqueue&lt;PII&gt; q;<br>\tq.<span class=\"hljs-built_in\">push</span>( &#123;sx, sy&#125; ); <span class=\"hljs-comment\">// 入队</span><br>\tused[sx][sy]=<span class=\"hljs-number\">1</span>;     <span class=\"hljs-comment\">// 标记使用</span><br>\tstep[sx][sy]=<span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// 更新步长</span><br>\t<br>\t<span class=\"hljs-keyword\">while</span>( q.<span class=\"hljs-built_in\">size</span>() )&#123;<br>\t\t<span class=\"hljs-comment\">// 当前步</span><br>\t\t<span class=\"hljs-type\">int</span> x = q.<span class=\"hljs-built_in\">front</span>().fst;<br>\t\t<span class=\"hljs-type\">int</span> y = q.<span class=\"hljs-built_in\">front</span>().sed; <br>\t\t<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>\t\t\t<span class=\"hljs-comment\">// 下一步</span><br>\t\t\t<span class=\"hljs-type\">int</span> nx = x+dxy[i][<span class=\"hljs-number\">0</span>];<br>\t\t\t<span class=\"hljs-type\">int</span> ny = y+dxy[i][<span class=\"hljs-number\">1</span>];<br>\t\t\t<span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">0</span> || nx&gt;=R || ny&lt;<span class=\"hljs-number\">0</span> || ny&gt;=C) <span class=\"hljs-keyword\">continue</span>; \t\t\t\t<span class=\"hljs-comment\">// 检查越界</span><br>\t\t\t<span class=\"hljs-keyword\">if</span>(used[nx][ny]==<span class=\"hljs-number\">1</span> || g[nx][ny]==<span class=\"hljs-string\">&#x27;不能到达的点&#x27;</span>) <span class=\"hljs-keyword\">continue</span>; \t<span class=\"hljs-comment\">// 检查能否到达（此步是否合法）</span><br>\t\t\t<br>\t\t\tq.<span class=\"hljs-built_in\">push</span>( &#123;nx, ny&#125; );        <span class=\"hljs-comment\">// 入队</span><br>\t\t\tused[nx][ny]=<span class=\"hljs-number\">1</span>;            <span class=\"hljs-comment\">// 标记使用</span><br>\t\t\tstep[nx][ny]=step[x][y]+<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 更新步长</span><br><br>\t\t\t<span class=\"hljs-keyword\">if</span>(g[nx][ny]==<span class=\"hljs-string\">&#x27;终点&#x27;</span>) <span class=\"hljs-keyword\">return</span>;<br>\t\t&#125;<br>\t\t<br>\t\tq.<span class=\"hljs-built_in\">pop</span>();<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=3.2>3.2 最短路</h4>\n\n<blockquote>\n<p><code>Dijkstra（非负权边）</code></p>\n<ol>\n<li>将所有点看作未确定最短路</li>\n<li>将起点的dis[s]&#x3D;0，其余置为+∞</li>\n<li>将未确定的点中，选取距离s最近的点进行松弛操作</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;   <span class=\"hljs-comment\">// 点、边</span><br>vector&lt;PII&gt; edge[<span class=\"hljs-number\">100010</span>];   <span class=\"hljs-comment\">// edge[x]=&#123;y,z&#125; x-&gt;y=z</span><br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否已确定最短路</span><br><span class=\"hljs-comment\">// O(mlogm)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-comment\">// fst存dis[i] sed存i</span><br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    <span class=\"hljs-comment\">// 初始化</span><br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 起点入队</span><br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);  <br><br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;  <span class=\"hljs-comment\">// 取最小点</span><br>        heap.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-comment\">// 在出堆的时候判断、确定是否确定最短路</span><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 确定最短路</span><br><br>        <span class=\"hljs-comment\">// 对该点进行松弛操作</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y]&gt;dis[x]+z )&#123;<br>                dis[y]=dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dis[e];  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><code>bellman_ford（万能）</code></p>\n<ol>\n<li>将起点的dis[s]&#x3D;0，其余置为+∞</li>\n<li>将所有边进行松弛操作</li>\n<li>直到某轮迭代中没有执行松弛操作时，退出，或者执行n次</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m, k; <span class=\"hljs-comment\">// 最多经过k条边</span><br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N];  <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">int</span> bkup[N]; <span class=\"hljs-comment\">// 备份，防止串联</span><br><span class=\"hljs-comment\">// O(nm)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">bellman_ford</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    dis[s]=<span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123; <span class=\"hljs-comment\">// 最多迭代 k 次</span><br>        <span class=\"hljs-type\">bool</span> flg=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">memcpy</span>(bkup, dis, <span class=\"hljs-keyword\">sizeof</span> dis);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> x=<span class=\"hljs-number\">1</span>; x&lt;=n; x++)     <span class=\"hljs-comment\">// 遍历所有边</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])  <span class=\"hljs-comment\">// 对每条边进行松弛操作</span><br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; bkup[x] + z)&#123;<br>                dis[y] = bkup[x] + z;<br>                flg=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        <span class=\"hljs-keyword\">if</span>(!flg) <span class=\"hljs-keyword\">break</span>;  <span class=\"hljs-comment\">// 当前没有进行松弛操作</span><br>    &#125;<br>    <span class=\"hljs-comment\">// 因为存在无穷大引出的边发生松弛操作</span><br>    <span class=\"hljs-comment\">// 而图中存在负权边，因此要做个小小的处理</span><br>    <span class=\"hljs-keyword\">if</span>(dis[e]&gt;INF/<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> INF; <br>    <span class=\"hljs-keyword\">return</span> dis[e];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><code>spfa（非负权回路）</code><br>队列优化版 bellman_ford</p>\n<ol>\n<li>将起点的dis[s]&#x3D;0，其余置为+∞</li>\n<li>将被松弛的点加入队列，进行松弛操作<ul>\n<li>通过一个 st[i] 来判断 i 点是否在队列中，防止重复入队</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;<br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否在队列中?</span><br><span class=\"hljs-built_in\">O</span>(nm)<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">spfa</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    queue&lt;<span class=\"hljs-type\">int</span>&gt; q;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// 源点</span><br>    st[s]=<span class=\"hljs-number\">1</span>;    <span class=\"hljs-comment\">// 在队列中</span><br>    q.<span class=\"hljs-built_in\">push</span>(s);  <span class=\"hljs-comment\">// 扔进队列</span><br><br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        st[x]=<span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 不在队列中</span><br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x] + z )&#123;<br>                dis[y] = dis[x] + z;<br>                <span class=\"hljs-keyword\">if</span>(!st[y])&#123; <span class=\"hljs-comment\">// 如果被松弛的点不在队列中</span><br>                    st[y]=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 就压入队列</span><br>                    q.<span class=\"hljs-built_in\">push</span>(y);<br>                &#125;<br>            &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dis[e];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>Floyd（多源最短路）</code></p>\n<ol>\n<li>将自己到达自己的最短路设置为0，其余设置为+∞</li>\n<li>任意两点，都可以经过任意一点，尝试松弛操作</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 注意，此写法省略了边的存储，及直接将边存储到最短路中</span><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> dis[N][N];<br><span class=\"hljs-comment\">// O(n^3)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">flody</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>; k&lt;=n; k++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>                dis[i][j]=<span class=\"hljs-built_in\">min</span>(dis[i][j], dis[i][k]+dis[k][j]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=3.3>3.3 最小生成树</h4>\n\n<blockquote>\n<p><code>Prim 稠密图</code></p>\n<ol>\n<li>地图初始化为+∞</li>\n<li>将所有点到达集合的距离设置为+∞，且标记都不在集合中</li>\n<li>迭代n次，每次将未在集合中且距离集合最近的点加入集合</li>\n<li>通过新进入集合的点，更新所有点距离集合的距离</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> edge[N][N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 每个点到达（最小生成树）集合的最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否已经在集合中</span><br><span class=\"hljs-comment\">// O(n^2+m)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">prim</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);  <span class=\"hljs-comment\">// 初始化每个点到集合的距离为inf</span><br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);       <span class=\"hljs-comment\">// 初始化每个点都未在集合中</span><br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>; k&lt;n; k++)&#123; <span class=\"hljs-comment\">// 迭代 n 次</span><br><br>        <span class=\"hljs-type\">int</span> t=<span class=\"hljs-number\">-1</span>;           <span class=\"hljs-comment\">// 找到未在集合中且距离集合最近的点</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>            <span class=\"hljs-keyword\">if</span>(!st[i] &amp;&amp; (t==<span class=\"hljs-number\">-1</span> || dis[t]&gt;dis[i]))<br>                t=i;<br>        <span class=\"hljs-keyword\">if</span>(k &amp;&amp; dis[t]==INF) <span class=\"hljs-keyword\">return</span> INF;    <span class=\"hljs-comment\">// 孤岛</span><br>        <br>        <span class=\"hljs-keyword\">if</span>(k) res+=dis[t];                  <span class=\"hljs-comment\">// 权值和</span><br>        st[t]=<span class=\"hljs-number\">1</span>;                <span class=\"hljs-comment\">// 进入集合</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-comment\">// 通过该点去更新</span><br>            dis[i]=<span class=\"hljs-built_in\">min</span>(dis[i], edge[t][i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>Kruskal 稀疏图</code></p>\n<ol>\n<li>将所有边从小到大排序</li>\n<li>维护一堆集合，查询两个元素是否属于同一集合，合并俩集合</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> p[N];   <span class=\"hljs-comment\">// 并查集</span><br>pair&lt;<span class=\"hljs-type\">int</span>, PII&gt; edge[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>&#123;  <span class=\"hljs-comment\">// 找x的祖宗</span><br>    <span class=\"hljs-keyword\">if</span>(p[x]!=x) p[x]=<span class=\"hljs-built_in\">find</span>(p[x]);<br>    <span class=\"hljs-keyword\">return</span> p[x];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">kruskal</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">sort</span>(edge+<span class=\"hljs-number\">1</span>, edge+<span class=\"hljs-number\">1</span>+m); <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) p[i]=i;<br>    <span class=\"hljs-comment\">// 排序 初始化并查集</span><br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">0</span>, cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 从小到大枚举所有边</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> a=edge[i].sed.fst;<br>        <span class=\"hljs-type\">int</span> b=edge[i].sed.sed;<br>        <span class=\"hljs-type\">int</span> w=edge[i].fst;<br>        a=<span class=\"hljs-built_in\">find</span>(a), b=<span class=\"hljs-built_in\">find</span>(b);<br>        <span class=\"hljs-keyword\">if</span>(a!=b)&#123;<br>            p[a]=b; <span class=\"hljs-comment\">// 合并</span><br>            res+=w; <span class=\"hljs-comment\">// 权值和</span><br>            cnt++;  <span class=\"hljs-comment\">// 判断孤岛</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(cnt&lt;n<span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">return</span> inf;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=4>4 数学</h3>\n\n<h4 id=4.1>4.1 质（素）数与约数</h4>\n \n<blockquote>\n<p><code>gcd</code> 欧几里得算法（辗转相除法）</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> b ? <span class=\"hljs-built_in\">gcd</span>(b, a%b) : a;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>STL中有个相似的 <code>__gcd(int x, int y)</code></p>\n</blockquote>\n<blockquote>\n<p>裴蜀定理：对于任意整数 a,b 存在一对整数 x,y 满足 ax+by&#x3D;gcd(a,b)<br><code>exgcd</code> 拓展欧几里得算法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">exgcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span> &amp;x, <span class=\"hljs-type\">int</span> &amp;y)</span></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(!b)&#123;<br>\t\tx=<span class=\"hljs-number\">1</span>, y=<span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">return</span> a;<br>\t&#125;<br>\t<span class=\"hljs-type\">int</span> d = <span class=\"hljs-built_in\">exgcd</span>(b, a%b, y, x);<br>\ty -= (a/b)*x;<br>\t<span class=\"hljs-keyword\">return</span> d; <br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>LCD</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span>  <span class=\"hljs-title\">lcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a*b/<span class=\"hljs-built_in\">gcd</span>(a, b);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>快筛素数</code> 先生成(2^16)内的素数 再快判</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">6555</span>], cnt;  <span class=\"hljs-comment\">// 2^16中只有6542个素数</span><br><span class=\"hljs-type\">bool</span> st[<span class=\"hljs-number\">65555</span>];         <span class=\"hljs-comment\">// 生成的时候只用判断这么多个</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (!st[i]) primes[cnt++] = i;              <span class=\"hljs-comment\">// 当前数没被筛过st[i]==0，说明是素数</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; primes[j] &lt;= n / i; j++) &#123;  <span class=\"hljs-comment\">// 确保 第j个质数 和 i 相乘不会爆</span><br>\t\t\tst[primes[j] * i] = <span class=\"hljs-number\">1</span>;                  <span class=\"hljs-comment\">// 被唯一标记过</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (i % primes[j] == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;          <span class=\"hljs-comment\">// 此时primes[j]是i的最小质因子，退出避免重复筛</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_p</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(!st[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-built_in\">make_primes</span>(<span class=\"hljs-number\">65536</span>), st[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span>(x&lt;=<span class=\"hljs-number\">65536</span>) <span class=\"hljs-keyword\">return</span> !st[x];<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; primes[i] &lt;= x/primes[i]; i++) <br>\t\t<span class=\"hljs-keyword\">if</span> (x % primes[i] == <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=4.2>4.2 快速幂</h4>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// a^b%MOD</span><br><span class=\"hljs-function\">LL <span class=\"hljs-title\">quick_pow</span><span class=\"hljs-params\">(LL a, <span class=\"hljs-type\">int</span> b)</span></span>&#123;<br>    LL res=<span class=\"hljs-number\">1</span>%MOD;<br>    <span class=\"hljs-keyword\">for</span>( ; b; b&gt;&gt;=<span class=\"hljs-number\">1</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>) res=<span class=\"hljs-number\">1LL</span>*a*res%MOD; <span class=\"hljs-comment\">// 决定是否相乘</span><br>        a=<span class=\"hljs-number\">1ll</span>*a*a%MOD;             <span class=\"hljs-comment\">// 每个位置上，递推出的二进制位上的值</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=5>5 动态规划</h3>\n\n\n\n\n\n\n\n\n<h3 id=6>6 字符串</h3>\n\n<h4 id=6.1>6.1 KMP</h4>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 主串和模式串</span><br><span class=\"hljs-comment\">// 注意!!!从下标1开始!!!</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">KMP</span><span class=\"hljs-params\">(string s, string p)</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n=s.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>, m=p.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-type\">int</span> ne[<span class=\"hljs-number\">100010</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;; <span class=\"hljs-comment\">// 模式串的next串</span><br>    <span class=\"hljs-comment\">//求ne数组</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>, j = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) &#123;<br>        <span class=\"hljs-keyword\">while</span>(j &amp;&amp; p[i] != p[j + <span class=\"hljs-number\">1</span>]) j = ne[j];<br>        <span class=\"hljs-keyword\">if</span>(p[i] == p[j + <span class=\"hljs-number\">1</span>]) j++;<br>        ne[i] = j;<br>    &#125;<br>    <span class=\"hljs-comment\">//kmp匹配</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>, j = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) &#123;<br>        <span class=\"hljs-keyword\">while</span>(j &amp;&amp; s[i] != p[j + <span class=\"hljs-number\">1</span>]) j = ne[j];<br>        <span class=\"hljs-keyword\">if</span>(s[i] == p[j + <span class=\"hljs-number\">1</span>]) j++;<br>        <span class=\"hljs-keyword\">if</span>(j == m) &#123;<br>            j = ne[j]; <span class=\"hljs-comment\">//当匹配成功时继续往下匹配</span><br>            <span class=\"hljs-comment\">// 你的操作!!!</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=7>7 计算几何</h3>","site":{"data":{}},"wordcount":13416,"more":"<blockquote>\n<p>自用模板</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> GCC optimzie(<span class=\"hljs-string\">&quot;Ofast&quot;</span>, <span class=\"hljs-string\">&quot;inline&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ioio ios::sync_with_stdio(0);cin.tie(0),cout.tie(0)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;map&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">int</span> dxy[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> PI = <span class=\"hljs-built_in\">acos</span>(<span class=\"hljs-number\">-1.0</span>);<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf = <span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MOD = <span class=\"hljs-number\">1e9</span>+<span class=\"hljs-number\">7</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">2e5</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-comment\">// ********************************************************</span><br><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> a[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <br>    <br>    <br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    ioio;<br>    <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;in.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, stdin); <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;out.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>, stdout); <br>    <span class=\"hljs-comment\">//int T; cin&gt;&gt;T; while(T--)</span><br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<ol>\n<li><p><a href=\"#1\">基础语法</a><br> 1.1 <a href=\"#1.1\">排序*</a><br> 1.2 <a href=\"#1.2\">二分</a><br> 1.3 <a href=\"#1.3\">双指针</a><br> 1.4 <a href=\"#1.4\">高精度</a><br> 1.5 <a href=\"#1.5\">进制转换</a><br> 1.6 <a href=\"#1.6\">位运算</a></p>\n</li>\n<li><p><a href=\"#2\">数据结构</a><br> 2.1 <a href=\"#2.1\">二叉树</a><br> 2.2 <a href=\"#2.2\">栈与队列</a><br> 2.3 <a href=\"#2.3\">并查集</a><br> 2.4 <a href=\"#2.4\">线段树与树状数组*</a></p>\n</li>\n<li><p><a href=\"#3\">图论</a><br> 3.1 <a href=\"#3.1\">DFS与BFS</a><br> 3.2 <a href=\"#3.2\">最短路</a><br> 3.3 <a href=\"#3.3\">最小生成（支撑）树</a></p>\n</li>\n<li><p><a href=\"#4\">数学</a><br> 4.1 <a href=\"#4.1\">质（素）数与约数</a><br> 4.2 <a href=\"#4.2\">快速幂</a></p>\n</li>\n<li><p><a href=\"#5\">动态规划</a></p>\n</li>\n<li><p><a href=\"#6\">字符串</a><br> 6.1 <a href=\"#6.1\">KMP</a><br> 6.2 <a href=\"#6.2\">后缀数组</a> </p>\n</li>\n<li><p><a href=\"#7\">计算几何</a></p>\n</li>\n<li><p><a href=\"#8\">其他</a></p>\n</li>\n</ol>\n<h3 id=1>1 基础算法</h3>\n\n<h4 id=1.1>1.1 排序</h4>\n\n<blockquote>\n<p><code>sort自定义排序</code><br>对于 a b俩元素，如果返回T，则a在b前面，反之b在a前面</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a&lt;b) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-built_in\">sort</span>(a.<span class=\"hljs-built_in\">begin</span>(), a.<span class=\"hljs-built_in\">end</span>(), cmp);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>快速排序</code><br>x是每轮的基准值</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Cswap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125; <span class=\"hljs-comment\">// C环境下使用的swap函数</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">qsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-type\">int</span> i=l<span class=\"hljs-number\">-1</span>, j=r+<span class=\"hljs-number\">1</span>, x=arr[l+r&gt;&gt;<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)&#123; <span class=\"hljs-comment\">// 基准值比较，左右交换</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">Cswap</span>(&amp;arr[i], &amp;arr[j]);<br>    &#125;<br>    <span class=\"hljs-built_in\">qsort</span>(arr, l, j), <span class=\"hljs-built_in\">qsort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br><span class=\"hljs-comment\">// a[1]-a[n]排序</span><br><span class=\"hljs-built_in\">sort</span>(a, <span class=\"hljs-number\">1</span>, n);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>归并排序</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><br></code></pre></td></tr></table></figure>\n\n<h4 id=1.2>1.2 二分</h4>\n\n<blockquote>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &gt;=x的第一个元素</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">bsearch_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)&#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">check</span>(mid)) r = mid;<br>        <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &lt;=x的最后一个元素</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">bsearch_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)&#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r + <span class=\"hljs-number\">1</span> &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">check</span>(mid)) l = mid;<br>        <span class=\"hljs-keyword\">else</span> r = mid - <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为何不用STL？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &gt;=x的第一个元素</span><br><span class=\"hljs-keyword\">auto</span> i=<span class=\"hljs-built_in\">lower_bound</span>(a.<span class=\"hljs-built_in\">begin</span>(), a.<span class=\"hljs-built_in\">end</span>(), x);<br>*i;          <span class=\"hljs-comment\">// 值</span><br>i-a.<span class=\"hljs-built_in\">begin</span>(); <span class=\"hljs-comment\">// 位置</span><br><span class=\"hljs-comment\">// 显然 &lt;x 的最后一个元素是</span><br>i-a.<span class=\"hljs-built_in\">begin</span>()<span class=\"hljs-number\">-1</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// &gt;x的第一个元素</span><br><span class=\"hljs-keyword\">auto</span> i=<span class=\"hljs-built_in\">upper_bound</span>(a.<span class=\"hljs-built_in\">begin</span>(), a.<span class=\"hljs-built_in\">end</span>(), x);<br><span class=\"hljs-comment\">// 显然 &lt;=x 的最后一个元素是</span><br>i-a.<span class=\"hljs-built_in\">begin</span>()<span class=\"hljs-number\">-1</span>;<br></code></pre></td></tr></table></figure>\n<h4 id=1.3>1.3 双指针</h4>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 左指针 右指针</span><br><span class=\"hljs-type\">int</span> l=<span class=\"hljs-number\">1</span>, r=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-comment\">// 指针不越界，部分情况下考虑左指针优先右指针</span><br><span class=\"hljs-keyword\">while</span>( r&lt;=n &amp;&amp; l&lt;=n)&#123;<br>\t<span class=\"hljs-comment\">// 右指针右移</span><br>\t<span class=\"hljs-keyword\">while</span>( r&lt;=n &amp;&amp; 条件) r++;<br>\t&#123;...&#125; <span class=\"hljs-comment\">// 更新答案巴拉巴拉</span><br>\t<span class=\"hljs-comment\">// 左指针右移</span><br>\tl++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=1.4>1.4 高精度</h4>\n\n<blockquote>\n<p>高精度加法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">ADD</span><span class=\"hljs-params\">(string A, string B)</span> </span>&#123;  <span class=\"hljs-comment\">// 正序输入 正序输出</span><br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>()); <span class=\"hljs-built_in\">reverse</span>(B.<span class=\"hljs-built_in\">begin</span>(), B.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\t<span class=\"hljs-type\">int</span> add = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>() || i &lt; B.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; A.<span class=\"hljs-built_in\">size</span>()) add += A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) add += B[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<span class=\"hljs-comment\">// 取值</span><br>\t\tres.<span class=\"hljs-built_in\">push_back</span>(add % <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;0&#x27;</span>);      <span class=\"hljs-comment\">// +</span><br>\t\tadd /= <span class=\"hljs-number\">10</span>;                          <span class=\"hljs-comment\">// 进位</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> (add) res.<span class=\"hljs-built_in\">push_back</span>(add + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t<span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高精度减法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">SUB</span><span class=\"hljs-params\">(string&amp; A, string&amp; B)</span> </span>&#123;  <span class=\"hljs-comment\">// 正序输入 正序输出 自带负号</span><br>\t<span class=\"hljs-keyword\">if</span> (!(A.<span class=\"hljs-built_in\">size</span>() &gt; B.<span class=\"hljs-built_in\">size</span>() || (A.<span class=\"hljs-built_in\">size</span>() == B.<span class=\"hljs-built_in\">size</span>() &amp;&amp; A &gt;= B)))<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + <span class=\"hljs-built_in\">SUB</span>(B, A);<br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>()); <span class=\"hljs-built_in\">reverse</span>(B.<span class=\"hljs-built_in\">begin</span>(), B.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, t = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i++) &#123;<br>\t\t<span class=\"hljs-type\">int</span> ai = A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>, bi = <span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) bi = B[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>\t\tt = ai - t;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; B.<span class=\"hljs-built_in\">size</span>()) t -= bi;<br>\t\tres.<span class=\"hljs-built_in\">push_back</span>((t + <span class=\"hljs-number\">10</span>) % <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t\t<span class=\"hljs-keyword\">if</span> (t &lt; <span class=\"hljs-number\">0</span>) t = <span class=\"hljs-number\">1</span>;<br>\t\t<span class=\"hljs-keyword\">else</span> t = <span class=\"hljs-number\">0</span>;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; res.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-string\">&#x27;0&#x27;</span>) res.<span class=\"hljs-built_in\">pop_back</span>();<br>\t<span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高精度乘法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">MUL</span><span class=\"hljs-params\">(string A, <span class=\"hljs-type\">int</span> b)</span> </span>&#123; <span class=\"hljs-comment\">// 顺序输入 顺序输出</span><br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\t<span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>() || t; i++) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (i &lt; A.<span class=\"hljs-built_in\">size</span>()) t += (A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>) * b;<br>\t\tres.<span class=\"hljs-built_in\">push_back</span>(t % <span class=\"hljs-number\">10</span> + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t\tt /= <span class=\"hljs-number\">10</span>;<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 去前导0</span><br>\t<span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; res.<span class=\"hljs-built_in\">back</span>() == <span class=\"hljs-string\">&#x27;0&#x27;</span>) res.<span class=\"hljs-built_in\">pop_back</span>();<br>\t<span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>高精度除法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">DIV</span><span class=\"hljs-params\">(string A, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span>&amp; r)</span> </span>&#123;  <span class=\"hljs-comment\">// 正序输入 正序输出</span><br>\t<span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;ERROR&quot;</span>;         <span class=\"hljs-comment\">// A / b = res ... r </span><br>\t<span class=\"hljs-built_in\">reverse</span>(A.<span class=\"hljs-built_in\">begin</span>(), A.<span class=\"hljs-built_in\">end</span>());<br>\tstring res;<br>\tr = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = A.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) &#123;<br>\t\t<span class=\"hljs-type\">int</span> ai = A[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>\t\tr = r * <span class=\"hljs-number\">10</span> + ai;<br>\t\tres.<span class=\"hljs-built_in\">push_back</span>(r / b + <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>\t\tr %= b;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">while</span> (res.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; res.<span class=\"hljs-built_in\">front</span>() == <span class=\"hljs-string\">&#x27;0&#x27;</span>) res.<span class=\"hljs-built_in\">erase</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">begin</span>() + <span class=\"hljs-number\">1</span>);<br>\t<span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=1.5>1.5 进制转换</h4>\n\n<blockquote>\n<p>x(a) -&gt; x(10)</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">x_10</span><span class=\"hljs-params\">(string x, <span class=\"hljs-type\">int</span> a)</span></span>&#123;<br>    string res=<span class=\"hljs-string\">&quot;0&quot;</span>, p=<span class=\"hljs-string\">&quot;1&quot;</span>;  <span class=\"hljs-comment\">// 将 a 进制下的 x 转换为 10 进制</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=x.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>; i&gt;=<span class=\"hljs-number\">0</span>; i--)&#123;<br>        <span class=\"hljs-type\">int</span> t; <span class=\"hljs-comment\">// 判断当前位数字是多少</span><br>        <span class=\"hljs-keyword\">if</span>(x[i]&gt;=<span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; x[i]&lt;=<span class=\"hljs-string\">&#x27;9&#x27;</span>) t=x[i]-<span class=\"hljs-string\">&#x27;0&#x27;</span>; <br>        <span class=\"hljs-keyword\">if</span>(x[i]&gt;=<span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; x[i]&lt;=<span class=\"hljs-string\">&#x27;Z&#x27;</span>) t=x[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>+<span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">if</span>(x[i]&gt;=<span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; x[i]&lt;=<span class=\"hljs-string\">&#x27;z&#x27;</span>) t=x[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>+<span class=\"hljs-number\">10</span>;<br>        res=<span class=\"hljs-built_in\">ADD</span>(res, <span class=\"hljs-built_in\">MUL</span>(p, t));<span class=\"hljs-comment\">//res+=t*p; // t*(a^0, a^1, a^2)</span><br>        p=<span class=\"hljs-built_in\">MUL</span>(p, a);            <span class=\"hljs-comment\">//p*=a;     //   (a^0, a^1, a^2)</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>x(10) -&gt; x(a)</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\">string <span class=\"hljs-title\">x_a</span><span class=\"hljs-params\">(string x, <span class=\"hljs-type\">int</span> a)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x==<span class=\"hljs-string\">&quot;0&quot;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span>;<br>    string res; <span class=\"hljs-comment\">// 将 10 进制下的 x 转换为 a 进制</span><br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-string\">&quot;0&quot;</span>)&#123;<br>        <span class=\"hljs-type\">int</span> r;<br>        x=<span class=\"hljs-built_in\">DIV</span>(x, a, r);<br>        <span class=\"hljs-keyword\">if</span>( r&gt;=<span class=\"hljs-number\">0</span> &amp;&amp; r&lt;=<span class=\"hljs-number\">9</span> ) r+=<span class=\"hljs-string\">&#x27;0&#x27;</span>;<br>        <span class=\"hljs-keyword\">else</span> r+=<span class=\"hljs-string\">&#x27;A&#x27;</span><span class=\"hljs-number\">-10</span>;<br>        res+=r;<br>    &#125;<br>    <span class=\"hljs-built_in\">reverse</span>(res.<span class=\"hljs-built_in\">begin</span>(), res.<span class=\"hljs-built_in\">end</span>());<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=1.6>1.6 位运算</h4>\n\n<blockquote>\n<p><code>&amp;</code> 按位与 <code>全1为1</code></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0</span>&amp;<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>&amp;<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span><br><span class=\"hljs-number\">0</span>&amp;<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>&amp;<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>|</code> 按位或 <code>一1为1</code></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>|<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>^</code> 按位异或 <code>不同为1</code></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-number\">0</span>^<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">0</span>=<span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span>^<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">1</span>   <span class=\"hljs-number\">1</span>^<span class=\"hljs-number\">1</span>=<span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>lowbit</code>  x 的二进制表示中，最低位的 1 的位置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">lowbit</span>(<span class=\"hljs-number\">0b10110000</span>) == <span class=\"hljs-number\">0b00010000</span> == <span class=\"hljs-number\">16</span><br>         ~~~^~~~~<br><span class=\"hljs-built_in\">lowbit</span>(<span class=\"hljs-number\">0b11100100</span>) == <span class=\"hljs-number\">0b00000100</span> == <span class=\"hljs-number\">4</span><br>         ~~~~~^~~ <br></code></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">lowbit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x &amp; -x;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=2>2 数据结构</h3>\n\n\n<h4 id=2.1>2.1 二叉树</h4>\n\n<h4 id=2.2>2.2 栈与队列</h4>\n\n\n<h4 id=2.3>2.3 并查集</h4>\n\n<blockquote>\n<p>基础并查集</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> P[N];   <span class=\"hljs-comment\">// 存放每个数的祖宗</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>&#123;<span class=\"hljs-comment\">// 找x的祖宗结点</span><br>    <span class=\"hljs-keyword\">if</span>(x!=p[x]) p[x]=<span class=\"hljs-built_in\">find</span>(p[x]);<br>    <span class=\"hljs-keyword\">return</span> p[x];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-comment\">/* 初始化 */</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) p[i]=i; <br>    <span class=\"hljs-comment\">/* 合并 */</span><br>    x=<span class=\"hljs-built_in\">find</span>(x), y=<span class=\"hljs-built_in\">find</span>(y);   <span class=\"hljs-comment\">// 找到x和y的祖宗</span><br>    <span class=\"hljs-keyword\">if</span>(x!=y) p[y]=x;        <span class=\"hljs-comment\">// 将y的祖宗合并到x</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=2.4>2.4 线段树与树状数组</h4>\n\n<blockquote>\n<p>树状数组 二叉索引树 强化版前缀和</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">lowbit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> x&amp;-x;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> v)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(; i&lt;=n; i+=<span class=\"hljs-built_in\">lowbit</span>(i))<br>        t[i]+=v;    <span class=\"hljs-comment\">// 该点后面所有后驱都需要+v</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span></span>&#123;   <br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">// i的前缀和</span><br>    <span class=\"hljs-keyword\">for</span>(; i&gt;=<span class=\"hljs-number\">1</span>; i-=<span class=\"hljs-built_in\">lowbit</span>(i))<br>        res+=t[i];  <span class=\"hljs-comment\">// 累加所有后驱</span><br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-built_in\">add</span>(i, a[i]);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>&#123;  <span class=\"hljs-comment\">// 这种是一个一个的+</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        t[i]+=a[i];<br>        <span class=\"hljs-type\">int</span> j=i+<span class=\"hljs-built_in\">lowbit</span>(i);<br>        <span class=\"hljs-keyword\">if</span>(j&lt;=n) t[j]+=t[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>线段树 不一定正确</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> &#123;<br>    <span class=\"hljs-type\">int</span> l, r;   <span class=\"hljs-comment\">// 左右结点</span><br>    LL sum;    <span class=\"hljs-comment\">// 区间和</span><br>&#125;tr[<span class=\"hljs-number\">4</span> * N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">pushup</span><span class=\"hljs-params\">(node&amp; u, node&amp; l, node&amp; r)</span> </span>&#123;<br>    u.sum = l.sum + r.sum;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">build</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>&#123;<br>    tr[u] = &#123; l,r &#125;;<br>    <span class=\"hljs-keyword\">if</span> (l == r)<br>        tr[u].sum = a[r];<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">build</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, l, mid), <span class=\"hljs-built_in\">build</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, mid + <span class=\"hljs-number\">1</span>, r);<br>        <span class=\"hljs-built_in\">pushup</span>(tr[u], tr[u &lt;&lt; <span class=\"hljs-number\">1</span>], tr[u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>]);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">modify</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> v)</span> </span>&#123;   <span class=\"hljs-comment\">// 单点修改</span><br>    <span class=\"hljs-keyword\">if</span> (tr[u].l == i &amp;&amp; tr[u].r == i)    <span class=\"hljs-comment\">// 找到叶子结点</span><br>        tr[u] = &#123; i,i,v &#125;;              <span class=\"hljs-comment\">// 修改</span><br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (i &lt;= mid) <span class=\"hljs-built_in\">modify</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, i, v);<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">modify</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, i, v);  <span class=\"hljs-comment\">// 不在左边就肯定在右边</span><br>        <span class=\"hljs-built_in\">pushup</span>(tr[u], tr[u &lt;&lt; <span class=\"hljs-number\">1</span>], tr[u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>]);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\">node <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &lt;= tr[u].l &amp;&amp; tr[u].r &lt;= r)<br>        <span class=\"hljs-keyword\">return</span> tr[u];<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (mid &gt;= r)                      <span class=\"hljs-comment\">// tr[l]--------[m]--------tr[r]</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, l, r);    <span class=\"hljs-comment\">//       l----r         </span><br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mid &lt; l)                  <span class=\"hljs-comment\">// tr[l]--------[m]--------tr[r]</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, l, r);<span class=\"hljs-comment\">//                  l----r</span><br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">auto</span> left = <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span>, l, r);<br>            <span class=\"hljs-keyword\">auto</span> right = <span class=\"hljs-built_in\">query</span>(u &lt;&lt; <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">1</span>, l, r);<br>            node res = &#123; l, r &#125;;<br>            <span class=\"hljs-built_in\">pushup</span>(res, left, right);<br>            <span class=\"hljs-keyword\">return</span> res;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n<h3 id=3>3 图论</h3>\n\n<h4 id=3.1>3.1 DFS与BFS</h4>\n\n<blockquote>\n<p>DFS<br>一个小tips：枚举状态时候，枚举单个点会爆时间，当从行的角度考虑</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 处理当前点u</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u)</span></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>( u满足剪枝条件 )<br>\t\t<span class=\"hljs-keyword\">return</span> ;\t<br>\t<span class=\"hljs-keyword\">if</span>( u&gt;N ) &#123;\t    \t<span class=\"hljs-comment\">// 到达边界</span><br>\t\t<span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">check</span>() )   <span class=\"hljs-comment\">// 如果当前情况合法</span><br>\t\t\t<span class=\"hljs-built_in\">deal</span>();\t\t<span class=\"hljs-comment\">// 输出或者更新最终答案\t\t</span><br>\t\t<span class=\"hljs-keyword\">return</span> ;\t\t<span class=\"hljs-comment\">// 结束</span><br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> i : arr)&#123;\t\t\t\t<span class=\"hljs-comment\">// 显然，当一个点有多个状态，需要全部考虑</span><br>\t\t<span class=\"hljs-keyword\">if</span>( used[i] ) <span class=\"hljs-keyword\">continue</span> ;\t<span class=\"hljs-comment\">// 如果此状态仅可出现一次，那么该点不考虑此状态</span><br>\t\t<br>\t\t<span class=\"hljs-built_in\">change</span>(u, i);\t\t<span class=\"hljs-comment\">// 将 u 点状态设置为 i （如果需要，应当同时考虑下 i 的状态）\t</span><br>\t\t<span class=\"hljs-built_in\">dfs</span>( u++ );\t\t\t<span class=\"hljs-comment\">// 进入下一层。应当注意，这里的下一层是指u进入递归层面的下一层 </span><br>\t\t<span class=\"hljs-built_in\">change</span>(u, row);\t\t<span class=\"hljs-comment\">// 恢复现场。通常情况下，u是直接置0</span><br>\t&#125;<br>\t<span class=\"hljs-built_in\">dfs</span>( u++ );\t\t\t\t<span class=\"hljs-comment\">// 部分时候，还需要考虑该点不作处理的情况\t</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>值得一提，STL中的两个全排列函数 <code>next_permutation</code> 和 <code>prev_permutation</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><br><span class=\"hljs-type\">int</span> arr[<span class=\"hljs-number\">3</span>]=&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>&#125;;<br>\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// cout</span><br><span class=\"hljs-keyword\">do</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// 2 1 3</span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++)\t\t<span class=\"hljs-comment\">// 2 3 1</span><br>\t\tcout&lt;&lt;arr[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;\t\t<span class=\"hljs-comment\">// 3 1 2</span><br>\tcout&lt;&lt;endl;\t\t\t\t\t<span class=\"hljs-comment\">// 3 2 1 </span><br>&#125;<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">next_permutation</span>(arr, arr+<span class=\"hljs-number\">3</span>));<br><span class=\"hljs-comment\">// 应当注意，next_permutaion是直接在序列上更新下一个序列</span><br><span class=\"hljs-comment\">// 并且是在更新完后再检查是否是排名更靠后的序列，是则返回true，否则返回false</span><br><span class=\"hljs-comment\">// 因此，此时的arr为&#123; 1, 2, 3 &#125;</span><br><br><span class=\"hljs-comment\">// prev_permutation同理</span><br><span class=\"hljs-type\">int</span> brr[<span class=\"hljs-number\">3</span>]=&#123;<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>&#125;;<br><br><span class=\"hljs-keyword\">do</span>&#123;\t\t\t\t\t\t\t\t<span class=\"hljs-comment\">// cout</span><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++)      <span class=\"hljs-comment\">// 1 2 3</span><br>\t\tcout&lt;&lt;brr[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;      <span class=\"hljs-comment\">// 1 3 2</span><br>\tcout&lt;&lt;endl;\t\t\t\t\t<span class=\"hljs-comment\">// 1 2 3</span><br>&#125;<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">prev_permutation</span>(brr, brr+<span class=\"hljs-number\">3</span>));<br><span class=\"hljs-comment\">// 此时的brr为&#123; 3, 2, 1 &#125;</span><br><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>BFS</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">BFS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sx, sy)</span></span>&#123;<br>\tqueue&lt;PII&gt; q;<br>\tq.<span class=\"hljs-built_in\">push</span>( &#123;sx, sy&#125; ); <span class=\"hljs-comment\">// 入队</span><br>\tused[sx][sy]=<span class=\"hljs-number\">1</span>;     <span class=\"hljs-comment\">// 标记使用</span><br>\tstep[sx][sy]=<span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// 更新步长</span><br>\t<br>\t<span class=\"hljs-keyword\">while</span>( q.<span class=\"hljs-built_in\">size</span>() )&#123;<br>\t\t<span class=\"hljs-comment\">// 当前步</span><br>\t\t<span class=\"hljs-type\">int</span> x = q.<span class=\"hljs-built_in\">front</span>().fst;<br>\t\t<span class=\"hljs-type\">int</span> y = q.<span class=\"hljs-built_in\">front</span>().sed; <br>\t\t<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>\t\t\t<span class=\"hljs-comment\">// 下一步</span><br>\t\t\t<span class=\"hljs-type\">int</span> nx = x+dxy[i][<span class=\"hljs-number\">0</span>];<br>\t\t\t<span class=\"hljs-type\">int</span> ny = y+dxy[i][<span class=\"hljs-number\">1</span>];<br>\t\t\t<span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">0</span> || nx&gt;=R || ny&lt;<span class=\"hljs-number\">0</span> || ny&gt;=C) <span class=\"hljs-keyword\">continue</span>; \t\t\t\t<span class=\"hljs-comment\">// 检查越界</span><br>\t\t\t<span class=\"hljs-keyword\">if</span>(used[nx][ny]==<span class=\"hljs-number\">1</span> || g[nx][ny]==<span class=\"hljs-string\">&#x27;不能到达的点&#x27;</span>) <span class=\"hljs-keyword\">continue</span>; \t<span class=\"hljs-comment\">// 检查能否到达（此步是否合法）</span><br>\t\t\t<br>\t\t\tq.<span class=\"hljs-built_in\">push</span>( &#123;nx, ny&#125; );        <span class=\"hljs-comment\">// 入队</span><br>\t\t\tused[nx][ny]=<span class=\"hljs-number\">1</span>;            <span class=\"hljs-comment\">// 标记使用</span><br>\t\t\tstep[nx][ny]=step[x][y]+<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 更新步长</span><br><br>\t\t\t<span class=\"hljs-keyword\">if</span>(g[nx][ny]==<span class=\"hljs-string\">&#x27;终点&#x27;</span>) <span class=\"hljs-keyword\">return</span>;<br>\t\t&#125;<br>\t\t<br>\t\tq.<span class=\"hljs-built_in\">pop</span>();<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=3.2>3.2 最短路</h4>\n\n<blockquote>\n<p><code>Dijkstra（非负权边）</code></p>\n<ol>\n<li>将所有点看作未确定最短路</li>\n<li>将起点的dis[s]&#x3D;0，其余置为+∞</li>\n<li>将未确定的点中，选取距离s最近的点进行松弛操作</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;   <span class=\"hljs-comment\">// 点、边</span><br>vector&lt;PII&gt; edge[<span class=\"hljs-number\">100010</span>];   <span class=\"hljs-comment\">// edge[x]=&#123;y,z&#125; x-&gt;y=z</span><br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否已确定最短路</span><br><span class=\"hljs-comment\">// O(mlogm)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-comment\">// fst存dis[i] sed存i</span><br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    <span class=\"hljs-comment\">// 初始化</span><br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 起点入队</span><br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);  <br><br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;  <span class=\"hljs-comment\">// 取最小点</span><br>        heap.<span class=\"hljs-built_in\">pop</span>();<br>        <span class=\"hljs-comment\">// 在出堆的时候判断、确定是否确定最短路</span><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 确定最短路</span><br><br>        <span class=\"hljs-comment\">// 对该点进行松弛操作</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y]&gt;dis[x]+z )&#123;<br>                dis[y]=dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dis[e];  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><code>bellman_ford（万能）</code></p>\n<ol>\n<li>将起点的dis[s]&#x3D;0，其余置为+∞</li>\n<li>将所有边进行松弛操作</li>\n<li>直到某轮迭代中没有执行松弛操作时，退出，或者执行n次</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m, k; <span class=\"hljs-comment\">// 最多经过k条边</span><br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N];  <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">int</span> bkup[N]; <span class=\"hljs-comment\">// 备份，防止串联</span><br><span class=\"hljs-comment\">// O(nm)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">bellman_ford</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    dis[s]=<span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123; <span class=\"hljs-comment\">// 最多迭代 k 次</span><br>        <span class=\"hljs-type\">bool</span> flg=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">memcpy</span>(bkup, dis, <span class=\"hljs-keyword\">sizeof</span> dis);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> x=<span class=\"hljs-number\">1</span>; x&lt;=n; x++)     <span class=\"hljs-comment\">// 遍历所有边</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])  <span class=\"hljs-comment\">// 对每条边进行松弛操作</span><br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; bkup[x] + z)&#123;<br>                dis[y] = bkup[x] + z;<br>                flg=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        <span class=\"hljs-keyword\">if</span>(!flg) <span class=\"hljs-keyword\">break</span>;  <span class=\"hljs-comment\">// 当前没有进行松弛操作</span><br>    &#125;<br>    <span class=\"hljs-comment\">// 因为存在无穷大引出的边发生松弛操作</span><br>    <span class=\"hljs-comment\">// 而图中存在负权边，因此要做个小小的处理</span><br>    <span class=\"hljs-keyword\">if</span>(dis[e]&gt;INF/<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> INF; <br>    <span class=\"hljs-keyword\">return</span> dis[e];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p><code>spfa（非负权回路）</code><br>队列优化版 bellman_ford</p>\n<ol>\n<li>将起点的dis[s]&#x3D;0，其余置为+∞</li>\n<li>将被松弛的点加入队列，进行松弛操作<ul>\n<li>通过一个 st[i] 来判断 i 点是否在队列中，防止重复入队</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;<br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否在队列中?</span><br><span class=\"hljs-built_in\">O</span>(nm)<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">spfa</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    queue&lt;<span class=\"hljs-type\">int</span>&gt; q;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">// 源点</span><br>    st[s]=<span class=\"hljs-number\">1</span>;    <span class=\"hljs-comment\">// 在队列中</span><br>    q.<span class=\"hljs-built_in\">push</span>(s);  <span class=\"hljs-comment\">// 扔进队列</span><br><br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        st[x]=<span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 不在队列中</span><br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x] + z )&#123;<br>                dis[y] = dis[x] + z;<br>                <span class=\"hljs-keyword\">if</span>(!st[y])&#123; <span class=\"hljs-comment\">// 如果被松弛的点不在队列中</span><br>                    st[y]=<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">// 就压入队列</span><br>                    q.<span class=\"hljs-built_in\">push</span>(y);<br>                &#125;<br>            &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> dis[e];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>Floyd（多源最短路）</code></p>\n<ol>\n<li>将自己到达自己的最短路设置为0，其余设置为+∞</li>\n<li>任意两点，都可以经过任意一点，尝试松弛操作</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 注意，此写法省略了边的存储，及直接将边存储到最短路中</span><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> dis[N][N];<br><span class=\"hljs-comment\">// O(n^3)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">flody</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>; k&lt;=n; k++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>                dis[i][j]=<span class=\"hljs-built_in\">min</span>(dis[i][j], dis[i][k]+dis[k][j]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=3.3>3.3 最小生成树</h4>\n\n<blockquote>\n<p><code>Prim 稠密图</code></p>\n<ol>\n<li>地图初始化为+∞</li>\n<li>将所有点到达集合的距离设置为+∞，且标记都不在集合中</li>\n<li>迭代n次，每次将未在集合中且距离集合最近的点加入集合</li>\n<li>通过新进入集合的点，更新所有点距离集合的距离</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> edge[N][N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 每个点到达（最小生成树）集合的最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否已经在集合中</span><br><span class=\"hljs-comment\">// O(n^2+m)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">prim</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);  <span class=\"hljs-comment\">// 初始化每个点到集合的距离为inf</span><br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);       <span class=\"hljs-comment\">// 初始化每个点都未在集合中</span><br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>; k&lt;n; k++)&#123; <span class=\"hljs-comment\">// 迭代 n 次</span><br><br>        <span class=\"hljs-type\">int</span> t=<span class=\"hljs-number\">-1</span>;           <span class=\"hljs-comment\">// 找到未在集合中且距离集合最近的点</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>            <span class=\"hljs-keyword\">if</span>(!st[i] &amp;&amp; (t==<span class=\"hljs-number\">-1</span> || dis[t]&gt;dis[i]))<br>                t=i;<br>        <span class=\"hljs-keyword\">if</span>(k &amp;&amp; dis[t]==INF) <span class=\"hljs-keyword\">return</span> INF;    <span class=\"hljs-comment\">// 孤岛</span><br>        <br>        <span class=\"hljs-keyword\">if</span>(k) res+=dis[t];                  <span class=\"hljs-comment\">// 权值和</span><br>        st[t]=<span class=\"hljs-number\">1</span>;                <span class=\"hljs-comment\">// 进入集合</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-comment\">// 通过该点去更新</span><br>            dis[i]=<span class=\"hljs-built_in\">min</span>(dis[i], edge[t][i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>Kruskal 稀疏图</code></p>\n<ol>\n<li>将所有边从小到大排序</li>\n<li>维护一堆集合，查询两个元素是否属于同一集合，合并俩集合</li>\n</ol>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> p[N];   <span class=\"hljs-comment\">// 并查集</span><br>pair&lt;<span class=\"hljs-type\">int</span>, PII&gt; edge[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span>&#123;  <span class=\"hljs-comment\">// 找x的祖宗</span><br>    <span class=\"hljs-keyword\">if</span>(p[x]!=x) p[x]=<span class=\"hljs-built_in\">find</span>(p[x]);<br>    <span class=\"hljs-keyword\">return</span> p[x];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">kruskal</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">sort</span>(edge+<span class=\"hljs-number\">1</span>, edge+<span class=\"hljs-number\">1</span>+m); <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) p[i]=i;<br>    <span class=\"hljs-comment\">// 排序 初始化并查集</span><br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">0</span>, cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">// 从小到大枚举所有边</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> a=edge[i].sed.fst;<br>        <span class=\"hljs-type\">int</span> b=edge[i].sed.sed;<br>        <span class=\"hljs-type\">int</span> w=edge[i].fst;<br>        a=<span class=\"hljs-built_in\">find</span>(a), b=<span class=\"hljs-built_in\">find</span>(b);<br>        <span class=\"hljs-keyword\">if</span>(a!=b)&#123;<br>            p[a]=b; <span class=\"hljs-comment\">// 合并</span><br>            res+=w; <span class=\"hljs-comment\">// 权值和</span><br>            cnt++;  <span class=\"hljs-comment\">// 判断孤岛</span><br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(cnt&lt;n<span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">return</span> inf;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=4>4 数学</h3>\n\n<h4 id=4.1>4.1 质（素）数与约数</h4>\n \n<blockquote>\n<p><code>gcd</code> 欧几里得算法（辗转相除法）</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> b ? <span class=\"hljs-built_in\">gcd</span>(b, a%b) : a;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>STL中有个相似的 <code>__gcd(int x, int y)</code></p>\n</blockquote>\n<blockquote>\n<p>裴蜀定理：对于任意整数 a,b 存在一对整数 x,y 满足 ax+by&#x3D;gcd(a,b)<br><code>exgcd</code> 拓展欧几里得算法</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">exgcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">int</span> &amp;x, <span class=\"hljs-type\">int</span> &amp;y)</span></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(!b)&#123;<br>\t\tx=<span class=\"hljs-number\">1</span>, y=<span class=\"hljs-number\">0</span>;<br>\t\t<span class=\"hljs-keyword\">return</span> a;<br>\t&#125;<br>\t<span class=\"hljs-type\">int</span> d = <span class=\"hljs-built_in\">exgcd</span>(b, a%b, y, x);<br>\ty -= (a/b)*x;<br>\t<span class=\"hljs-keyword\">return</span> d; <br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>LCD</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span>  <span class=\"hljs-title\">lcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a*b/<span class=\"hljs-built_in\">gcd</span>(a, b);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>快筛素数</code> 先生成(2^16)内的素数 再快判</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">6555</span>], cnt;  <span class=\"hljs-comment\">// 2^16中只有6542个素数</span><br><span class=\"hljs-type\">bool</span> st[<span class=\"hljs-number\">65555</span>];         <span class=\"hljs-comment\">// 生成的时候只用判断这么多个</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (!st[i]) primes[cnt++] = i;              <span class=\"hljs-comment\">// 当前数没被筛过st[i]==0，说明是素数</span><br>\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; primes[j] &lt;= n / i; j++) &#123;  <span class=\"hljs-comment\">// 确保 第j个质数 和 i 相乘不会爆</span><br>\t\t\tst[primes[j] * i] = <span class=\"hljs-number\">1</span>;                  <span class=\"hljs-comment\">// 被唯一标记过</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (i % primes[j] == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;          <span class=\"hljs-comment\">// 此时primes[j]是i的最小质因子，退出避免重复筛</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_p</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(!st[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-built_in\">make_primes</span>(<span class=\"hljs-number\">65536</span>), st[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span>(x&lt;=<span class=\"hljs-number\">65536</span>) <span class=\"hljs-keyword\">return</span> !st[x];<br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; primes[i] &lt;= x/primes[i]; i++) <br>\t\t<span class=\"hljs-keyword\">if</span> (x % primes[i] == <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=4.2>4.2 快速幂</h4>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// a^b%MOD</span><br><span class=\"hljs-function\">LL <span class=\"hljs-title\">quick_pow</span><span class=\"hljs-params\">(LL a, <span class=\"hljs-type\">int</span> b)</span></span>&#123;<br>    LL res=<span class=\"hljs-number\">1</span>%MOD;<br>    <span class=\"hljs-keyword\">for</span>( ; b; b&gt;&gt;=<span class=\"hljs-number\">1</span>)&#123;<br>        <span class=\"hljs-keyword\">if</span>(b&amp;<span class=\"hljs-number\">1</span>) res=<span class=\"hljs-number\">1LL</span>*a*res%MOD; <span class=\"hljs-comment\">// 决定是否相乘</span><br>        a=<span class=\"hljs-number\">1ll</span>*a*a%MOD;             <span class=\"hljs-comment\">// 每个位置上，递推出的二进制位上的值</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=5>5 动态规划</h3>\n\n\n\n\n\n\n\n\n<h3 id=6>6 字符串</h3>\n\n<h4 id=6.1>6.1 KMP</h4>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 主串和模式串</span><br><span class=\"hljs-comment\">// 注意!!!从下标1开始!!!</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">KMP</span><span class=\"hljs-params\">(string s, string p)</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n=s.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>, m=p.<span class=\"hljs-built_in\">size</span>()<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-type\">int</span> ne[<span class=\"hljs-number\">100010</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;; <span class=\"hljs-comment\">// 模式串的next串</span><br>    <span class=\"hljs-comment\">//求ne数组</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>, j = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) &#123;<br>        <span class=\"hljs-keyword\">while</span>(j &amp;&amp; p[i] != p[j + <span class=\"hljs-number\">1</span>]) j = ne[j];<br>        <span class=\"hljs-keyword\">if</span>(p[i] == p[j + <span class=\"hljs-number\">1</span>]) j++;<br>        ne[i] = j;<br>    &#125;<br>    <span class=\"hljs-comment\">//kmp匹配</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>, j = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) &#123;<br>        <span class=\"hljs-keyword\">while</span>(j &amp;&amp; s[i] != p[j + <span class=\"hljs-number\">1</span>]) j = ne[j];<br>        <span class=\"hljs-keyword\">if</span>(s[i] == p[j + <span class=\"hljs-number\">1</span>]) j++;<br>        <span class=\"hljs-keyword\">if</span>(j == m) &#123;<br>            j = ne[j]; <span class=\"hljs-comment\">//当匹配成功时继续往下匹配</span><br>            <span class=\"hljs-comment\">// 你的操作!!!</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=7>7 计算几何</h3>"},{"title":"下载fluid","excerpt":"学习建站（主要是给自己看QWQ）","index_img":"/img/hexo/1.png","banner_img":"/img/hexo/1.png","date":"2022-07-21T05:59:24.000Z","_content":"\n>> `下载fluid`   \n>\n> 在此目录（即博客地址/themes）下  \n> ```yml\n> d/code/github/blog/themes    \n> ```\n>\n> 执行\n> ```yml\n> git clone https://github.com/fluid-dev/hexo-theme-fluid.git fluid    \n> ```\n>\n> 下不了？ \n> ```yml\n> git config --global --unset http.proxy    \n> ```\n","source":"_posts/hexo1.md","raw":"---\ntitle: 下载fluid \nexcerpt: 学习建站（主要是给自己看QWQ）\nindex_img: /img/hexo/1.png\nbanner_img: /img/hexo/1.png\ndate: 2022-07-21 13:59:24\ncategories: hexo\n---\n\n>> `下载fluid`   \n>\n> 在此目录（即博客地址/themes）下  \n> ```yml\n> d/code/github/blog/themes    \n> ```\n>\n> 执行\n> ```yml\n> git clone https://github.com/fluid-dev/hexo-theme-fluid.git fluid    \n> ```\n>\n> 下不了？ \n> ```yml\n> git config --global --unset http.proxy    \n> ```\n","slug":"hexo1","published":1,"updated":"2022-11-20T12:16:20.806Z","_id":"cl9jcqvzr0003qoh3claw052p","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<blockquote>\n<p><code>下载fluid</code>   </p>\n</blockquote>\n<p>在此目录（即博客地址&#x2F;themes）下  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">d/code/github/blog/themes</span>    <br></code></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">clone</span> <span class=\"hljs-string\">https://github.com/fluid-dev/hexo-theme-fluid.git</span> <span class=\"hljs-string\">fluid</span>    <br></code></pre></td></tr></table></figure>\n\n<p>下不了？ </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">--unset</span> <span class=\"hljs-string\">http.proxy</span>    <br></code></pre></td></tr></table></figure>\n</blockquote>\n","site":{"data":{}},"wordcount":161,"more":"<blockquote>\n<blockquote>\n<p><code>下载fluid</code>   </p>\n</blockquote>\n<p>在此目录（即博客地址&#x2F;themes）下  </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">d/code/github/blog/themes</span>    <br></code></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">clone</span> <span class=\"hljs-string\">https://github.com/fluid-dev/hexo-theme-fluid.git</span> <span class=\"hljs-string\">fluid</span>    <br></code></pre></td></tr></table></figure>\n\n<p>下不了？ </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-string\">git</span> <span class=\"hljs-string\">config</span> <span class=\"hljs-string\">--global</span> <span class=\"hljs-string\">--unset</span> <span class=\"hljs-string\">http.proxy</span>    <br></code></pre></td></tr></table></figure>\n</blockquote>\n"},{"title":"hexo命令","excerpt":"几个常用命令","index_img":"/img/hexo/2.png","banner_img":"/img/hexo/2.png","date":"2022-07-21T05:59:24.000Z","_content":"\n**清除缓存**\n```\nhexo clean\n```\n\n**生成静态文件**\n```\nhexo generate\n```\n\n**启动服务器**\n```\nhexo sever\n```\n\n**部署网站**\n```\nhexo deploy\n```","source":"_posts/hexo2.md","raw":"---\ntitle: hexo命令\nexcerpt: 几个常用命令\nindex_img: /img/hexo/2.png\nbanner_img: /img/hexo/2.png\ndate: 2022-07-21 13:59:24\ncategories: hexo\n---\n\n**清除缓存**\n```\nhexo clean\n```\n\n**生成静态文件**\n```\nhexo generate\n```\n\n**启动服务器**\n```\nhexo sever\n```\n\n**部署网站**\n```\nhexo deploy\n```","slug":"hexo2","published":1,"updated":"2022-11-20T12:16:29.151Z","_id":"cl9jcqvzu0005qoh393dk2qxc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>清除缓存</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo clean</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>生成静态文件</strong></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs verilog\">hexo <span class=\"hljs-keyword\">generate</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>启动服务器</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo sever</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>部署网站</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo deploy</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":63,"more":"<p><strong>清除缓存</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo clean</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>生成静态文件</strong></p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs verilog\">hexo <span class=\"hljs-keyword\">generate</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>启动服务器</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo sever</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>部署网站</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">hexo deploy</span><br></code></pre></td></tr></table></figure>"},{"title":"《算法竞赛进阶指南》","excerpt":"以此为纲","index_img":"/img/teach/3.png","banner_img":"/img/teach/3.png","date":"2022-11-22T12:00:00.000Z","_content":"\n<h1 id=1><font color=\"green\">初窥门径</font></h1>\n<details>\n<summary>目录</summary>\n\n  1. 基础算法\n       * [枚举与模拟](#1.1.1)\n       * 递推与递归 [0x02]()\n       * 前缀和与差分 [0x03]()\n       * 排序 [0x05]()\n       * 二分 [0x04]()\n       * 双指针\n  \n  2. 数据结构\n       * 栈 [0x11]()\n       * 队列 [0x12]() \n       * 哈希表 [0x14]()\n       * 堆\n  \n  3. 搜索\n       * DFS [0x22]()\n       * BFS [0x25]()\n       * 剪枝优化与Flood Fill\n    \n  4. 字符串\n       * KMP [0x15]() \n       * Trie [0x16]()\n\n  5. 动态规划\n       * 背包问题 [0x52]()\n       * 线性DP [0x51]()\n       * 区间DP [0x53]()\n  \n  6. 数学\n       * 进制转换\n       * 高精度\n       * 快速幂\n       * 质（素）数\n       * 约数个数\n       * 组合计数 [0x36]()\n\n  7. 图论\n       * 最短路 [0x61]()\n       * 拓扑排序 \n       * 最小生成树 [0x62]()\n  </details>\n\n\n<h2 id=1.1><font color=\"green\"> 一、基础算法 </font></h2>\n\n* <h3 id=1.1.1> 枚举与模拟 </h3>\n\n<details> \n<summary>AcWing 466.回文日期</summary>  \n\n* [AcWing 466. 回文日期](https://www.acwing.com/problem/content/468/) \n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint months[13]={0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nbool dateOK(int ymd){\n    months[2]=28; // 恢复现场\n    int y=ymd/10000;\n    int m=ymd%10000/100;\n    int d=ymd%100;\n    if((y%4==0 && y%100!=0) || y%400==0) months[2]=29; // 闰年\n    if(m<1 || m>12) return 0;\n    if(d<1 || d>months[m]) return 0;\n    return 1;\n}\n\nint main(){\n    int date1, date2, ans=0;\n    cin>>date1>>date2;\n    \n    for(int i=date1/10000; i<=date2/10000; i++){\n        // 生成回文日期\n        // 判断日期是否合法，是否在date区间\n        int j=i%10*1000\n             +i/10%10*100\n             +i/100%10*10\n             +i/1000%10;\n        int k=i*10000+j;\n        \n        if(dateOK(k) && k>=date1 && k<=date2)\n            ans++;\n    }\n    \n    cout<<ans;\n    \n    return 0;\n}\n```\n</details>\n\n\n<details> \n<summary>AcWing 441. 数字统计</summary>\n\n* [AcWing 441. 数字统计](https://www.acwing.com/problem/content/443/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main(){\n    int l, r, ans=0;\n    cin>>l>>r;\n    for(int i=l; i<=r; i++){\n        int j=i;\n        while(j){\n            if(2 == j%10) ans++;\n            j/=10;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 1245. 特别数的和</summary>\n\n* [AcWing 1245. 特别数的和](https://www.acwing.com/problem/content/1247/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint n, res;\n\nbool is(int i){\n    while(i){\n        int j=i%10;\n        if(j==2 || j==0 || j==1 || j==9) return 1;\n        i/=10;\n    }\n    return 0;\n}\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++)\n        if(is(i)) res+=i;\n    \n    cout<<res;\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 1210. 连号区间数</summary>  \n\n* [AcWing 1210. 连号区间数](https://www.acwing.com/problem/content/1212/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int N=1e4+10;\nint arr[N], n, res;\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++) scanf(\"%d\", &arr[i]);\n    \n    // 枚举每个区间\n    for(int l=1; l<=n; l++){\n        int mmax=arr[l];\n        int mmin=arr[l];\n        for(int r=l; r<=n; r++){\n            mmin=min(mmin, arr[r]);\n            mmax=max(mmax, arr[r]);\n            \n            if(r-l==mmax-mmin) res++;\n        }\n    }\n    \n    cout<<res;\n    \n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary>AcWing 1204. 错误票据</summary>  \n\n* [AcWing 1204. 错误票据](https://www.acwing.com/problem/content/description/1206/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int N=1e5+10;\n\nint arr[N], mmin=0x3f3f3f3f, mmax=-0x3f3f3f3f, m, n;\n\nint main(){\n    int t; cin>>t;\n    while(scanf(\"%d\", &t)!=EOF){\n        arr[t]++;\n        mmin = mmin<t ? mmin:t;\n        mmax = max(mmax, t);\n    }    \n    \n    for(int i=mmin; i<=mmax; i++){\n        if(arr[i]==2) n=i;\n        if(arr[i]==0) m=i;\n    }\n    \n    cout<<m<<\" \"<<n;\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 1236. 递增三元组</summary>  \n\n* [AcWing 1236. 递增三元组](https://www.acwing.com/problem/content/1238/)\n\n```cpp\n#pragma G++ optimize(\"Ofast\")\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nLL ans;\nint arr[N], brr[N], crr[N], n;\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++) scanf(\"%d\", &arr[i]);\n    for(int i=1; i<=n; i++) scanf(\"%d\", &brr[i]);\n    for(int i=1; i<=n; i++) scanf(\"%d\", &crr[i]);\n    \n    sort(arr+1, arr+1+n);\n    sort(brr+1, brr+1+n);\n    sort(crr+1, crr+1+n);\n    \n    // 枚举b\n    for(int i=1; i<=n; i++){\n        int a = lower_bound(arr+1, arr+1+n, brr[i])-arr-1;\n        int c = upper_bound(crr+1, crr+1+n, brr[i])-crr;\n        \n        if(a>=1 && c<=n)\n            ans+=1LL*a*(n-c+1);\n    }\n    \n    cout<<ans;\n    \n    return 0;\n}\n```\n\n</details>\n\n\n\n<details> \n<summary>AcWing 1219. 移动距离</summary>  \n\n* [AcWing 1219. 移动距离](https://www.acwing.com/problem/content/1221/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main(){\n    int w, m, n;\n    cin>>w>>m>>n;\n    \n    // 1维变2维\n    int x1=(m-1)/w+1;\n    int y1=m%w;\n    if(y1==0) y1=w;\n    \n    int x2=(n-1)/w+1;\n    int y2=n%w;\n    if(y2==0) y2=w;\n    \n    if(!(x1&1)) y1=w-y1+1;    \n    if(!(x2&1)) y2=w-y2+1;\n    \n    //cout<<x1<<\" \"<<y1<<\"\\n\"<<x2<<\" \"<<y2<<\"\\n\";\n    \n    cout<<abs(x2-x1)+abs(y2-y1);\n    \n    return 0;\n}\n```\n\n</details>\n\n\n\n\n\n* <h3 id=1.1.2> 递推与递归 </h3>\n\n* <h3 id=1.1.3> 前缀和与差分 </h3>\n\n* <h3 id=1.1.4> 排序 </h3>\n\n* <h3 id=1.1.5> 二分 </h3>\n\n* <h3 id=1.1.6> 双指针 </h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=1.3><font color=\"green\"> 三、搜索 </font></h2>\n\n* <h3 id=1.3.1> DFS </h3>\n\n* <h3 id=1.3.2> BFS </h3>\n\n<details> \n<summary> AcWing 1101. 献给阿尔吉侬的花束 </summary>  \n\n* [AcWing 1101. 献给阿尔吉侬的花束](https://www.acwing.com/problem/content/1103/)\n\n```cpp\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[4][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\nconst int inf=0x3f3f3f3f;\nconst int N=210;\n\nint g[N][N];\nint st[N][N];\nint res[N][N];\nPII s, e;\nint n, m;\n\nvoid solve(){\n    memset(g, 0, sizeof g);\n    memset(st, 0, sizeof st);\n    memset(res, 0, sizeof res);\n    \n    cin>>n>>m;\n    for(int i=1; i<=n; i++){\n        string t; cin>>t;\n        for(int j=1; j<=m; j++)\n            if(t[j-1]=='S')\n                s={i,j};\n            else if(t[j-1]=='E')\n                e={i,j};\n            else if(t[j-1]=='#')\n                g[i][j]=1;\n    }\n    \n    queue<PII> q;\n    res[s.fst][s.sed]=0;\n    q.push(s), st[s.fst][s.sed]=1;\n    \n    while(q.size()){\n        auto u=q.front();\n        q.pop();\n        \n        for(int i=0; i<4; i++){\n            int nx=u.fst+dxy[i][0];\n            int ny=u.sed+dxy[i][1];\n            \n            if(g[nx][ny]) continue;\n            if(nx<1 || ny<1 || nx>n || ny>m) continue;\n            if(st[nx][ny]) continue;\n            \n            res[nx][ny]=res[u.fst][u.sed]+1;\n            q.push({nx, ny}), st[nx][ny]=1;\n        }\n        if(st[e.fst][e.sed]) break; // 剪枝\n    }\n    \n    if(res[e.fst][e.sed])\n        cout<<res[e.fst][e.sed]<<\"\\n\";\n    else\n        cout<<\"oop!\\n\";\n        \n    return ;\n}\n\nint main(){\n    int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n</details>\n\nBFS：武士风度的牛、逃离迷宫、地牢大师、A计划\n\n\n* <h3 id=1.3.3> 剪枝优化与Flood Fill </h3>\n\n<details> \n<summary> AcWing 1113. 红与黑 </summary>  \n\n* [AcWing 1113. 红与黑](https://www.acwing.com/problem/content/1115/)\n\n```cpp\n// dfs 写法\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[][2]={{-1,0},{1,0},{0,-1},{0,1}};\nconst int N=30;\n\nint n, m, cnt;\nbool g[N][N];\nbool st[N][N];\nPII S;\n\nvoid dfs(int x, int y){\n    cnt++;\n    for(int i=0; i<4; i++){\n        int nx=x+dxy[i][0];\n        int ny=y+dxy[i][1];\n        \n        if(nx<1 || ny<1 || nx>n || ny>m) continue;\n        if(g[nx][ny] || st[nx][ny]) continue;\n        \n        st[nx][ny]=1;\n        dfs(nx, ny);\n    }\n    return ;\n}\n\nvoid solve(){\n    cnt=0;\n    memset(g, 0, sizeof g);\n    memset(st, 0, sizeof st);\n    \n    for(int i=1; i<=n; i++){\n        string s; cin>>s;\n        for(int j=1; j<=m; j++)\n            if(s[j-1]=='#') g[i][j]=1;\n            else if(s[j-1]=='@') S={i,j};\n    }\n    \n    // 进入这个位置，将其能够搜索到的其他位置打上标记\n    st[S.fst][S.sed]=1;\n    dfs(S.fst, S.sed);\n    cout<<cnt<<\"\\n\";\n    return ;\n}\n\nint main(){\n    while(cin>>m>>n)\n        if(m!=0 && n!=0) solve();\n    return 0;\n}\n```\n\n\n```cpp\n// bfs 写法\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[][2]={{-1,0},{1,0},{0,-1},{0,1}};\nconst int N=30;\n\nint n, m, cnt;\nbool g[N][N];\nbool st[N][N];\nPII S;\n\nvoid bfs(int x, int y){\n    \n    queue<PII> q;\n    q.push({x, y}), st[x][y]=1, cnt++;\n    \n    while(q.size()){\n        auto u=q.front();\n        q.pop();\n        \n        for(int i=0; i<4; i++){\n            int nx=u.fst+dxy[i][0];\n            int ny=u.sed+dxy[i][1];\n            \n            if(nx<1 || ny<1 || nx>n || ny>m) continue;\n            if(g[nx][ny] || st[nx][ny]) continue;\n            \n            q.push({nx, ny}), st[nx][ny]=1, cnt++;\n        }\n    }\n}\n\nvoid solve(){\n    cnt=0;\n    memset(g, 0, sizeof g);\n    memset(st, 0, sizeof st);\n    \n    for(int i=1; i<=n; i++){\n        string s; cin>>s;\n        for(int j=1; j<=m; j++)\n            if(s[j-1]=='#') g[i][j]=1;\n            else if(s[j-1]=='@') S={i,j};\n    }\n    \n    // 进入这个位置，将其能够搜索到的其他位置打上标记\n    st[S.fst][S.sed]=1;\n    bfs(S.fst, S.sed);\n    cout<<cnt<<\"\\n\";\n    return ;\n}\n\nint main(){\n    while(cin>>m>>n)\n        if(m!=0 && n!=0) solve();\n    return 0;\n}\n```\n\n</details>\n\n\n\n<details> \n<summary> AcWing 1233. 全球变暖 </summary>  \n\n* [AcWing 1233. 全球变暖](https://www.acwing.com/problem/content/1235/)\n\n```cpp\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N=1010;\nconst int dxy[][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\n\nbool g[N][N];\nbool st[N][N];\nint n, res;\n\n// 如果存在一个点，满足其上下左右都是岛屿的情况，那么这个点肯定不会被淹没\nbool bfs(int x, int y){\n    bool flg=0; \n    \n    queue<PII> q;\n    q.push({x,y}), st[x][y]=1;\n    \n    while(q.size()){\n        auto u=q.front();\n        q.pop();\n        \n        int cnt=0;\n        for(int i=0; i<4; i++){\n            int nx=u.fst+dxy[i][0];\n            int ny=u.sed+dxy[i][1];\n            \n            if(g[nx][ny]==1) cnt++;\n            \n            if(nx<1 || ny<1 || nx>n || ny>n) continue;\n            if(g[nx][ny]!=1 || st[nx][ny]) continue;\n            \n            q.push({nx, ny}), st[nx][ny]=1;\n        }\n        if(cnt==4) flg=1; // 存在上下左右都有岛屿的情况\n    }\n    \n    return flg==0;\n}\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++){\n        string s; cin>>s;\n        for(int j=1; j<=n; j++)\n            if(s[j-1]=='#') g[i][j]=1;\n    }\n    \n    for(int i=1; i<=n; i++)\n        for(int j=1; j<=n; j++)\n            if(g[i][j] && !st[i][j])\n                if( bfs(i,j) ) res++;\n    \n    cout<<res;\n    \n    return 0;\n}\n```\n\n</details>\n\n\n\n<details> \n<summary> Luogu P1141 01迷宫 </summary>  \n\n* [Luogu P1141 01迷宫](https://www.luogu.com.cn/problem/P1141)\n\n```cpp\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[4][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\nconst int N=1e3+10;\n\nint n, m, flg, cnt;\n\nbool g[N][N];\nbool st[N][N];\nint res[N][N]; // 用res存标记，每个标记对应连接数量\nint num[1000000];\n\nvoid bfs(int ux, int uy){\n\t\n\tqueue<PII> q;\n\tq.push({ux, uy}), st[ux][uy]=1, res[ux][uy]=flg;\n\t\n\twhile(q.size()){\n\t\tauto u=q.front();\n\t\tq.pop();\n\t\tcnt++;\n\t\t\n\t\tfor(int i=0; i<4; i++){\n\t\t\tint nx=u.fst+dxy[i][0];\n\t\t\tint ny=u.sed+dxy[i][1];\n\n\t\t\tif(nx<1 || ny<1 || nx>n || ny>n) continue;\n\t\t\tif(g[nx][ny]==g[u.fst][u.sed] || st[nx][ny]) continue;\n\n\t\t\tq.push({nx, ny}), st[nx][ny]=1, res[nx][ny]=flg;\n\t\t}\n\t}\n}\n\nint main(){ \n    cin>>n>>m;\n\tfor(int i=1; i<=n; i++){\n\t\tstring s; cin>>s;\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tif(s[j-1]=='1') g[i][j]=1;\n\t}\n    \n\tfor(int i=1; i<=n; i++)\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tif(!st[i][j]) \n\t\t\t\tcnt=0, ++flg, bfs(i, j), num[flg]=cnt;\n    // 因为每个 连通块 的大小，需要走完才知道\n    // 所以我们在进入每一块连通块时，给次连通块每个位置做上唯一flg\n    // bfs结束的时候，将cnt赋值给num[flg]，查询时，就可以直接查询了\n\n\tfor(int i=1; i<=m; i++){\n\t\tint a, b; scanf(\"%d%d\", &a, &b);\n\t\tcout<<num[res[a][b]]<<\"\\n\";\n\t}\n\n    return 0;\n}\n```\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=1.6><font color=\"green\"> 六、数学 </font></h2>\n\n* <h3 id=1.6.4> 质（素）数 </h3>\n\n<details> \n<summary> AcWing 866. 试除法判定质数 </summary>  \n\n* [AcWing 866. 试除法判定质数](https://www.acwing.com/problem/content/868/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nbool isP(int n){\n    if(n<2) return false;\n    for(int i=2; i<=n/i; i++)\n        if(n%i==0)\n            return false;\n    return true;\n}\n\nvoid solve(){\n    int n; cin>>n;\n    \n    if(isP(n))\n        puts(\"Yes\");\n    else\n        puts(\"No\");\n    return ;\n}\n\nint main(){\n    int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary> AcWing 867. 分解质因数 </summary>  \n\n* [AcWing 867. 分解质因数](https://www.acwing.com/problem/content/869/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid solve(){\n    int n; cin>>n;\n    \n    for(int i=2; i<=n/i; i++)\n        if(n%i==0){\n            // 质因数 i\n            \n            int cnt=0;\n            while(n%i==0){\n                n/=i;\n                cnt++;\n            }\n            printf(\"%d %d\\n\", i, cnt);\n        }\n        \n    if(n>1) printf(\"%d 1\\n\", n);\n    puts(\"\");\n}\n\nint main(){\n    int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary> AcWing 868. 筛质数 </summary>  \n\n* [AcWing 867. 分解质因数](https://www.acwing.com/problem/content/description/870/)\n\n\n\n```cpp\n// 埃式筛 O(nloglogn)\n#include <iostream>\nusing namespace std;\n\nconst int N=1e6+10;\n\n// 素数的数量 近似 N/(2*lgN)\n\nint primes[100000], cnt;  // 素数集合\nbool st[N];     // 标记合数\n\nvoid make_primes(int n){\n    st[1]=1;\n    for(int i=2; i<=n; i++)\n        if(!st[i]){\n            primes[++cnt]=i;\n            for(int j=i; j<=n; j+=i) st[j]=1;   // 标记合数\n        }\n}\n\nint main(){\n    int n; cin>>n;\n    \n    make_primes(n);\n    \n    cout<<cnt;\n    \n    return 0;\n}\n```\n\n```cpp\n// 欧拉筛 O(n)\n#include <iostream>\nusing namespace std;\n\nconst int N=1e6+10;\n\nint primes[100000], cnt;\nbool st[N];\n\nvoid make_primes(int n){\n    st[1]=1;\n    for(int i=2; i<=n; i++){\n        if(!st[i]) primes[++cnt]=i;\n        for(int j=1; primes[j]<=n/i; j++){\n            st[ primes[j]*i ] = 1;  // 用最小质因子去筛\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\nint main(){\n    int n; cin>>n;\n    \n    make_primes(n);\n    \n    cout<<cnt;\n    \n    return 0;\n}\n```\n</details>\n\n\n\n<details> \n<summary>Luogu P1835 素数密度 </summary>  \n\n* [Luogu P1835 素数密度](https://www.luogu.com.cn/problem/P1835)\n\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <unordered_set>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e6+10;\n\nint primes[100000], cnt;\nbool st[N];\n\nLL L, R, ans;\nunordered_set <LL> H;    // 如果H=1，说明被筛掉\n\n// 对于 n 而言\n// 其质因子的范围是 [ 2-sqrt(n) ]\n// 因此我们可以用质因子去将[ L-R ] 中的合数给弄出来\nvoid make_primes(int n){\n    st[1]=1;\n    for(int i=2; i<=n; i++){\n        if(!st[i]) primes[++cnt]=i;\n        for(int j=1; primes[j]<=n/i; j++){\n            st[ primes[j]*i ] = 1;  // 用最小质因子去筛\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\nint main(){\n    make_primes( sqrt(pow(2,31)-1) );\n    \n    cin>>L>>R;\n    for(int i=1; i<=cnt; i++){  // 枚举质数\n        LL b = L / primes[i];\n        LL j = b * primes[i];\n        while(j<L) j+=primes[i];   // 定位到大于L，同时能被primes[i]整除的第一个数\n        \n        for( ; j<=R; j+=primes[i])\n            H.insert(j); // 筛掉再说\n    }\n\n    for(LL i=L; i<=R; i++){        \n        if(i<sqrt(pow(2,31)-1)) {\n            if(st[i]==0) ans++;\n            continue;\n        }\n        if(!H.count(i)) ans++;\n    }\n    cout<<ans;\n    \n    return 0;\n}\n```\n\n\n</details>\n\n\n\n\n\n<h2 id=1.7><font color=\"green\"> 七、图论 </font></h2>\n\n* <h3 id=1.7.1> 最短路 </h3>\n\n<details> \n<summary> AcWing 849. Dijkstra求最短路 I <font style=\"background-color:red\", color=black><b>dijkstra[ 模板 ]</b></font></summary>  \n\n* [AcWing 849. Dijkstra求最短路 I](https://www.acwing.com/problem/content/851/)\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int N=510;\nconst int inf=0x3f3f3f3f;\n\nint n, m;\nint edge[N][N]; // 稠密图\nint dis[N]; // 最短路\nbool st[N]; // 是否确定最短\n\nvoid dijkstra(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    \n    dis[s]=0;\n    \n    for(int i=1; i<=n; i++){\n        \n        int t=-1;\n        for(int j=1; j<=n; j++)\n            if(!st[j] && (t==-1 ||  dis[t]>dis[j]))\n                t=j;    \n        \n        st[t]=true;\n        if(t==e) break;\n        \n        for(int j=1; j<=n; j++)\n            dis[j]=min(dis[j], dis[t]+edge[t][j]);\n    }\n}\n\nint main(){\n    memset(edge, 0x3f, sizeof edge);\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int x, y, z;\n        scanf(\"%d%d%d\", &x, &y, &z);\n        edge[x][y]=min(edge[x][y], z);\n    }\n    \n    dijkstra(1, n);\n    \n    if(dis[n]==inf)\n        cout<<\"-1\";\n    else\n        cout<<dis[n];\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>Luogu P4779 【模板】单源最短路径（标准版） <font style=\"background-color:red\", color=black><b>dijkstra堆优化[ 模板 ]</b></font></summary>  \n\n* [Luogu P4779 【模板】单源最短路径（标准版）](https://www.luogu.com.cn/problem/P4779)\n\n```cpp\n#define fst first\n#define sed second\n#define pb push_back\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N=1e5+10;\nconst int inf=0x3f3f3f3f;\n\nvector<vector<PII>> edge(N);    // 邻接表\nbool st[N];\nint dis[N];\n\nint n, m, S;\n\nvoid dijkstra(int s){\n    memset(dis, 0x3f, sizeof dis);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n\n    dis[s]=0;\n    heap.push({dis[s], s});\n\n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n\n        if(st[x]) continue;\n        st[x]=1;\n\n        for(auto &[y, z]: edge[x])\n            if( dis[y] > dis[x]+z ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n\n}\n\nint main(){\n    cin>>n>>m>>S;\n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        edge[x].pb({y, w});\n    }\n\n    dijkstra(S);\n\n    for(int i=1; i<=n; i++) cout<<dis[i]<<\" \";\n\n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary>AcWing 853. 有边数限制的最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford[ 模板 ]</b></font></summary>  \n\n* [AcWing 853. 有边数限制的最短路](https://www.acwing.com/problem/content/855/)\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int inf=0x3f3f3f3f;\nconst int N=510;\n\nint n, m, k;\nint edge[N][N];\nint dis[N];\nint bkup[N];\n\nvoid bellman_ford(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    \n    dis[s]=0;\n    \n    for(int i=1; i<=k; i++){\n        bool flg=0;\n        memcpy(bkup, dis, sizeof dis);   \n        \n        for(int x=1; x<=n; x++)\n            for(int y=1; y<=n; y++)\n                if( dis[y] > bkup[x]+edge[x][y] ){\n                    dis[y] = bkup[x]+edge[x][y];\n                    flg=1;\n                }\n        \n        if(!flg) break;\n    }\n}\n\nint main(){\n    memset(edge, 0x3f, sizeof edge);\n    cin>>n>>m>>k;\n    for(int i=1; i<=m; i++){\n        int x, y, z;\n        scanf(\"%d%d%d\", &x, &y, &z);\n        edge[x][y]=min(edge[x][y], z);\n    }\n    \n    bellman_ford(1, n);\n    \n    if(dis[n]>inf/2)\n        cout<<\"impossible\";\n    else\n        cout<<dis[n];\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 851. spfa求最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford队列优化（spfa）[ 模板 ]</b></font> </summary>  \n\n* [AcWing 851. spfa求最短路](https://www.acwing.com/problem/content/853/)\n\n```cpp\n#pragma G++ optimize(\"Ofast\")\n\n#define fst first\n#define sed second\n#include <iostream>\n#include <queue>\n#include <cstring>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int inf=0x3f3f3f3f;\nconst int N=1e5+10;\n\nint n, m;\nvector<PII> edge[N];\nint dis[N]; \nbool st[N]; // 是否在队列中\n\nvoid spfa(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    queue<int> q;\n    \n    dis[s]=0;\n    q.push(s), st[s]=1;\n    \n    while(q.size()){\n        auto x=q.front();\n        q.pop(), st[x]=0;\n        \n        for(auto& [y, z]: edge[x])\n            if( dis[y] > dis[x]+z){\n                dis[y] = dis[x]+z;\n                if(!st[y])\n                    q.push(y), st[y]=1;\n            }\n    }\n}\n\nint main(){\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int x, y, z;\n        scanf(\"%d%d%d\", &x, &y, &z);\n        edge[x].push_back({y, z});\n    }\n    \n    spfa(1, n);\n    \n    if(dis[n]==inf)\n        cout<<\"impossible\";\n    else\n        cout<<dis[n];\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary> Luogu P3371 【模板】单源最短路径（弱化版） <font style=\"background-color:orange\", color=black><b>spfa??[ 模板 ]</b></font></summary>  \n\n* [Luogu P3371 【模板】单源最短路径（弱化版）](https://www.luogu.com.cn/problem/P3371)\n\n</details>\n\n<details> \n<summary>AcWing 854. Floyd求最短路 <font style=\"background-color:yellow\", color=black><b>Floyd[ 模板 ]</b></font> </summary>  \n\n* [AcWing 854. Floyd求最短路](https://www.acwing.com/problem/content/856/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int inf=0x3f3f3f3f;\nconst int N=210;\n\nint n, m, k;\nint dis[N][N];\n\nvoid floyd(){\n    for(int k=1; k<=n; k++)\n        for(int i=1; i<=n; i++)\n            for(int j=1; j<=n; j++)\n                dis[i][j]=min(dis[i][j], dis[i][k]+dis[k][j]);\n}\n\nint main(){\n    cin>>n>>m>>k;\n    \n    for(int i=1; i<=n; i++)\n        for(int j=1; j<=n; j++)\n            if(i==j) dis[i][j]=0;\n            else dis[i][j]=inf;\n                \n    for(int i=1; i<=m; i++){\n        int x, y, z; \n        scanf(\"%d%d%d\", &x, &y, &z);\n        dis[x][y]=min(dis[x][y], z);\n    }\n    \n    floyd();\n    \n    for(int i=1; i<=k; i++){\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        if(dis[x][y]>inf/2) puts(\"impossible\");\n        else cout<<dis[x][y]<<\"\\n\";\n    }\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary> Luogu P1629 邮递员送信 <font style=\"background-color:red\", color=black><b>dijkstra堆优化</b></font></summary> \n\n* [Luogu P1629 邮递员送信](https://www.luogu.com.cn/problem/P1629)\n\n```cpp\n#define fst first\n#define sed second\n#define pb push_back\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int ,int> PII;\n\nconst int N=1e3+10;\n\nvector<vector<PII>> edge(N);\nvector<vector<PII>> redge(N); // 反向边\nbool st[N];\nint dis[N]; // 1到每个点的最短路\n\nint n, m;\nLL ans;\n\nvoid dijkstra(int s, vector<vector<PII>> &e){\n    memset(st, 0, sizeof st);\n    memset(dis, 0x3f, sizeof dis);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n\n    dis[s]=0;\n    heap.push({dis[s], s});\n\n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n\n        if(st[x]) continue;\n        st[x]=1;\n\n        for(auto &[y, z]: e[x])\n            if( dis[y] > dis[x]+z ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout);\n    int n, m;\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        edge[x].pb({y, w});\n        redge[y].pb({x, w});\n    }\n    \n    dijkstra(1, edge);\n    for(int i=2; i<=n; i++) ans+=dis[i];\n    dijkstra(1, redge);\n    for(int i=2; i<=n; i++) ans+=dis[i];\n    cout<<ans;\n\n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary>  Luogu P1119 灾后重建 <font style=\"background-color:yellow\", color=black><b>Floyd</b></font></summary> \n\n* [Luogu P1119 灾后重建](https://www.luogu.com.cn/problem/P1119)\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int N=210;\n\nint dis[N][N];\nint ti[N];\nbool st[N];\n\nint n, m, q;\n\nint floyd(int x, int y, int t){\n    for(int k=0; k<n; k++){\n        if(ti[k]>t || st[k]) continue;\n        st[k]=1;\n\n        for(int i=0; i<n; i++)\n            for(int j=0; j<n; j++)\n                if( dis[i][j] > dis[i][k] + dis[k][j])\n                    dis[j][i] = dis[i][j] = dis[i][k] + dis[k][j];\n    }\n\n    if(dis[x][y]==0x3f3f3f3f || ti[x]>t || ti[y]>t) \n        return -1;\n    else\n        return dis[x][y];\n}\n\nint main(){\n    freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout);\n    memset(dis, 0x3f, sizeof dis);\n    cin>>n>>m;\n    for(int i=0; i<n; i++) scanf(\"%d\", &ti[i]);\n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        dis[x][y]=min(dis[x][y], w);\n        dis[y][x]=min(dis[y][x], w);\n    }\n    for(int i=0; i<n; i++) dis[i][i]=0;\n\n    cin>>q;\n    while(q--){\n        int x, y, t;\n        scanf(\"%d%d%d\", &x, &y, &t);\n        cout<<floyd(x, y, t)<<\"\\n\";\n    }\n\n    return 0;\n}\n```\n\n```cpp\n#pragma G++ optimize(\"Ofast\")\n#define fst first\n#define sed second\n\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N=210;\n\nint edge[N][N];\nint dis[N]; // 最短路\nbool st[N]; // 是否确定最短路\n\nint n, m, q;\nint ti[N];  // 每个村庄完成重建的时间\n\nint dijkstra(int s, int e, int t){\n    memset(dis, 0x3f, sizeof dis);\n    memset(st, 0, sizeof st);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n\n    dis[s]=0;\n    heap.push({dis[s], s});\n    \n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n\n        if(st[x]) continue;\n        st[x]=1;\n\n        edge[s][x]=min(edge[s][x], dis[x]); // 更新最短路\n\n        for(int y=1; y<=n; y++){    // 用邻接表可能会更快\n            int z=edge[x][y];\n\n            if( dis[y] > dis[x]+z && ti[x]<=t && ti[y]<=t ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n        }\n    }\n\n    if(dis[e]==0x3f3f3f3f)\n        return -1;\n    else\n        return dis[e];\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout);\n    memset(edge, 0x3f, sizeof edge);\n    cin>>n>>m;\n    for(int i=1; i<=n; i++) scanf(\"%d\", &ti[i]);    \n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        x++, y++;\n        edge[x][y]=min(edge[x][y], w);\n        edge[y][x]=min(edge[y][x], w);\n    }\n\n    cin>>q;\n    while(q--){\n        int x, y, t;\n        scanf(\"%d%d%d\", &x, &y, &t);\n        x++, y++;\n        cout<<dijkstra(x, y, t)<<\"\\n\";\n    }\n    return 0;\n}\n```\n\n</details>\n\n\n\n\n<details>\n<summary> AcWing 1488. 最短距离 </summary>\n\n* [AcWing 1488. 最短距离](https://www.acwing.com/problem/content/1490/)\n\n```cpp\n// 超级源点\n#pragma G++ optimize(\"Ofast\")\n\n#define pb push_back\n#define fst first\n#define sed second\n\n#include <iostream>\n#include <queue>\n#include <cstring>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int inf=0x3f3f3f3f;\nconst int N=1e5+10;\n\nint n, m, k, q;\nvector<PII> edge[N];\nint dis[N];\nbool st[N];\n\nint dijkstra(int s){\n    int ans=inf;\n    memset(dis, 0x3f, sizeof dis);\n    memset(st, 0, sizeof st);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n    \n    dis[s]=0;\n    heap.push({dis[s], s});\n    \n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n        \n        if(st[x]) continue;\n        st[x]=1;\n        \n        //cout<<dis[x]<<\"\\n\";\n        for(auto &[y, z]: edge[x])\n            if( dis[y] > dis[x]+z ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n    \n    return ans;\n}\n\nint main(){\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int a, b, c;\n        scanf(\"%d%d%d\", &a, &b, &c);\n        edge[a].pb({b, c});\n        edge[b].pb({a, c});\n    }\n    cin>>k;\n    for(int i=1; i<=k; i++){\n        int j;\n        scanf(\"%d\", &j);\n        edge[n+1].pb({j, 0});\n    }\n    \n    dijkstra(n+1);\n    \n    cin>>q;\n    while(q--){\n        int s;\n        scanf(\"%d\", &s);\n        cout<<dis[s]<<\"\\n\";\n    }\n    \n    return 0;\n}\n```\n\n</details>\n\n<details>\n\n<summary> AcWing 1507. 旅行计划 </summary>\n\n* [AcWing 1507. 旅行计划](https://www.acwing.com/problem/content/description/1509/)\n\n```cpp\n// 记录路径\n#pragma G++ optimize(\"Ofast\")\n\n#define pb push_back\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N = 510;\n\nint n, m, S, D;\nvector<pair<int, PII>> edge[N]; // x->y \nint pre[N]; // 最短路径中，最短的一条路径的前驱\nPII dis[N]; // 最短路径及最小花费\nbool st[N]; // 是否确定最小\n\nvoid dijkstra(int s, int e) {\n    memset(dis, 0x3f, sizeof dis);\n    priority_queue<pair<PII, int>, vector<pair<PII, int>>, greater<pair<PII, int>>> heap;\n\n    dis[s] = { 0, 0 };\n    heap.push({ dis[s], s });\n\n    while (heap.size()) {\n        auto x = heap.top().sed;\n        heap.pop();\n\n        if (st[x]) continue;\n        st[x] = 1;\n\n        for (auto& [y, w] : edge[x]) {\n            PII t = { dis[x].fst + w.fst, dis[x].sed + w.sed };\n            if (dis[y] > t) {\n                dis[y] = t;\n                heap.push({ dis[y], y });\n                pre[y]=x;   // 通过x点到y\n            }\n        }\n    }\n}\n\nint main() {\n    cin >> n >> m >> S >> D;\n    for (int i = 1; i <= m; i++) {\n        int a, b, c, d;\n        scanf(\"%d%d%d%d\", &a, &b, &c, &d);\n        edge[a].pb({ b, {c, d} });\n        edge[b].pb({ a, {c, d} });\n    }\n\n    dijkstra(D, S); // 反着来，这样可以直接用pre输出\n\n    int u = S;\n    cout<<S<<\" \";\n    while (u != D) cout << pre[u] << \" \", u = pre[u];\n\n    cout << dis[S].fst << \" \" << dis[S].sed;\n\n    return 0;\n}\n```\n\n</details>\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n<h1 id=2><font color=\"blue\">牛刀小试</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n  1. 基础算法\n       * 位运算 [0x01]()\n       * 倍增 [0x39]()\n       * 构造 \n  \n  2. 数据结构\n        * 并查集 [0x41]()\n        * 树状数组 [0x42]()\n        * 线段树 [0x43]()\n        * 二叉搜索树与平衡树 [0x46]()\n        * 分块\n        * 点分治\n        * 可持久化数据结构\n\n  3. 搜索\n       * 迭代加深\n       * 双向DFS或BFS\n       * BFS变形\n       * A* 与 IDA*\n  </details>\n\n---\n\n\n<h1 id=3><font color=\"red\">略有所成</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n  </details>\n\n\n\n","source":"_posts/teach3.md","raw":"---\ntitle: 《算法竞赛进阶指南》 \nexcerpt: 以此为纲\nindex_img: /img/teach/3.png\nbanner_img: /img/teach/3.png\ndate: 2022-11-22 20:00:00\ncategories: teach\n---\n\n<h1 id=1><font color=\"green\">初窥门径</font></h1>\n<details>\n<summary>目录</summary>\n\n  1. 基础算法\n       * [枚举与模拟](#1.1.1)\n       * 递推与递归 [0x02]()\n       * 前缀和与差分 [0x03]()\n       * 排序 [0x05]()\n       * 二分 [0x04]()\n       * 双指针\n  \n  2. 数据结构\n       * 栈 [0x11]()\n       * 队列 [0x12]() \n       * 哈希表 [0x14]()\n       * 堆\n  \n  3. 搜索\n       * DFS [0x22]()\n       * BFS [0x25]()\n       * 剪枝优化与Flood Fill\n    \n  4. 字符串\n       * KMP [0x15]() \n       * Trie [0x16]()\n\n  5. 动态规划\n       * 背包问题 [0x52]()\n       * 线性DP [0x51]()\n       * 区间DP [0x53]()\n  \n  6. 数学\n       * 进制转换\n       * 高精度\n       * 快速幂\n       * 质（素）数\n       * 约数个数\n       * 组合计数 [0x36]()\n\n  7. 图论\n       * 最短路 [0x61]()\n       * 拓扑排序 \n       * 最小生成树 [0x62]()\n  </details>\n\n\n<h2 id=1.1><font color=\"green\"> 一、基础算法 </font></h2>\n\n* <h3 id=1.1.1> 枚举与模拟 </h3>\n\n<details> \n<summary>AcWing 466.回文日期</summary>  \n\n* [AcWing 466. 回文日期](https://www.acwing.com/problem/content/468/) \n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint months[13]={0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nbool dateOK(int ymd){\n    months[2]=28; // 恢复现场\n    int y=ymd/10000;\n    int m=ymd%10000/100;\n    int d=ymd%100;\n    if((y%4==0 && y%100!=0) || y%400==0) months[2]=29; // 闰年\n    if(m<1 || m>12) return 0;\n    if(d<1 || d>months[m]) return 0;\n    return 1;\n}\n\nint main(){\n    int date1, date2, ans=0;\n    cin>>date1>>date2;\n    \n    for(int i=date1/10000; i<=date2/10000; i++){\n        // 生成回文日期\n        // 判断日期是否合法，是否在date区间\n        int j=i%10*1000\n             +i/10%10*100\n             +i/100%10*10\n             +i/1000%10;\n        int k=i*10000+j;\n        \n        if(dateOK(k) && k>=date1 && k<=date2)\n            ans++;\n    }\n    \n    cout<<ans;\n    \n    return 0;\n}\n```\n</details>\n\n\n<details> \n<summary>AcWing 441. 数字统计</summary>\n\n* [AcWing 441. 数字统计](https://www.acwing.com/problem/content/443/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main(){\n    int l, r, ans=0;\n    cin>>l>>r;\n    for(int i=l; i<=r; i++){\n        int j=i;\n        while(j){\n            if(2 == j%10) ans++;\n            j/=10;\n        }\n    }\n    cout<<ans;\n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 1245. 特别数的和</summary>\n\n* [AcWing 1245. 特别数的和](https://www.acwing.com/problem/content/1247/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint n, res;\n\nbool is(int i){\n    while(i){\n        int j=i%10;\n        if(j==2 || j==0 || j==1 || j==9) return 1;\n        i/=10;\n    }\n    return 0;\n}\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++)\n        if(is(i)) res+=i;\n    \n    cout<<res;\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 1210. 连号区间数</summary>  \n\n* [AcWing 1210. 连号区间数](https://www.acwing.com/problem/content/1212/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int N=1e4+10;\nint arr[N], n, res;\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++) scanf(\"%d\", &arr[i]);\n    \n    // 枚举每个区间\n    for(int l=1; l<=n; l++){\n        int mmax=arr[l];\n        int mmin=arr[l];\n        for(int r=l; r<=n; r++){\n            mmin=min(mmin, arr[r]);\n            mmax=max(mmax, arr[r]);\n            \n            if(r-l==mmax-mmin) res++;\n        }\n    }\n    \n    cout<<res;\n    \n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary>AcWing 1204. 错误票据</summary>  \n\n* [AcWing 1204. 错误票据](https://www.acwing.com/problem/content/description/1206/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int N=1e5+10;\n\nint arr[N], mmin=0x3f3f3f3f, mmax=-0x3f3f3f3f, m, n;\n\nint main(){\n    int t; cin>>t;\n    while(scanf(\"%d\", &t)!=EOF){\n        arr[t]++;\n        mmin = mmin<t ? mmin:t;\n        mmax = max(mmax, t);\n    }    \n    \n    for(int i=mmin; i<=mmax; i++){\n        if(arr[i]==2) n=i;\n        if(arr[i]==0) m=i;\n    }\n    \n    cout<<m<<\" \"<<n;\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 1236. 递增三元组</summary>  \n\n* [AcWing 1236. 递增三元组](https://www.acwing.com/problem/content/1238/)\n\n```cpp\n#pragma G++ optimize(\"Ofast\")\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e5+10;\n\nLL ans;\nint arr[N], brr[N], crr[N], n;\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++) scanf(\"%d\", &arr[i]);\n    for(int i=1; i<=n; i++) scanf(\"%d\", &brr[i]);\n    for(int i=1; i<=n; i++) scanf(\"%d\", &crr[i]);\n    \n    sort(arr+1, arr+1+n);\n    sort(brr+1, brr+1+n);\n    sort(crr+1, crr+1+n);\n    \n    // 枚举b\n    for(int i=1; i<=n; i++){\n        int a = lower_bound(arr+1, arr+1+n, brr[i])-arr-1;\n        int c = upper_bound(crr+1, crr+1+n, brr[i])-crr;\n        \n        if(a>=1 && c<=n)\n            ans+=1LL*a*(n-c+1);\n    }\n    \n    cout<<ans;\n    \n    return 0;\n}\n```\n\n</details>\n\n\n\n<details> \n<summary>AcWing 1219. 移动距离</summary>  \n\n* [AcWing 1219. 移动距离](https://www.acwing.com/problem/content/1221/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main(){\n    int w, m, n;\n    cin>>w>>m>>n;\n    \n    // 1维变2维\n    int x1=(m-1)/w+1;\n    int y1=m%w;\n    if(y1==0) y1=w;\n    \n    int x2=(n-1)/w+1;\n    int y2=n%w;\n    if(y2==0) y2=w;\n    \n    if(!(x1&1)) y1=w-y1+1;    \n    if(!(x2&1)) y2=w-y2+1;\n    \n    //cout<<x1<<\" \"<<y1<<\"\\n\"<<x2<<\" \"<<y2<<\"\\n\";\n    \n    cout<<abs(x2-x1)+abs(y2-y1);\n    \n    return 0;\n}\n```\n\n</details>\n\n\n\n\n\n* <h3 id=1.1.2> 递推与递归 </h3>\n\n* <h3 id=1.1.3> 前缀和与差分 </h3>\n\n* <h3 id=1.1.4> 排序 </h3>\n\n* <h3 id=1.1.5> 二分 </h3>\n\n* <h3 id=1.1.6> 双指针 </h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=1.3><font color=\"green\"> 三、搜索 </font></h2>\n\n* <h3 id=1.3.1> DFS </h3>\n\n* <h3 id=1.3.2> BFS </h3>\n\n<details> \n<summary> AcWing 1101. 献给阿尔吉侬的花束 </summary>  \n\n* [AcWing 1101. 献给阿尔吉侬的花束](https://www.acwing.com/problem/content/1103/)\n\n```cpp\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[4][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\nconst int inf=0x3f3f3f3f;\nconst int N=210;\n\nint g[N][N];\nint st[N][N];\nint res[N][N];\nPII s, e;\nint n, m;\n\nvoid solve(){\n    memset(g, 0, sizeof g);\n    memset(st, 0, sizeof st);\n    memset(res, 0, sizeof res);\n    \n    cin>>n>>m;\n    for(int i=1; i<=n; i++){\n        string t; cin>>t;\n        for(int j=1; j<=m; j++)\n            if(t[j-1]=='S')\n                s={i,j};\n            else if(t[j-1]=='E')\n                e={i,j};\n            else if(t[j-1]=='#')\n                g[i][j]=1;\n    }\n    \n    queue<PII> q;\n    res[s.fst][s.sed]=0;\n    q.push(s), st[s.fst][s.sed]=1;\n    \n    while(q.size()){\n        auto u=q.front();\n        q.pop();\n        \n        for(int i=0; i<4; i++){\n            int nx=u.fst+dxy[i][0];\n            int ny=u.sed+dxy[i][1];\n            \n            if(g[nx][ny]) continue;\n            if(nx<1 || ny<1 || nx>n || ny>m) continue;\n            if(st[nx][ny]) continue;\n            \n            res[nx][ny]=res[u.fst][u.sed]+1;\n            q.push({nx, ny}), st[nx][ny]=1;\n        }\n        if(st[e.fst][e.sed]) break; // 剪枝\n    }\n    \n    if(res[e.fst][e.sed])\n        cout<<res[e.fst][e.sed]<<\"\\n\";\n    else\n        cout<<\"oop!\\n\";\n        \n    return ;\n}\n\nint main(){\n    int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n</details>\n\nBFS：武士风度的牛、逃离迷宫、地牢大师、A计划\n\n\n* <h3 id=1.3.3> 剪枝优化与Flood Fill </h3>\n\n<details> \n<summary> AcWing 1113. 红与黑 </summary>  \n\n* [AcWing 1113. 红与黑](https://www.acwing.com/problem/content/1115/)\n\n```cpp\n// dfs 写法\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[][2]={{-1,0},{1,0},{0,-1},{0,1}};\nconst int N=30;\n\nint n, m, cnt;\nbool g[N][N];\nbool st[N][N];\nPII S;\n\nvoid dfs(int x, int y){\n    cnt++;\n    for(int i=0; i<4; i++){\n        int nx=x+dxy[i][0];\n        int ny=y+dxy[i][1];\n        \n        if(nx<1 || ny<1 || nx>n || ny>m) continue;\n        if(g[nx][ny] || st[nx][ny]) continue;\n        \n        st[nx][ny]=1;\n        dfs(nx, ny);\n    }\n    return ;\n}\n\nvoid solve(){\n    cnt=0;\n    memset(g, 0, sizeof g);\n    memset(st, 0, sizeof st);\n    \n    for(int i=1; i<=n; i++){\n        string s; cin>>s;\n        for(int j=1; j<=m; j++)\n            if(s[j-1]=='#') g[i][j]=1;\n            else if(s[j-1]=='@') S={i,j};\n    }\n    \n    // 进入这个位置，将其能够搜索到的其他位置打上标记\n    st[S.fst][S.sed]=1;\n    dfs(S.fst, S.sed);\n    cout<<cnt<<\"\\n\";\n    return ;\n}\n\nint main(){\n    while(cin>>m>>n)\n        if(m!=0 && n!=0) solve();\n    return 0;\n}\n```\n\n\n```cpp\n// bfs 写法\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[][2]={{-1,0},{1,0},{0,-1},{0,1}};\nconst int N=30;\n\nint n, m, cnt;\nbool g[N][N];\nbool st[N][N];\nPII S;\n\nvoid bfs(int x, int y){\n    \n    queue<PII> q;\n    q.push({x, y}), st[x][y]=1, cnt++;\n    \n    while(q.size()){\n        auto u=q.front();\n        q.pop();\n        \n        for(int i=0; i<4; i++){\n            int nx=u.fst+dxy[i][0];\n            int ny=u.sed+dxy[i][1];\n            \n            if(nx<1 || ny<1 || nx>n || ny>m) continue;\n            if(g[nx][ny] || st[nx][ny]) continue;\n            \n            q.push({nx, ny}), st[nx][ny]=1, cnt++;\n        }\n    }\n}\n\nvoid solve(){\n    cnt=0;\n    memset(g, 0, sizeof g);\n    memset(st, 0, sizeof st);\n    \n    for(int i=1; i<=n; i++){\n        string s; cin>>s;\n        for(int j=1; j<=m; j++)\n            if(s[j-1]=='#') g[i][j]=1;\n            else if(s[j-1]=='@') S={i,j};\n    }\n    \n    // 进入这个位置，将其能够搜索到的其他位置打上标记\n    st[S.fst][S.sed]=1;\n    bfs(S.fst, S.sed);\n    cout<<cnt<<\"\\n\";\n    return ;\n}\n\nint main(){\n    while(cin>>m>>n)\n        if(m!=0 && n!=0) solve();\n    return 0;\n}\n```\n\n</details>\n\n\n\n<details> \n<summary> AcWing 1233. 全球变暖 </summary>  \n\n* [AcWing 1233. 全球变暖](https://www.acwing.com/problem/content/1235/)\n\n```cpp\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N=1010;\nconst int dxy[][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\n\nbool g[N][N];\nbool st[N][N];\nint n, res;\n\n// 如果存在一个点，满足其上下左右都是岛屿的情况，那么这个点肯定不会被淹没\nbool bfs(int x, int y){\n    bool flg=0; \n    \n    queue<PII> q;\n    q.push({x,y}), st[x][y]=1;\n    \n    while(q.size()){\n        auto u=q.front();\n        q.pop();\n        \n        int cnt=0;\n        for(int i=0; i<4; i++){\n            int nx=u.fst+dxy[i][0];\n            int ny=u.sed+dxy[i][1];\n            \n            if(g[nx][ny]==1) cnt++;\n            \n            if(nx<1 || ny<1 || nx>n || ny>n) continue;\n            if(g[nx][ny]!=1 || st[nx][ny]) continue;\n            \n            q.push({nx, ny}), st[nx][ny]=1;\n        }\n        if(cnt==4) flg=1; // 存在上下左右都有岛屿的情况\n    }\n    \n    return flg==0;\n}\n\nint main(){\n    cin>>n;\n    for(int i=1; i<=n; i++){\n        string s; cin>>s;\n        for(int j=1; j<=n; j++)\n            if(s[j-1]=='#') g[i][j]=1;\n    }\n    \n    for(int i=1; i<=n; i++)\n        for(int j=1; j<=n; j++)\n            if(g[i][j] && !st[i][j])\n                if( bfs(i,j) ) res++;\n    \n    cout<<res;\n    \n    return 0;\n}\n```\n\n</details>\n\n\n\n<details> \n<summary> Luogu P1141 01迷宫 </summary>  \n\n* [Luogu P1141 01迷宫](https://www.luogu.com.cn/problem/P1141)\n\n```cpp\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int dxy[4][2]={{-1,0}, {1,0}, {0,-1}, {0,1}};\nconst int N=1e3+10;\n\nint n, m, flg, cnt;\n\nbool g[N][N];\nbool st[N][N];\nint res[N][N]; // 用res存标记，每个标记对应连接数量\nint num[1000000];\n\nvoid bfs(int ux, int uy){\n\t\n\tqueue<PII> q;\n\tq.push({ux, uy}), st[ux][uy]=1, res[ux][uy]=flg;\n\t\n\twhile(q.size()){\n\t\tauto u=q.front();\n\t\tq.pop();\n\t\tcnt++;\n\t\t\n\t\tfor(int i=0; i<4; i++){\n\t\t\tint nx=u.fst+dxy[i][0];\n\t\t\tint ny=u.sed+dxy[i][1];\n\n\t\t\tif(nx<1 || ny<1 || nx>n || ny>n) continue;\n\t\t\tif(g[nx][ny]==g[u.fst][u.sed] || st[nx][ny]) continue;\n\n\t\t\tq.push({nx, ny}), st[nx][ny]=1, res[nx][ny]=flg;\n\t\t}\n\t}\n}\n\nint main(){ \n    cin>>n>>m;\n\tfor(int i=1; i<=n; i++){\n\t\tstring s; cin>>s;\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tif(s[j-1]=='1') g[i][j]=1;\n\t}\n    \n\tfor(int i=1; i<=n; i++)\n\t\tfor(int j=1; j<=n; j++)\n\t\t\tif(!st[i][j]) \n\t\t\t\tcnt=0, ++flg, bfs(i, j), num[flg]=cnt;\n    // 因为每个 连通块 的大小，需要走完才知道\n    // 所以我们在进入每一块连通块时，给次连通块每个位置做上唯一flg\n    // bfs结束的时候，将cnt赋值给num[flg]，查询时，就可以直接查询了\n\n\tfor(int i=1; i<=m; i++){\n\t\tint a, b; scanf(\"%d%d\", &a, &b);\n\t\tcout<<num[res[a][b]]<<\"\\n\";\n\t}\n\n    return 0;\n}\n```\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=1.6><font color=\"green\"> 六、数学 </font></h2>\n\n* <h3 id=1.6.4> 质（素）数 </h3>\n\n<details> \n<summary> AcWing 866. 试除法判定质数 </summary>  \n\n* [AcWing 866. 试除法判定质数](https://www.acwing.com/problem/content/868/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nbool isP(int n){\n    if(n<2) return false;\n    for(int i=2; i<=n/i; i++)\n        if(n%i==0)\n            return false;\n    return true;\n}\n\nvoid solve(){\n    int n; cin>>n;\n    \n    if(isP(n))\n        puts(\"Yes\");\n    else\n        puts(\"No\");\n    return ;\n}\n\nint main(){\n    int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary> AcWing 867. 分解质因数 </summary>  \n\n* [AcWing 867. 分解质因数](https://www.acwing.com/problem/content/869/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid solve(){\n    int n; cin>>n;\n    \n    for(int i=2; i<=n/i; i++)\n        if(n%i==0){\n            // 质因数 i\n            \n            int cnt=0;\n            while(n%i==0){\n                n/=i;\n                cnt++;\n            }\n            printf(\"%d %d\\n\", i, cnt);\n        }\n        \n    if(n>1) printf(\"%d 1\\n\", n);\n    puts(\"\");\n}\n\nint main(){\n    int T; cin>>T; while(T--)\n    solve();\n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary> AcWing 868. 筛质数 </summary>  \n\n* [AcWing 867. 分解质因数](https://www.acwing.com/problem/content/description/870/)\n\n\n\n```cpp\n// 埃式筛 O(nloglogn)\n#include <iostream>\nusing namespace std;\n\nconst int N=1e6+10;\n\n// 素数的数量 近似 N/(2*lgN)\n\nint primes[100000], cnt;  // 素数集合\nbool st[N];     // 标记合数\n\nvoid make_primes(int n){\n    st[1]=1;\n    for(int i=2; i<=n; i++)\n        if(!st[i]){\n            primes[++cnt]=i;\n            for(int j=i; j<=n; j+=i) st[j]=1;   // 标记合数\n        }\n}\n\nint main(){\n    int n; cin>>n;\n    \n    make_primes(n);\n    \n    cout<<cnt;\n    \n    return 0;\n}\n```\n\n```cpp\n// 欧拉筛 O(n)\n#include <iostream>\nusing namespace std;\n\nconst int N=1e6+10;\n\nint primes[100000], cnt;\nbool st[N];\n\nvoid make_primes(int n){\n    st[1]=1;\n    for(int i=2; i<=n; i++){\n        if(!st[i]) primes[++cnt]=i;\n        for(int j=1; primes[j]<=n/i; j++){\n            st[ primes[j]*i ] = 1;  // 用最小质因子去筛\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\nint main(){\n    int n; cin>>n;\n    \n    make_primes(n);\n    \n    cout<<cnt;\n    \n    return 0;\n}\n```\n</details>\n\n\n\n<details> \n<summary>Luogu P1835 素数密度 </summary>  \n\n* [Luogu P1835 素数密度](https://www.luogu.com.cn/problem/P1835)\n\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <unordered_set>\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N=1e6+10;\n\nint primes[100000], cnt;\nbool st[N];\n\nLL L, R, ans;\nunordered_set <LL> H;    // 如果H=1，说明被筛掉\n\n// 对于 n 而言\n// 其质因子的范围是 [ 2-sqrt(n) ]\n// 因此我们可以用质因子去将[ L-R ] 中的合数给弄出来\nvoid make_primes(int n){\n    st[1]=1;\n    for(int i=2; i<=n; i++){\n        if(!st[i]) primes[++cnt]=i;\n        for(int j=1; primes[j]<=n/i; j++){\n            st[ primes[j]*i ] = 1;  // 用最小质因子去筛\n            if(i%primes[j]==0) break;\n        }\n    }\n}\n\nint main(){\n    make_primes( sqrt(pow(2,31)-1) );\n    \n    cin>>L>>R;\n    for(int i=1; i<=cnt; i++){  // 枚举质数\n        LL b = L / primes[i];\n        LL j = b * primes[i];\n        while(j<L) j+=primes[i];   // 定位到大于L，同时能被primes[i]整除的第一个数\n        \n        for( ; j<=R; j+=primes[i])\n            H.insert(j); // 筛掉再说\n    }\n\n    for(LL i=L; i<=R; i++){        \n        if(i<sqrt(pow(2,31)-1)) {\n            if(st[i]==0) ans++;\n            continue;\n        }\n        if(!H.count(i)) ans++;\n    }\n    cout<<ans;\n    \n    return 0;\n}\n```\n\n\n</details>\n\n\n\n\n\n<h2 id=1.7><font color=\"green\"> 七、图论 </font></h2>\n\n* <h3 id=1.7.1> 最短路 </h3>\n\n<details> \n<summary> AcWing 849. Dijkstra求最短路 I <font style=\"background-color:red\", color=black><b>dijkstra[ 模板 ]</b></font></summary>  \n\n* [AcWing 849. Dijkstra求最短路 I](https://www.acwing.com/problem/content/851/)\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int N=510;\nconst int inf=0x3f3f3f3f;\n\nint n, m;\nint edge[N][N]; // 稠密图\nint dis[N]; // 最短路\nbool st[N]; // 是否确定最短\n\nvoid dijkstra(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    \n    dis[s]=0;\n    \n    for(int i=1; i<=n; i++){\n        \n        int t=-1;\n        for(int j=1; j<=n; j++)\n            if(!st[j] && (t==-1 ||  dis[t]>dis[j]))\n                t=j;    \n        \n        st[t]=true;\n        if(t==e) break;\n        \n        for(int j=1; j<=n; j++)\n            dis[j]=min(dis[j], dis[t]+edge[t][j]);\n    }\n}\n\nint main(){\n    memset(edge, 0x3f, sizeof edge);\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int x, y, z;\n        scanf(\"%d%d%d\", &x, &y, &z);\n        edge[x][y]=min(edge[x][y], z);\n    }\n    \n    dijkstra(1, n);\n    \n    if(dis[n]==inf)\n        cout<<\"-1\";\n    else\n        cout<<dis[n];\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>Luogu P4779 【模板】单源最短路径（标准版） <font style=\"background-color:red\", color=black><b>dijkstra堆优化[ 模板 ]</b></font></summary>  \n\n* [Luogu P4779 【模板】单源最短路径（标准版）](https://www.luogu.com.cn/problem/P4779)\n\n```cpp\n#define fst first\n#define sed second\n#define pb push_back\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N=1e5+10;\nconst int inf=0x3f3f3f3f;\n\nvector<vector<PII>> edge(N);    // 邻接表\nbool st[N];\nint dis[N];\n\nint n, m, S;\n\nvoid dijkstra(int s){\n    memset(dis, 0x3f, sizeof dis);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n\n    dis[s]=0;\n    heap.push({dis[s], s});\n\n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n\n        if(st[x]) continue;\n        st[x]=1;\n\n        for(auto &[y, z]: edge[x])\n            if( dis[y] > dis[x]+z ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n\n}\n\nint main(){\n    cin>>n>>m>>S;\n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        edge[x].pb({y, w});\n    }\n\n    dijkstra(S);\n\n    for(int i=1; i<=n; i++) cout<<dis[i]<<\" \";\n\n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary>AcWing 853. 有边数限制的最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford[ 模板 ]</b></font></summary>  \n\n* [AcWing 853. 有边数限制的最短路](https://www.acwing.com/problem/content/855/)\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int inf=0x3f3f3f3f;\nconst int N=510;\n\nint n, m, k;\nint edge[N][N];\nint dis[N];\nint bkup[N];\n\nvoid bellman_ford(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    \n    dis[s]=0;\n    \n    for(int i=1; i<=k; i++){\n        bool flg=0;\n        memcpy(bkup, dis, sizeof dis);   \n        \n        for(int x=1; x<=n; x++)\n            for(int y=1; y<=n; y++)\n                if( dis[y] > bkup[x]+edge[x][y] ){\n                    dis[y] = bkup[x]+edge[x][y];\n                    flg=1;\n                }\n        \n        if(!flg) break;\n    }\n}\n\nint main(){\n    memset(edge, 0x3f, sizeof edge);\n    cin>>n>>m>>k;\n    for(int i=1; i<=m; i++){\n        int x, y, z;\n        scanf(\"%d%d%d\", &x, &y, &z);\n        edge[x][y]=min(edge[x][y], z);\n    }\n    \n    bellman_ford(1, n);\n    \n    if(dis[n]>inf/2)\n        cout<<\"impossible\";\n    else\n        cout<<dis[n];\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary>AcWing 851. spfa求最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford队列优化（spfa）[ 模板 ]</b></font> </summary>  \n\n* [AcWing 851. spfa求最短路](https://www.acwing.com/problem/content/853/)\n\n```cpp\n#pragma G++ optimize(\"Ofast\")\n\n#define fst first\n#define sed second\n#include <iostream>\n#include <queue>\n#include <cstring>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int inf=0x3f3f3f3f;\nconst int N=1e5+10;\n\nint n, m;\nvector<PII> edge[N];\nint dis[N]; \nbool st[N]; // 是否在队列中\n\nvoid spfa(int s, int e){\n    memset(dis, 0x3f, sizeof dis);\n    queue<int> q;\n    \n    dis[s]=0;\n    q.push(s), st[s]=1;\n    \n    while(q.size()){\n        auto x=q.front();\n        q.pop(), st[x]=0;\n        \n        for(auto& [y, z]: edge[x])\n            if( dis[y] > dis[x]+z){\n                dis[y] = dis[x]+z;\n                if(!st[y])\n                    q.push(y), st[y]=1;\n            }\n    }\n}\n\nint main(){\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int x, y, z;\n        scanf(\"%d%d%d\", &x, &y, &z);\n        edge[x].push_back({y, z});\n    }\n    \n    spfa(1, n);\n    \n    if(dis[n]==inf)\n        cout<<\"impossible\";\n    else\n        cout<<dis[n];\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary> Luogu P3371 【模板】单源最短路径（弱化版） <font style=\"background-color:orange\", color=black><b>spfa??[ 模板 ]</b></font></summary>  \n\n* [Luogu P3371 【模板】单源最短路径（弱化版）](https://www.luogu.com.cn/problem/P3371)\n\n</details>\n\n<details> \n<summary>AcWing 854. Floyd求最短路 <font style=\"background-color:yellow\", color=black><b>Floyd[ 模板 ]</b></font> </summary>  \n\n* [AcWing 854. Floyd求最短路](https://www.acwing.com/problem/content/856/)\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nconst int inf=0x3f3f3f3f;\nconst int N=210;\n\nint n, m, k;\nint dis[N][N];\n\nvoid floyd(){\n    for(int k=1; k<=n; k++)\n        for(int i=1; i<=n; i++)\n            for(int j=1; j<=n; j++)\n                dis[i][j]=min(dis[i][j], dis[i][k]+dis[k][j]);\n}\n\nint main(){\n    cin>>n>>m>>k;\n    \n    for(int i=1; i<=n; i++)\n        for(int j=1; j<=n; j++)\n            if(i==j) dis[i][j]=0;\n            else dis[i][j]=inf;\n                \n    for(int i=1; i<=m; i++){\n        int x, y, z; \n        scanf(\"%d%d%d\", &x, &y, &z);\n        dis[x][y]=min(dis[x][y], z);\n    }\n    \n    floyd();\n    \n    for(int i=1; i<=k; i++){\n        int x, y;\n        scanf(\"%d%d\", &x, &y);\n        if(dis[x][y]>inf/2) puts(\"impossible\");\n        else cout<<dis[x][y]<<\"\\n\";\n    }\n    \n    return 0;\n}\n```\n\n</details>\n\n<details> \n<summary> Luogu P1629 邮递员送信 <font style=\"background-color:red\", color=black><b>dijkstra堆优化</b></font></summary> \n\n* [Luogu P1629 邮递员送信](https://www.luogu.com.cn/problem/P1629)\n\n```cpp\n#define fst first\n#define sed second\n#define pb push_back\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef long long LL;\ntypedef pair<int ,int> PII;\n\nconst int N=1e3+10;\n\nvector<vector<PII>> edge(N);\nvector<vector<PII>> redge(N); // 反向边\nbool st[N];\nint dis[N]; // 1到每个点的最短路\n\nint n, m;\nLL ans;\n\nvoid dijkstra(int s, vector<vector<PII>> &e){\n    memset(st, 0, sizeof st);\n    memset(dis, 0x3f, sizeof dis);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n\n    dis[s]=0;\n    heap.push({dis[s], s});\n\n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n\n        if(st[x]) continue;\n        st[x]=1;\n\n        for(auto &[y, z]: e[x])\n            if( dis[y] > dis[x]+z ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout);\n    int n, m;\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        edge[x].pb({y, w});\n        redge[y].pb({x, w});\n    }\n    \n    dijkstra(1, edge);\n    for(int i=2; i<=n; i++) ans+=dis[i];\n    dijkstra(1, redge);\n    for(int i=2; i<=n; i++) ans+=dis[i];\n    cout<<ans;\n\n    return 0;\n}\n```\n\n</details>\n\n\n<details> \n<summary>  Luogu P1119 灾后重建 <font style=\"background-color:yellow\", color=black><b>Floyd</b></font></summary> \n\n* [Luogu P1119 灾后重建](https://www.luogu.com.cn/problem/P1119)\n\n```cpp\n#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int N=210;\n\nint dis[N][N];\nint ti[N];\nbool st[N];\n\nint n, m, q;\n\nint floyd(int x, int y, int t){\n    for(int k=0; k<n; k++){\n        if(ti[k]>t || st[k]) continue;\n        st[k]=1;\n\n        for(int i=0; i<n; i++)\n            for(int j=0; j<n; j++)\n                if( dis[i][j] > dis[i][k] + dis[k][j])\n                    dis[j][i] = dis[i][j] = dis[i][k] + dis[k][j];\n    }\n\n    if(dis[x][y]==0x3f3f3f3f || ti[x]>t || ti[y]>t) \n        return -1;\n    else\n        return dis[x][y];\n}\n\nint main(){\n    freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout);\n    memset(dis, 0x3f, sizeof dis);\n    cin>>n>>m;\n    for(int i=0; i<n; i++) scanf(\"%d\", &ti[i]);\n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        dis[x][y]=min(dis[x][y], w);\n        dis[y][x]=min(dis[y][x], w);\n    }\n    for(int i=0; i<n; i++) dis[i][i]=0;\n\n    cin>>q;\n    while(q--){\n        int x, y, t;\n        scanf(\"%d%d%d\", &x, &y, &t);\n        cout<<floyd(x, y, t)<<\"\\n\";\n    }\n\n    return 0;\n}\n```\n\n```cpp\n#pragma G++ optimize(\"Ofast\")\n#define fst first\n#define sed second\n\n#include <iostream>\n#include <cstring>\n#include <queue>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N=210;\n\nint edge[N][N];\nint dis[N]; // 最短路\nbool st[N]; // 是否确定最短路\n\nint n, m, q;\nint ti[N];  // 每个村庄完成重建的时间\n\nint dijkstra(int s, int e, int t){\n    memset(dis, 0x3f, sizeof dis);\n    memset(st, 0, sizeof st);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n\n    dis[s]=0;\n    heap.push({dis[s], s});\n    \n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n\n        if(st[x]) continue;\n        st[x]=1;\n\n        edge[s][x]=min(edge[s][x], dis[x]); // 更新最短路\n\n        for(int y=1; y<=n; y++){    // 用邻接表可能会更快\n            int z=edge[x][y];\n\n            if( dis[y] > dis[x]+z && ti[x]<=t && ti[y]<=t ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n        }\n    }\n\n    if(dis[e]==0x3f3f3f3f)\n        return -1;\n    else\n        return dis[e];\n}\n\nint main(){\n    //freopen(\"in.txt\", \"r\", stdin); freopen(\"out.txt\", \"w\", stdout);\n    memset(edge, 0x3f, sizeof edge);\n    cin>>n>>m;\n    for(int i=1; i<=n; i++) scanf(\"%d\", &ti[i]);    \n    for(int i=1; i<=m; i++){\n        int x, y, w;\n        scanf(\"%d%d%d\", &x, &y, &w);\n        x++, y++;\n        edge[x][y]=min(edge[x][y], w);\n        edge[y][x]=min(edge[y][x], w);\n    }\n\n    cin>>q;\n    while(q--){\n        int x, y, t;\n        scanf(\"%d%d%d\", &x, &y, &t);\n        x++, y++;\n        cout<<dijkstra(x, y, t)<<\"\\n\";\n    }\n    return 0;\n}\n```\n\n</details>\n\n\n\n\n<details>\n<summary> AcWing 1488. 最短距离 </summary>\n\n* [AcWing 1488. 最短距离](https://www.acwing.com/problem/content/1490/)\n\n```cpp\n// 超级源点\n#pragma G++ optimize(\"Ofast\")\n\n#define pb push_back\n#define fst first\n#define sed second\n\n#include <iostream>\n#include <queue>\n#include <cstring>\n#include <vector>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int inf=0x3f3f3f3f;\nconst int N=1e5+10;\n\nint n, m, k, q;\nvector<PII> edge[N];\nint dis[N];\nbool st[N];\n\nint dijkstra(int s){\n    int ans=inf;\n    memset(dis, 0x3f, sizeof dis);\n    memset(st, 0, sizeof st);\n    priority_queue<PII, vector<PII>, greater<PII>> heap;\n    \n    dis[s]=0;\n    heap.push({dis[s], s});\n    \n    while(heap.size()){\n        auto x=heap.top().sed;\n        heap.pop();\n        \n        if(st[x]) continue;\n        st[x]=1;\n        \n        //cout<<dis[x]<<\"\\n\";\n        for(auto &[y, z]: edge[x])\n            if( dis[y] > dis[x]+z ){\n                dis[y] = dis[x]+z;\n                heap.push({dis[y], y});\n            }\n    }\n    \n    return ans;\n}\n\nint main(){\n    cin>>n>>m;\n    for(int i=1; i<=m; i++){\n        int a, b, c;\n        scanf(\"%d%d%d\", &a, &b, &c);\n        edge[a].pb({b, c});\n        edge[b].pb({a, c});\n    }\n    cin>>k;\n    for(int i=1; i<=k; i++){\n        int j;\n        scanf(\"%d\", &j);\n        edge[n+1].pb({j, 0});\n    }\n    \n    dijkstra(n+1);\n    \n    cin>>q;\n    while(q--){\n        int s;\n        scanf(\"%d\", &s);\n        cout<<dis[s]<<\"\\n\";\n    }\n    \n    return 0;\n}\n```\n\n</details>\n\n<details>\n\n<summary> AcWing 1507. 旅行计划 </summary>\n\n* [AcWing 1507. 旅行计划](https://www.acwing.com/problem/content/description/1509/)\n\n```cpp\n// 记录路径\n#pragma G++ optimize(\"Ofast\")\n\n#define pb push_back\n#define fst first\n#define sed second\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> PII;\n\nconst int N = 510;\n\nint n, m, S, D;\nvector<pair<int, PII>> edge[N]; // x->y \nint pre[N]; // 最短路径中，最短的一条路径的前驱\nPII dis[N]; // 最短路径及最小花费\nbool st[N]; // 是否确定最小\n\nvoid dijkstra(int s, int e) {\n    memset(dis, 0x3f, sizeof dis);\n    priority_queue<pair<PII, int>, vector<pair<PII, int>>, greater<pair<PII, int>>> heap;\n\n    dis[s] = { 0, 0 };\n    heap.push({ dis[s], s });\n\n    while (heap.size()) {\n        auto x = heap.top().sed;\n        heap.pop();\n\n        if (st[x]) continue;\n        st[x] = 1;\n\n        for (auto& [y, w] : edge[x]) {\n            PII t = { dis[x].fst + w.fst, dis[x].sed + w.sed };\n            if (dis[y] > t) {\n                dis[y] = t;\n                heap.push({ dis[y], y });\n                pre[y]=x;   // 通过x点到y\n            }\n        }\n    }\n}\n\nint main() {\n    cin >> n >> m >> S >> D;\n    for (int i = 1; i <= m; i++) {\n        int a, b, c, d;\n        scanf(\"%d%d%d%d\", &a, &b, &c, &d);\n        edge[a].pb({ b, {c, d} });\n        edge[b].pb({ a, {c, d} });\n    }\n\n    dijkstra(D, S); // 反着来，这样可以直接用pre输出\n\n    int u = S;\n    cout<<S<<\" \";\n    while (u != D) cout << pre[u] << \" \", u = pre[u];\n\n    cout << dis[S].fst << \" \" << dis[S].sed;\n\n    return 0;\n}\n```\n\n</details>\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\n<h1 id=2><font color=\"blue\">牛刀小试</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n  1. 基础算法\n       * 位运算 [0x01]()\n       * 倍增 [0x39]()\n       * 构造 \n  \n  2. 数据结构\n        * 并查集 [0x41]()\n        * 树状数组 [0x42]()\n        * 线段树 [0x43]()\n        * 二叉搜索树与平衡树 [0x46]()\n        * 分块\n        * 点分治\n        * 可持久化数据结构\n\n  3. 搜索\n       * 迭代加深\n       * 双向DFS或BFS\n       * BFS变形\n       * A* 与 IDA*\n  </details>\n\n---\n\n\n<h1 id=3><font color=\"red\">略有所成</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n  </details>\n\n\n\n","slug":"teach3","published":1,"updated":"2022-12-18T14:20:09.013Z","_id":"clars00ks00009oh3ghx7fxpc","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=1><font color=\"green\">初窥门径</font></h1>\n<details>\n<summary>目录</summary>\n\n<ol>\n<li><p>基础算法</p>\n<ul>\n<li><a href=\"#1.1.1\">枚举与模拟</a></li>\n<li>递推与递归 <a href=\"\">0x02</a></li>\n<li>前缀和与差分 <a href=\"\">0x03</a></li>\n<li>排序 <a href=\"\">0x05</a></li>\n<li>二分 <a href=\"\">0x04</a></li>\n<li>双指针</li>\n</ul>\n</li>\n<li><p>数据结构</p>\n<ul>\n<li>栈 <a href=\"\">0x11</a></li>\n<li>队列 <a href=\"\">0x12</a> </li>\n<li>哈希表 <a href=\"\">0x14</a></li>\n<li>堆</li>\n</ul>\n</li>\n<li><p>搜索</p>\n<ul>\n<li>DFS <a href=\"\">0x22</a></li>\n<li>BFS <a href=\"\">0x25</a></li>\n<li>剪枝优化与Flood Fill</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li>KMP <a href=\"\">0x15</a> </li>\n<li>Trie <a href=\"\">0x16</a></li>\n</ul>\n</li>\n<li><p>动态规划</p>\n<ul>\n<li>背包问题 <a href=\"\">0x52</a></li>\n<li>线性DP <a href=\"\">0x51</a></li>\n<li>区间DP <a href=\"\">0x53</a></li>\n</ul>\n</li>\n<li><p>数学</p>\n<ul>\n<li>进制转换</li>\n<li>高精度</li>\n<li>快速幂</li>\n<li>质（素）数</li>\n<li>约数个数</li>\n<li>组合计数 <a href=\"\">0x36</a></li>\n</ul>\n</li>\n<li><p>图论</p>\n<ul>\n<li>最短路 <a href=\"\">0x61</a></li>\n<li>拓扑排序 </li>\n<li>最小生成树 <a href=\"\">0x62</a>  </details></li>\n</ul>\n</li>\n</ol>\n<h2 id=1.1><font color=\"green\"> 一、基础算法 </font></h2>\n\n<ul>\n<li><h3 id=1.1.1> 枚举与模拟 </h3></li>\n</ul>\n<details> \n<summary>AcWing 466.回文日期</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/468/\">AcWing 466. 回文日期</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> months[<span class=\"hljs-number\">13</span>]=&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">dateOK</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ymd)</span></span>&#123;<br>    months[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">28</span>; <span class=\"hljs-comment\">// 恢复现场</span><br>    <span class=\"hljs-type\">int</span> y=ymd/<span class=\"hljs-number\">10000</span>;<br>    <span class=\"hljs-type\">int</span> m=ymd%<span class=\"hljs-number\">10000</span>/<span class=\"hljs-number\">100</span>;<br>    <span class=\"hljs-type\">int</span> d=ymd%<span class=\"hljs-number\">100</span>;<br>    <span class=\"hljs-keyword\">if</span>((y%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span> &amp;&amp; y%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>) || y%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>) months[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">29</span>; <span class=\"hljs-comment\">// 闰年</span><br>    <span class=\"hljs-keyword\">if</span>(m&lt;<span class=\"hljs-number\">1</span> || m&gt;<span class=\"hljs-number\">12</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span>(d&lt;<span class=\"hljs-number\">1</span> || d&gt;months[m]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> date1, date2, ans=<span class=\"hljs-number\">0</span>;<br>    cin&gt;&gt;date1&gt;&gt;date2;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=date1/<span class=\"hljs-number\">10000</span>; i&lt;=date2/<span class=\"hljs-number\">10000</span>; i++)&#123;<br>        <span class=\"hljs-comment\">// 生成回文日期</span><br>        <span class=\"hljs-comment\">// 判断日期是否合法，是否在date区间</span><br>        <span class=\"hljs-type\">int</span> j=i%<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">1000</span><br>             +i/<span class=\"hljs-number\">10</span>%<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">100</span><br>             +i/<span class=\"hljs-number\">100</span>%<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">10</span><br>             +i/<span class=\"hljs-number\">1000</span>%<span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-type\">int</span> k=i*<span class=\"hljs-number\">10000</span>+j;<br>        <br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">dateOK</span>(k) &amp;&amp; k&gt;=date1 &amp;&amp; k&lt;=date2)<br>            ans++;<br>    &#125;<br>    <br>    cout&lt;&lt;ans;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</details>\n\n\n<details> \n<summary>AcWing 441. 数字统计</summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/443/\">AcWing 441. 数字统计</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> l, r, ans=<span class=\"hljs-number\">0</span>;<br>    cin&gt;&gt;l&gt;&gt;r;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=l; i&lt;=r; i++)&#123;<br>        <span class=\"hljs-type\">int</span> j=i;<br>        <span class=\"hljs-keyword\">while</span>(j)&#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span> == j%<span class=\"hljs-number\">10</span>) ans++;<br>            j/=<span class=\"hljs-number\">10</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 1245. 特别数的和</summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1247/\">AcWing 1245. 特别数的和</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> n, res;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(i)&#123;<br>        <span class=\"hljs-type\">int</span> j=i%<span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">2</span> || j==<span class=\"hljs-number\">0</span> || j==<span class=\"hljs-number\">1</span> || j==<span class=\"hljs-number\">9</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        i/=<span class=\"hljs-number\">10</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">is</span>(i)) res+=i;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 1210. 连号区间数</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1212/\">AcWing 1210. 连号区间数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e4</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> arr[N], n, res;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);<br>    <br>    <span class=\"hljs-comment\">// 枚举每个区间</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> l=<span class=\"hljs-number\">1</span>; l&lt;=n; l++)&#123;<br>        <span class=\"hljs-type\">int</span> mmax=arr[l];<br>        <span class=\"hljs-type\">int</span> mmin=arr[l];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> r=l; r&lt;=n; r++)&#123;<br>            mmin=<span class=\"hljs-built_in\">min</span>(mmin, arr[r]);<br>            mmax=<span class=\"hljs-built_in\">max</span>(mmax, arr[r]);<br>            <br>            <span class=\"hljs-keyword\">if</span>(r-l==mmax-mmin) res++;<br>        &#125;<br>    &#125;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary>AcWing 1204. 错误票据</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/description/1206/\">AcWing 1204. 错误票据</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> arr[N], mmin=<span class=\"hljs-number\">0x3f3f3f3f</span>, mmax=<span class=\"hljs-number\">-0x3f3f3f3f</span>, m, n;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> t; cin&gt;&gt;t;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;t)!=EOF)&#123;<br>        arr[t]++;<br>        mmin = mmin&lt;t ? mmin:t;<br>        mmax = <span class=\"hljs-built_in\">max</span>(mmax, t);<br>    &#125;    <br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=mmin; i&lt;=mmax; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(arr[i]==<span class=\"hljs-number\">2</span>) n=i;<br>        <span class=\"hljs-keyword\">if</span>(arr[i]==<span class=\"hljs-number\">0</span>) m=i;<br>    &#125;<br>    <br>    cout&lt;&lt;m&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;n;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 1236. 递增三元组</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1238/\">AcWing 1236. 递增三元组</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br>LL ans;<br><span class=\"hljs-type\">int</span> arr[N], brr[N], crr[N], n;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;brr[i]);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;crr[i]);<br>    <br>    <span class=\"hljs-built_in\">sort</span>(arr+<span class=\"hljs-number\">1</span>, arr+<span class=\"hljs-number\">1</span>+n);<br>    <span class=\"hljs-built_in\">sort</span>(brr+<span class=\"hljs-number\">1</span>, brr+<span class=\"hljs-number\">1</span>+n);<br>    <span class=\"hljs-built_in\">sort</span>(crr+<span class=\"hljs-number\">1</span>, crr+<span class=\"hljs-number\">1</span>+n);<br>    <br>    <span class=\"hljs-comment\">// 枚举b</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        <span class=\"hljs-type\">int</span> a = <span class=\"hljs-built_in\">lower_bound</span>(arr+<span class=\"hljs-number\">1</span>, arr+<span class=\"hljs-number\">1</span>+n, brr[i])-arr<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-built_in\">upper_bound</span>(crr+<span class=\"hljs-number\">1</span>, crr+<span class=\"hljs-number\">1</span>+n, brr[i])-crr;<br>        <br>        <span class=\"hljs-keyword\">if</span>(a&gt;=<span class=\"hljs-number\">1</span> &amp;&amp; c&lt;=n)<br>            ans+=<span class=\"hljs-number\">1LL</span>*a*(n-c+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <br>    cout&lt;&lt;ans;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n<details> \n<summary>AcWing 1219. 移动距离</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1221/\">AcWing 1219. 移动距离</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> w, m, n;<br>    cin&gt;&gt;w&gt;&gt;m&gt;&gt;n;<br>    <br>    <span class=\"hljs-comment\">// 1维变2维</span><br>    <span class=\"hljs-type\">int</span> x1=(m<span class=\"hljs-number\">-1</span>)/w+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> y1=m%w;<br>    <span class=\"hljs-keyword\">if</span>(y1==<span class=\"hljs-number\">0</span>) y1=w;<br>    <br>    <span class=\"hljs-type\">int</span> x2=(n<span class=\"hljs-number\">-1</span>)/w+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> y2=n%w;<br>    <span class=\"hljs-keyword\">if</span>(y2==<span class=\"hljs-number\">0</span>) y2=w;<br>    <br>    <span class=\"hljs-keyword\">if</span>(!(x1&amp;<span class=\"hljs-number\">1</span>)) y1=w-y1+<span class=\"hljs-number\">1</span>;    <br>    <span class=\"hljs-keyword\">if</span>(!(x2&amp;<span class=\"hljs-number\">1</span>)) y2=w-y2+<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-comment\">//cout&lt;&lt;x1&lt;&lt;&quot; &quot;&lt;&lt;y1&lt;&lt;&quot;\\n&quot;&lt;&lt;x2&lt;&lt;&quot; &quot;&lt;&lt;y2&lt;&lt;&quot;\\n&quot;;</span><br>    <br>    cout&lt;&lt;<span class=\"hljs-built_in\">abs</span>(x2-x1)+<span class=\"hljs-built_in\">abs</span>(y2-y1);<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n\n\n<ul>\n<li><h3 id=1.1.2> 递推与递归 </h3>\n</li>\n<li><h3 id=1.1.3> 前缀和与差分 </h3>\n</li>\n<li><h3 id=1.1.4> 排序 </h3>\n</li>\n<li><h3 id=1.1.5> 二分 </h3>\n</li>\n<li><h3 id=1.1.6> 双指针 </h3></li>\n</ul>\n<h2 id=1.3><font color=\"green\"> 三、搜索 </font></h2>\n\n<ul>\n<li><h3 id=1.3.1> DFS </h3>\n</li>\n<li><h3 id=1.3.2> BFS </h3></li>\n</ul>\n<details> \n<summary> AcWing 1101. 献给阿尔吉侬的花束 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1103/\">AcWing 1101. 献给阿尔吉侬的花束</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> g[N][N];<br><span class=\"hljs-type\">int</span> st[N][N];<br><span class=\"hljs-type\">int</span> res[N][N];<br>PII s, e;<br><span class=\"hljs-type\">int</span> n, m;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(g, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> g);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <span class=\"hljs-built_in\">memset</span>(res, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> res);<br>    <br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string t; cin&gt;&gt;t;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=m; j++)<br>            <span class=\"hljs-keyword\">if</span>(t[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;S&#x27;</span>)<br>                s=&#123;i,j&#125;;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(t[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;E&#x27;</span>)<br>                e=&#123;i,j&#125;;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(t[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>)<br>                g[i][j]=<span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <br>    queue&lt;PII&gt; q;<br>    res[s.fst][s.sed]=<span class=\"hljs-number\">0</span>;<br>    q.<span class=\"hljs-built_in\">push</span>(s), st[s.fst][s.sed]=<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>            <span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br>            <br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;m) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <br>            res[nx][ny]=res[u.fst][u.sed]+<span class=\"hljs-number\">1</span>;<br>            q.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(st[e.fst][e.sed]) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 剪枝</span><br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">if</span>(res[e.fst][e.sed])<br>        cout&lt;&lt;res[e.fst][e.sed]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;oop!\\n&quot;</span>;<br>        <br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> T; cin&gt;&gt;T; <span class=\"hljs-keyword\">while</span>(T--)<br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<p>BFS：武士风度的牛、逃离迷宫、地牢大师、A计划</p>\n<ul>\n<li><h3 id=1.3.3> 剪枝优化与Flood Fill </h3></li>\n</ul>\n<details> \n<summary> AcWing 1113. 红与黑 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1115/\">AcWing 1113. 红与黑</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// dfs 写法</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">30</span>;<br><br><span class=\"hljs-type\">int</span> n, m, cnt;<br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br>PII S;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    cnt++;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>        <span class=\"hljs-type\">int</span> nx=x+dxy[i][<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-type\">int</span> ny=y+dxy[i][<span class=\"hljs-number\">1</span>];<br>        <br>        <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;m) <span class=\"hljs-keyword\">continue</span>;<br>        <span class=\"hljs-keyword\">if</span>(g[nx][ny] || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>        <br>        st[nx][ny]=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">dfs</span>(nx, ny);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> g);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=m; j++)<br>            <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;@&#x27;</span>) S=&#123;i,j&#125;;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 进入这个位置，将其能够搜索到的其他位置打上标记</span><br>    st[S.fst][S.sed]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-built_in\">dfs</span>(S.fst, S.sed);<br>    cout&lt;&lt;cnt&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(cin&gt;&gt;m&gt;&gt;n)<br>        <span class=\"hljs-keyword\">if</span>(m!=<span class=\"hljs-number\">0</span> &amp;&amp; n!=<span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// bfs 写法</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">30</span>;<br><br><span class=\"hljs-type\">int</span> n, m, cnt;<br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br>PII S;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    <br>    queue&lt;PII&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(&#123;x, y&#125;), st[x][y]=<span class=\"hljs-number\">1</span>, cnt++;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>            <span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br>            <br>            <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;m) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny] || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <br>            q.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>, cnt++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> g);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=m; j++)<br>            <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;@&#x27;</span>) S=&#123;i,j&#125;;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 进入这个位置，将其能够搜索到的其他位置打上标记</span><br>    st[S.fst][S.sed]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-built_in\">bfs</span>(S.fst, S.sed);<br>    cout&lt;&lt;cnt&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(cin&gt;&gt;m&gt;&gt;n)<br>        <span class=\"hljs-keyword\">if</span>(m!=<span class=\"hljs-number\">0</span> &amp;&amp; n!=<span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n<details> \n<summary> AcWing 1233. 全球变暖 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1235/\">AcWing 1233. 全球变暖</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1010</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br><span class=\"hljs-type\">int</span> n, res;<br><br><span class=\"hljs-comment\">// 如果存在一个点，满足其上下左右都是岛屿的情况，那么这个点肯定不会被淹没</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    <span class=\"hljs-type\">bool</span> flg=<span class=\"hljs-number\">0</span>; <br>    <br>    queue&lt;PII&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(&#123;x,y&#125;), st[x][y]=<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-type\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>            <span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br>            <br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny]==<span class=\"hljs-number\">1</span>) cnt++;<br>            <br>            <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;n) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny]!=<span class=\"hljs-number\">1</span> || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <br>            q.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(cnt==<span class=\"hljs-number\">4</span>) flg=<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 存在上下左右都有岛屿的情况</span><br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> flg==<span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(g[i][j] &amp;&amp; !st[i][j])<br>                <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">bfs</span>(i,j) ) res++;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n<details> \n<summary> Luogu P1141 01迷宫 </summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1141\">Luogu P1141 01迷宫</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e3</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> n, m, flg, cnt;<br><br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br><span class=\"hljs-type\">int</span> res[N][N]; <span class=\"hljs-comment\">// 用res存标记，每个标记对应连接数量</span><br><span class=\"hljs-type\">int</span> num[<span class=\"hljs-number\">1000000</span>];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ux, <span class=\"hljs-type\">int</span> uy)</span></span>&#123;<br>\t<br>\tqueue&lt;PII&gt; q;<br>\tq.<span class=\"hljs-built_in\">push</span>(&#123;ux, uy&#125;), st[ux][uy]=<span class=\"hljs-number\">1</span>, res[ux][uy]=flg;<br>\t<br>\t<span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>\t\t<span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>\t\tq.<span class=\"hljs-built_in\">pop</span>();<br>\t\tcnt++;<br>\t\t<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>\t\t\t<span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>\t\t\t<span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br><br>\t\t\t<span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;n) <span class=\"hljs-keyword\">continue</span>;<br>\t\t\t<span class=\"hljs-keyword\">if</span>(g[nx][ny]==g[u.fst][u.sed] || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br><br>\t\t\tq.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>, res[nx][ny]=flg;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123; <br>    cin&gt;&gt;n&gt;&gt;m;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>\t\tstring s; cin&gt;&gt;s;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>\t\t\t<span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;1&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>\t&#125;<br>    <br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>\t\t\t<span class=\"hljs-keyword\">if</span>(!st[i][j]) <br>\t\t\t\tcnt=<span class=\"hljs-number\">0</span>, ++flg, <span class=\"hljs-built_in\">bfs</span>(i, j), num[flg]=cnt;<br>    <span class=\"hljs-comment\">// 因为每个 连通块 的大小，需要走完才知道</span><br>    <span class=\"hljs-comment\">// 所以我们在进入每一块连通块时，给次连通块每个位置做上唯一flg</span><br>    <span class=\"hljs-comment\">// bfs结束的时候，将cnt赋值给num[flg]，查询时，就可以直接查询了</span><br><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>\t\t<span class=\"hljs-type\">int</span> a, b; <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>\t\tcout&lt;&lt;num[res[a][b]]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>\t&#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=1.6><font color=\"green\"> 六、数学 </font></h2>\n\n<ul>\n<li><h3 id=1.6.4> 质（素）数 </h3></li>\n</ul>\n<details> \n<summary> AcWing 866. 试除法判定质数 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/868/\">AcWing 866. 试除法判定质数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isP</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n&lt;<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n/i; i++)<br>        <span class=\"hljs-keyword\">if</span>(n%i==<span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">isP</span>(n))<br>        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> T; cin&gt;&gt;T; <span class=\"hljs-keyword\">while</span>(T--)<br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary> AcWing 867. 分解质因数 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/869/\">AcWing 867. 分解质因数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n/i; i++)<br>        <span class=\"hljs-keyword\">if</span>(n%i==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-comment\">// 质因数 i</span><br>            <br>            <span class=\"hljs-type\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">while</span>(n%i==<span class=\"hljs-number\">0</span>)&#123;<br>                n/=i;<br>                cnt++;<br>            &#125;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>, i, cnt);<br>        &#125;<br>        <br>    <span class=\"hljs-keyword\">if</span>(n&gt;<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d 1\\n&quot;</span>, n);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> T; cin&gt;&gt;T; <span class=\"hljs-keyword\">while</span>(T--)<br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary> AcWing 868. 筛质数 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/description/870/\">AcWing 867. 分解质因数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 埃式筛 O(nloglogn)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e6</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-comment\">// 素数的数量 近似 N/(2*lgN)</span><br><br><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">100000</span>], cnt;  <span class=\"hljs-comment\">// 素数集合</span><br><span class=\"hljs-type\">bool</span> st[N];     <span class=\"hljs-comment\">// 标记合数</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    st[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">if</span>(!st[i])&#123;<br>            primes[++cnt]=i;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i; j&lt;=n; j+=i) st[j]=<span class=\"hljs-number\">1</span>;   <span class=\"hljs-comment\">// 标记合数</span><br>        &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-built_in\">make_primes</span>(n);<br>    <br>    cout&lt;&lt;cnt;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 欧拉筛 O(n)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e6</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">100000</span>], cnt;<br><span class=\"hljs-type\">bool</span> st[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    st[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(!st[i]) primes[++cnt]=i;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; primes[j]&lt;=n/i; j++)&#123;<br>            st[ primes[j]*i ] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 用最小质因子去筛</span><br>            <span class=\"hljs-keyword\">if</span>(i%primes[j]==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-built_in\">make_primes</span>(n);<br>    <br>    cout&lt;&lt;cnt;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</details>\n\n\n\n<details> \n<summary>Luogu P1835 素数密度 </summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1835\">Luogu P1835 素数密度</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unordered_set&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e6</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">100000</span>], cnt;<br><span class=\"hljs-type\">bool</span> st[N];<br><br>LL L, R, ans;<br>unordered_set &lt;LL&gt; H;    <span class=\"hljs-comment\">// 如果H=1，说明被筛掉</span><br><br><span class=\"hljs-comment\">// 对于 n 而言</span><br><span class=\"hljs-comment\">// 其质因子的范围是 [ 2-sqrt(n) ]</span><br><span class=\"hljs-comment\">// 因此我们可以用质因子去将[ L-R ] 中的合数给弄出来</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    st[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(!st[i]) primes[++cnt]=i;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; primes[j]&lt;=n/i; j++)&#123;<br>            st[ primes[j]*i ] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 用最小质因子去筛</span><br>            <span class=\"hljs-keyword\">if</span>(i%primes[j]==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">make_primes</span>( <span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)<span class=\"hljs-number\">-1</span>) );<br>    <br>    cin&gt;&gt;L&gt;&gt;R;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=cnt; i++)&#123;  <span class=\"hljs-comment\">// 枚举质数</span><br>        LL b = L / primes[i];<br>        LL j = b * primes[i];<br>        <span class=\"hljs-keyword\">while</span>(j&lt;L) j+=primes[i];   <span class=\"hljs-comment\">// 定位到大于L，同时能被primes[i]整除的第一个数</span><br>        <br>        <span class=\"hljs-keyword\">for</span>( ; j&lt;=R; j+=primes[i])<br>            H.<span class=\"hljs-built_in\">insert</span>(j); <span class=\"hljs-comment\">// 筛掉再说</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span>(LL i=L; i&lt;=R; i++)&#123;        <br>        <span class=\"hljs-keyword\">if</span>(i&lt;<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)<span class=\"hljs-number\">-1</span>)) &#123;<br>            <span class=\"hljs-keyword\">if</span>(st[i]==<span class=\"hljs-number\">0</span>) ans++;<br>            <span class=\"hljs-keyword\">continue</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(!H.<span class=\"hljs-built_in\">count</span>(i)) ans++;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</details>\n\n\n\n\n\n<h2 id=1.7><font color=\"green\"> 七、图论 </font></h2>\n\n<ul>\n<li><h3 id=1.7.1> 最短路 </h3></li>\n</ul>\n<details> \n<summary> AcWing 849. Dijkstra求最短路 I <font style=\"background-color:red\", color=black><b>dijkstra[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/851/\">AcWing 849. Dijkstra求最短路 I</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">510</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> edge[N][N]; <span class=\"hljs-comment\">// 稠密图</span><br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否确定最短</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        <br>        <span class=\"hljs-type\">int</span> t=<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(!st[j] &amp;&amp; (t==<span class=\"hljs-number\">-1</span> ||  dis[t]&gt;dis[j]))<br>                t=j;    <br>        <br>        st[t]=<span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">if</span>(t==e) <span class=\"hljs-keyword\">break</span>;<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            dis[j]=<span class=\"hljs-built_in\">min</span>(dis[j], dis[t]+edge[t][j]);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(edge, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x][y]=<span class=\"hljs-built_in\">min</span>(edge[x][y], z);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">dijkstra</span>(<span class=\"hljs-number\">1</span>, n);<br>    <br>    <span class=\"hljs-keyword\">if</span>(dis[n]==inf)<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;-1&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>Luogu P4779 【模板】单源最短路径（标准版） <font style=\"background-color:red\", color=black><b>dijkstra堆优化[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P4779\">Luogu P4779 【模板】单源最短路径（标准版）</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><br>vector&lt;vector&lt;PII&gt;&gt; <span class=\"hljs-built_in\">edge</span>(N);    <span class=\"hljs-comment\">// 邻接表</span><br><span class=\"hljs-type\">bool</span> st[N];<br><span class=\"hljs-type\">int</span> dis[N];<br><br><span class=\"hljs-type\">int</span> n, m, S;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br><br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> &amp;[y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;S;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        edge[x].<span class=\"hljs-built_in\">pb</span>(&#123;y, w&#125;);<br>    &#125;<br><br>    <span class=\"hljs-built_in\">dijkstra</span>(S);<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) cout&lt;&lt;dis[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary>AcWing 853. 有边数限制的最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/855/\">AcWing 853. 有边数限制的最短路</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">510</span>;<br><br><span class=\"hljs-type\">int</span> n, m, k;<br><span class=\"hljs-type\">int</span> edge[N][N];<br><span class=\"hljs-type\">int</span> dis[N];<br><span class=\"hljs-type\">int</span> bkup[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bellman_ford</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123;<br>        <span class=\"hljs-type\">bool</span> flg=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">memcpy</span>(bkup, dis, <span class=\"hljs-keyword\">sizeof</span> dis);   <br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> x=<span class=\"hljs-number\">1</span>; x&lt;=n; x++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">1</span>; y&lt;=n; y++)<br>                <span class=\"hljs-keyword\">if</span>( dis[y] &gt; bkup[x]+edge[x][y] )&#123;<br>                    dis[y] = bkup[x]+edge[x][y];<br>                    flg=<span class=\"hljs-number\">1</span>;<br>                &#125;<br>        <br>        <span class=\"hljs-keyword\">if</span>(!flg) <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(edge, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x][y]=<span class=\"hljs-built_in\">min</span>(edge[x][y], z);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">bellman_ford</span>(<span class=\"hljs-number\">1</span>, n);<br>    <br>    <span class=\"hljs-keyword\">if</span>(dis[n]&gt;inf/<span class=\"hljs-number\">2</span>)<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;impossible&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 851. spfa求最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford队列优化（spfa）[ 模板 ]</b></font> </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/853/\">AcWing 851. spfa求最短路</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> n, m;<br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N]; <br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否在队列中</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">spfa</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    queue&lt;<span class=\"hljs-type\">int</span>&gt; q;<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    q.<span class=\"hljs-built_in\">push</span>(s), st[s]=<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>(), st[x]=<span class=\"hljs-number\">0</span>;<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z)&#123;<br>                dis[y] = dis[x]+z;<br>                <span class=\"hljs-keyword\">if</span>(!st[y])<br>                    q.<span class=\"hljs-built_in\">push</span>(y), st[y]=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x].<span class=\"hljs-built_in\">push_back</span>(&#123;y, z&#125;);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">spfa</span>(<span class=\"hljs-number\">1</span>, n);<br>    <br>    <span class=\"hljs-keyword\">if</span>(dis[n]==inf)<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;impossible&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary> Luogu P3371 【模板】单源最短路径（弱化版） <font style=\"background-color:orange\", color=black><b>spfa??[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P3371\">Luogu P3371 【模板】单源最短路径（弱化版）</a></li>\n</ul>\n</details>\n\n<details> \n<summary>AcWing 854. Floyd求最短路 <font style=\"background-color:yellow\", color=black><b>Floyd[ 模板 ]</b></font> </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/856/\">AcWing 854. Floyd求最短路</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> n, m, k;<br><span class=\"hljs-type\">int</span> dis[N][N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">floyd</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>; k&lt;=n; k++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>                dis[i][j]=<span class=\"hljs-built_in\">min</span>(dis[i][j], dis[i][k]+dis[k][j]);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(i==j) dis[i][j]=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">else</span> dis[i][j]=inf;<br>                <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z; <br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        dis[x][y]=<span class=\"hljs-built_in\">min</span>(dis[x][y], z);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">floyd</span>();<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class=\"hljs-keyword\">if</span>(dis[x][y]&gt;inf/<span class=\"hljs-number\">2</span>) <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;impossible&quot;</span>);<br>        <span class=\"hljs-keyword\">else</span> cout&lt;&lt;dis[x][y]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary> Luogu P1629 邮递员送信 <font style=\"background-color:red\", color=black><b>dijkstra堆优化</b></font></summary> \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1629\">Luogu P1629 邮递员送信</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span> ,<span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e3</span>+<span class=\"hljs-number\">10</span>;<br><br>vector&lt;vector&lt;PII&gt;&gt; <span class=\"hljs-built_in\">edge</span>(N);<br>vector&lt;vector&lt;PII&gt;&gt; <span class=\"hljs-built_in\">redge</span>(N); <span class=\"hljs-comment\">// 反向边</span><br><span class=\"hljs-type\">bool</span> st[N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 1到每个点的最短路</span><br><br><span class=\"hljs-type\">int</span> n, m;<br>LL ans;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, vector&lt;vector&lt;PII&gt;&gt; &amp;e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br><br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> &amp;[y, z]: e[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-comment\">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br>    <span class=\"hljs-type\">int</span> n, m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        edge[x].<span class=\"hljs-built_in\">pb</span>(&#123;y, w&#125;);<br>        redge[y].<span class=\"hljs-built_in\">pb</span>(&#123;x, w&#125;);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">dijkstra</span>(<span class=\"hljs-number\">1</span>, edge);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++) ans+=dis[i];<br>    <span class=\"hljs-built_in\">dijkstra</span>(<span class=\"hljs-number\">1</span>, redge);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++) ans+=dis[i];<br>    cout&lt;&lt;ans;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary>  Luogu P1119 灾后重建 <font style=\"background-color:yellow\", color=black><b>Floyd</b></font></summary> \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1119\">Luogu P1119 灾后重建</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> dis[N][N];<br><span class=\"hljs-type\">int</span> ti[N];<br><span class=\"hljs-type\">bool</span> st[N];<br><br><span class=\"hljs-type\">int</span> n, m, q;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">floyd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> t)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>; k&lt;n; k++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(ti[k]&gt;t || st[k]) <span class=\"hljs-keyword\">continue</span>;<br>        st[k]=<span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;n; i++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;n; j++)<br>                <span class=\"hljs-keyword\">if</span>( dis[i][j] &gt; dis[i][k] + dis[k][j])<br>                    dis[j][i] = dis[i][j] = dis[i][k] + dis[k][j];<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(dis[x][y]==<span class=\"hljs-number\">0x3f3f3f3f</span> || ti[x]&gt;t || ti[y]&gt;t) <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">return</span> dis[x][y];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;in.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, stdin); <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;out.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>, stdout);<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;ti[i]);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        dis[x][y]=<span class=\"hljs-built_in\">min</span>(dis[x][y], w);<br>        dis[y][x]=<span class=\"hljs-built_in\">min</span>(dis[y][x], w);<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;n; i++) dis[i][i]=<span class=\"hljs-number\">0</span>;<br><br>    cin&gt;&gt;q;<br>    <span class=\"hljs-keyword\">while</span>(q--)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, t;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;t);<br>        cout&lt;&lt;<span class=\"hljs-built_in\">floyd</span>(x, y, t)&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> edge[N][N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否确定最短路</span><br><br><span class=\"hljs-type\">int</span> n, m, q;<br><span class=\"hljs-type\">int</span> ti[N];  <span class=\"hljs-comment\">// 每个村庄完成重建的时间</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e, <span class=\"hljs-type\">int</span> t)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br>    <br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br><br>        edge[s][x]=<span class=\"hljs-built_in\">min</span>(edge[s][x], dis[x]); <span class=\"hljs-comment\">// 更新最短路</span><br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">1</span>; y&lt;=n; y++)&#123;    <span class=\"hljs-comment\">// 用邻接表可能会更快</span><br>            <span class=\"hljs-type\">int</span> z=edge[x][y];<br><br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z &amp;&amp; ti[x]&lt;=t &amp;&amp; ti[y]&lt;=t )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(dis[e]==<span class=\"hljs-number\">0x3f3f3f3f</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">return</span> dis[e];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-comment\">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br>    <span class=\"hljs-built_in\">memset</span>(edge, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;ti[i]);    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        x++, y++;<br>        edge[x][y]=<span class=\"hljs-built_in\">min</span>(edge[x][y], w);<br>        edge[y][x]=<span class=\"hljs-built_in\">min</span>(edge[y][x], w);<br>    &#125;<br><br>    cin&gt;&gt;q;<br>    <span class=\"hljs-keyword\">while</span>(q--)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, t;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;t);<br>        x++, y++;<br>        cout&lt;&lt;<span class=\"hljs-built_in\">dijkstra</span>(x, y, t)&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n\n<details>\n<summary> AcWing 1488. 最短距离 </summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1490/\">AcWing 1488. 最短距离</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 超级源点</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> n, m, k, q;<br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N];<br><span class=\"hljs-type\">bool</span> st[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s)</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> ans=inf;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br>    <br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br>        <br>        <span class=\"hljs-comment\">//cout&lt;&lt;dis[x]&lt;&lt;&quot;\\n&quot;;</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> &amp;[y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> ans;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> a, b, c;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        edge[a].<span class=\"hljs-built_in\">pb</span>(&#123;b, c&#125;);<br>        edge[b].<span class=\"hljs-built_in\">pb</span>(&#123;a, c&#125;);<br>    &#125;<br>    cin&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123;<br>        <span class=\"hljs-type\">int</span> j;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;j);<br>        edge[n+<span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">pb</span>(&#123;j, <span class=\"hljs-number\">0</span>&#125;);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">dijkstra</span>(n+<span class=\"hljs-number\">1</span>);<br>    <br>    cin&gt;&gt;q;<br>    <span class=\"hljs-keyword\">while</span>(q--)&#123;<br>        <span class=\"hljs-type\">int</span> s;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;s);<br>        cout&lt;&lt;dis[s]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details>\n\n<summary> AcWing 1507. 旅行计划 </summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/description/1509/\">AcWing 1507. 旅行计划</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 记录路径</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">510</span>;<br><br><span class=\"hljs-type\">int</span> n, m, S, D;<br>vector&lt;pair&lt;<span class=\"hljs-type\">int</span>, PII&gt;&gt; edge[N]; <span class=\"hljs-comment\">// x-&gt;y </span><br><span class=\"hljs-type\">int</span> pre[N]; <span class=\"hljs-comment\">// 最短路径中，最短的一条路径的前驱</span><br>PII dis[N]; <span class=\"hljs-comment\">// 最短路径及最小花费</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否确定最小</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span> </span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    priority_queue&lt;pair&lt;PII, <span class=\"hljs-type\">int</span>&gt;, vector&lt;pair&lt;PII, <span class=\"hljs-type\">int</span>&gt;&gt;, greater&lt;pair&lt;PII, <span class=\"hljs-type\">int</span>&gt;&gt;&gt; heap;<br><br>    dis[s] = &#123; <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> &#125;;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123; dis[s], s &#125;);<br><br>    <span class=\"hljs-keyword\">while</span> (heap.<span class=\"hljs-built_in\">size</span>()) &#123;<br>        <span class=\"hljs-keyword\">auto</span> x = heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span> (st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x] = <span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; [y, w] : edge[x]) &#123;<br>            PII t = &#123; dis[x].fst + w.fst, dis[x].sed + w.sed &#125;;<br>            <span class=\"hljs-keyword\">if</span> (dis[y] &gt; t) &#123;<br>                dis[y] = t;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123; dis[y], y &#125;);<br>                pre[y]=x;   <span class=\"hljs-comment\">// 通过x点到y</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; D;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= m; i++) &#123;<br>        <span class=\"hljs-type\">int</span> a, b, c, d;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);<br>        edge[a].<span class=\"hljs-built_in\">pb</span>(&#123; b, &#123;c, d&#125; &#125;);<br>        edge[b].<span class=\"hljs-built_in\">pb</span>(&#123; a, &#123;c, d&#125; &#125;);<br>    &#125;<br><br>    <span class=\"hljs-built_in\">dijkstra</span>(D, S); <span class=\"hljs-comment\">// 反着来，这样可以直接用pre输出</span><br><br>    <span class=\"hljs-type\">int</span> u = S;<br>    cout&lt;&lt;S&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>    <span class=\"hljs-keyword\">while</span> (u != D) cout &lt;&lt; pre[u] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>, u = pre[u];<br><br>    cout &lt;&lt; dis[S].fst &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; dis[S].sed;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n<h1 id=2><font color=\"blue\">牛刀小试</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n<ol>\n<li><p>基础算法</p>\n<ul>\n<li>位运算 <a href=\"\">0x01</a></li>\n<li>倍增 <a href=\"\">0x39</a></li>\n<li>构造</li>\n</ul>\n</li>\n<li><p>数据结构</p>\n<ul>\n<li>并查集 <a href=\"\">0x41</a></li>\n<li>树状数组 <a href=\"\">0x42</a></li>\n<li>线段树 <a href=\"\">0x43</a></li>\n<li>二叉搜索树与平衡树 <a href=\"\">0x46</a></li>\n<li>分块</li>\n<li>点分治</li>\n<li>可持久化数据结构</li>\n</ul>\n</li>\n<li><p>搜索</p>\n<ul>\n<li>迭代加深</li>\n<li>双向DFS或BFS</li>\n<li>BFS变形</li>\n<li>A* 与 IDA*  </details></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=3><font color=\"red\">略有所成</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n  </details>\n\n\n\n","site":{"data":{}},"wordcount":24088,"more":"<h1 id=1><font color=\"green\">初窥门径</font></h1>\n<details>\n<summary>目录</summary>\n\n<ol>\n<li><p>基础算法</p>\n<ul>\n<li><a href=\"#1.1.1\">枚举与模拟</a></li>\n<li>递推与递归 <a href=\"\">0x02</a></li>\n<li>前缀和与差分 <a href=\"\">0x03</a></li>\n<li>排序 <a href=\"\">0x05</a></li>\n<li>二分 <a href=\"\">0x04</a></li>\n<li>双指针</li>\n</ul>\n</li>\n<li><p>数据结构</p>\n<ul>\n<li>栈 <a href=\"\">0x11</a></li>\n<li>队列 <a href=\"\">0x12</a> </li>\n<li>哈希表 <a href=\"\">0x14</a></li>\n<li>堆</li>\n</ul>\n</li>\n<li><p>搜索</p>\n<ul>\n<li>DFS <a href=\"\">0x22</a></li>\n<li>BFS <a href=\"\">0x25</a></li>\n<li>剪枝优化与Flood Fill</li>\n</ul>\n</li>\n<li><p>字符串</p>\n<ul>\n<li>KMP <a href=\"\">0x15</a> </li>\n<li>Trie <a href=\"\">0x16</a></li>\n</ul>\n</li>\n<li><p>动态规划</p>\n<ul>\n<li>背包问题 <a href=\"\">0x52</a></li>\n<li>线性DP <a href=\"\">0x51</a></li>\n<li>区间DP <a href=\"\">0x53</a></li>\n</ul>\n</li>\n<li><p>数学</p>\n<ul>\n<li>进制转换</li>\n<li>高精度</li>\n<li>快速幂</li>\n<li>质（素）数</li>\n<li>约数个数</li>\n<li>组合计数 <a href=\"\">0x36</a></li>\n</ul>\n</li>\n<li><p>图论</p>\n<ul>\n<li>最短路 <a href=\"\">0x61</a></li>\n<li>拓扑排序 </li>\n<li>最小生成树 <a href=\"\">0x62</a>  </details></li>\n</ul>\n</li>\n</ol>\n<h2 id=1.1><font color=\"green\"> 一、基础算法 </font></h2>\n\n<ul>\n<li><h3 id=1.1.1> 枚举与模拟 </h3></li>\n</ul>\n<details> \n<summary>AcWing 466.回文日期</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/468/\">AcWing 466. 回文日期</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> months[<span class=\"hljs-number\">13</span>]=&#123;<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">31</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">dateOK</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ymd)</span></span>&#123;<br>    months[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">28</span>; <span class=\"hljs-comment\">// 恢复现场</span><br>    <span class=\"hljs-type\">int</span> y=ymd/<span class=\"hljs-number\">10000</span>;<br>    <span class=\"hljs-type\">int</span> m=ymd%<span class=\"hljs-number\">10000</span>/<span class=\"hljs-number\">100</span>;<br>    <span class=\"hljs-type\">int</span> d=ymd%<span class=\"hljs-number\">100</span>;<br>    <span class=\"hljs-keyword\">if</span>((y%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span> &amp;&amp; y%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>) || y%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>) months[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">29</span>; <span class=\"hljs-comment\">// 闰年</span><br>    <span class=\"hljs-keyword\">if</span>(m&lt;<span class=\"hljs-number\">1</span> || m&gt;<span class=\"hljs-number\">12</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span>(d&lt;<span class=\"hljs-number\">1</span> || d&gt;months[m]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> date1, date2, ans=<span class=\"hljs-number\">0</span>;<br>    cin&gt;&gt;date1&gt;&gt;date2;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=date1/<span class=\"hljs-number\">10000</span>; i&lt;=date2/<span class=\"hljs-number\">10000</span>; i++)&#123;<br>        <span class=\"hljs-comment\">// 生成回文日期</span><br>        <span class=\"hljs-comment\">// 判断日期是否合法，是否在date区间</span><br>        <span class=\"hljs-type\">int</span> j=i%<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">1000</span><br>             +i/<span class=\"hljs-number\">10</span>%<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">100</span><br>             +i/<span class=\"hljs-number\">100</span>%<span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">10</span><br>             +i/<span class=\"hljs-number\">1000</span>%<span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-type\">int</span> k=i*<span class=\"hljs-number\">10000</span>+j;<br>        <br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">dateOK</span>(k) &amp;&amp; k&gt;=date1 &amp;&amp; k&lt;=date2)<br>            ans++;<br>    &#125;<br>    <br>    cout&lt;&lt;ans;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</details>\n\n\n<details> \n<summary>AcWing 441. 数字统计</summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/443/\">AcWing 441. 数字统计</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> l, r, ans=<span class=\"hljs-number\">0</span>;<br>    cin&gt;&gt;l&gt;&gt;r;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=l; i&lt;=r; i++)&#123;<br>        <span class=\"hljs-type\">int</span> j=i;<br>        <span class=\"hljs-keyword\">while</span>(j)&#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">2</span> == j%<span class=\"hljs-number\">10</span>) ans++;<br>            j/=<span class=\"hljs-number\">10</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 1245. 特别数的和</summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1247/\">AcWing 1245. 特别数的和</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">int</span> n, res;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(i)&#123;<br>        <span class=\"hljs-type\">int</span> j=i%<span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">if</span>(j==<span class=\"hljs-number\">2</span> || j==<span class=\"hljs-number\">0</span> || j==<span class=\"hljs-number\">1</span> || j==<span class=\"hljs-number\">9</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>        i/=<span class=\"hljs-number\">10</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">is</span>(i)) res+=i;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 1210. 连号区间数</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1212/\">AcWing 1210. 连号区间数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e4</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">int</span> arr[N], n, res;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);<br>    <br>    <span class=\"hljs-comment\">// 枚举每个区间</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> l=<span class=\"hljs-number\">1</span>; l&lt;=n; l++)&#123;<br>        <span class=\"hljs-type\">int</span> mmax=arr[l];<br>        <span class=\"hljs-type\">int</span> mmin=arr[l];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> r=l; r&lt;=n; r++)&#123;<br>            mmin=<span class=\"hljs-built_in\">min</span>(mmin, arr[r]);<br>            mmax=<span class=\"hljs-built_in\">max</span>(mmax, arr[r]);<br>            <br>            <span class=\"hljs-keyword\">if</span>(r-l==mmax-mmin) res++;<br>        &#125;<br>    &#125;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary>AcWing 1204. 错误票据</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/description/1206/\">AcWing 1204. 错误票据</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> arr[N], mmin=<span class=\"hljs-number\">0x3f3f3f3f</span>, mmax=<span class=\"hljs-number\">-0x3f3f3f3f</span>, m, n;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> t; cin&gt;&gt;t;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;t)!=EOF)&#123;<br>        arr[t]++;<br>        mmin = mmin&lt;t ? mmin:t;<br>        mmax = <span class=\"hljs-built_in\">max</span>(mmax, t);<br>    &#125;    <br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=mmin; i&lt;=mmax; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(arr[i]==<span class=\"hljs-number\">2</span>) n=i;<br>        <span class=\"hljs-keyword\">if</span>(arr[i]==<span class=\"hljs-number\">0</span>) m=i;<br>    &#125;<br>    <br>    cout&lt;&lt;m&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>&lt;&lt;n;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 1236. 递增三元组</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1238/\">AcWing 1236. 递增三元组</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br>LL ans;<br><span class=\"hljs-type\">int</span> arr[N], brr[N], crr[N], n;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;brr[i]);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;crr[i]);<br>    <br>    <span class=\"hljs-built_in\">sort</span>(arr+<span class=\"hljs-number\">1</span>, arr+<span class=\"hljs-number\">1</span>+n);<br>    <span class=\"hljs-built_in\">sort</span>(brr+<span class=\"hljs-number\">1</span>, brr+<span class=\"hljs-number\">1</span>+n);<br>    <span class=\"hljs-built_in\">sort</span>(crr+<span class=\"hljs-number\">1</span>, crr+<span class=\"hljs-number\">1</span>+n);<br>    <br>    <span class=\"hljs-comment\">// 枚举b</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        <span class=\"hljs-type\">int</span> a = <span class=\"hljs-built_in\">lower_bound</span>(arr+<span class=\"hljs-number\">1</span>, arr+<span class=\"hljs-number\">1</span>+n, brr[i])-arr<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-type\">int</span> c = <span class=\"hljs-built_in\">upper_bound</span>(crr+<span class=\"hljs-number\">1</span>, crr+<span class=\"hljs-number\">1</span>+n, brr[i])-crr;<br>        <br>        <span class=\"hljs-keyword\">if</span>(a&gt;=<span class=\"hljs-number\">1</span> &amp;&amp; c&lt;=n)<br>            ans+=<span class=\"hljs-number\">1LL</span>*a*(n-c+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    <br>    cout&lt;&lt;ans;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n<details> \n<summary>AcWing 1219. 移动距离</summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1221/\">AcWing 1219. 移动距离</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> w, m, n;<br>    cin&gt;&gt;w&gt;&gt;m&gt;&gt;n;<br>    <br>    <span class=\"hljs-comment\">// 1维变2维</span><br>    <span class=\"hljs-type\">int</span> x1=(m<span class=\"hljs-number\">-1</span>)/w+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> y1=m%w;<br>    <span class=\"hljs-keyword\">if</span>(y1==<span class=\"hljs-number\">0</span>) y1=w;<br>    <br>    <span class=\"hljs-type\">int</span> x2=(n<span class=\"hljs-number\">-1</span>)/w+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> y2=n%w;<br>    <span class=\"hljs-keyword\">if</span>(y2==<span class=\"hljs-number\">0</span>) y2=w;<br>    <br>    <span class=\"hljs-keyword\">if</span>(!(x1&amp;<span class=\"hljs-number\">1</span>)) y1=w-y1+<span class=\"hljs-number\">1</span>;    <br>    <span class=\"hljs-keyword\">if</span>(!(x2&amp;<span class=\"hljs-number\">1</span>)) y2=w-y2+<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-comment\">//cout&lt;&lt;x1&lt;&lt;&quot; &quot;&lt;&lt;y1&lt;&lt;&quot;\\n&quot;&lt;&lt;x2&lt;&lt;&quot; &quot;&lt;&lt;y2&lt;&lt;&quot;\\n&quot;;</span><br>    <br>    cout&lt;&lt;<span class=\"hljs-built_in\">abs</span>(x2-x1)+<span class=\"hljs-built_in\">abs</span>(y2-y1);<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n\n\n<ul>\n<li><h3 id=1.1.2> 递推与递归 </h3>\n</li>\n<li><h3 id=1.1.3> 前缀和与差分 </h3>\n</li>\n<li><h3 id=1.1.4> 排序 </h3>\n</li>\n<li><h3 id=1.1.5> 二分 </h3>\n</li>\n<li><h3 id=1.1.6> 双指针 </h3></li>\n</ul>\n<h2 id=1.3><font color=\"green\"> 三、搜索 </font></h2>\n\n<ul>\n<li><h3 id=1.3.1> DFS </h3>\n</li>\n<li><h3 id=1.3.2> BFS </h3></li>\n</ul>\n<details> \n<summary> AcWing 1101. 献给阿尔吉侬的花束 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1103/\">AcWing 1101. 献给阿尔吉侬的花束</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> g[N][N];<br><span class=\"hljs-type\">int</span> st[N][N];<br><span class=\"hljs-type\">int</span> res[N][N];<br>PII s, e;<br><span class=\"hljs-type\">int</span> n, m;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(g, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> g);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <span class=\"hljs-built_in\">memset</span>(res, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> res);<br>    <br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string t; cin&gt;&gt;t;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=m; j++)<br>            <span class=\"hljs-keyword\">if</span>(t[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;S&#x27;</span>)<br>                s=&#123;i,j&#125;;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(t[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;E&#x27;</span>)<br>                e=&#123;i,j&#125;;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(t[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>)<br>                g[i][j]=<span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <br>    queue&lt;PII&gt; q;<br>    res[s.fst][s.sed]=<span class=\"hljs-number\">0</span>;<br>    q.<span class=\"hljs-built_in\">push</span>(s), st[s.fst][s.sed]=<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>            <span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br>            <br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;m) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <br>            res[nx][ny]=res[u.fst][u.sed]+<span class=\"hljs-number\">1</span>;<br>            q.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(st[e.fst][e.sed]) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 剪枝</span><br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">if</span>(res[e.fst][e.sed])<br>        cout&lt;&lt;res[e.fst][e.sed]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;oop!\\n&quot;</span>;<br>        <br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> T; cin&gt;&gt;T; <span class=\"hljs-keyword\">while</span>(T--)<br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<p>BFS：武士风度的牛、逃离迷宫、地牢大师、A计划</p>\n<ul>\n<li><h3 id=1.3.3> 剪枝优化与Flood Fill </h3></li>\n</ul>\n<details> \n<summary> AcWing 1113. 红与黑 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1115/\">AcWing 1113. 红与黑</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// dfs 写法</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">30</span>;<br><br><span class=\"hljs-type\">int</span> n, m, cnt;<br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br>PII S;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    cnt++;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>        <span class=\"hljs-type\">int</span> nx=x+dxy[i][<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-type\">int</span> ny=y+dxy[i][<span class=\"hljs-number\">1</span>];<br>        <br>        <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;m) <span class=\"hljs-keyword\">continue</span>;<br>        <span class=\"hljs-keyword\">if</span>(g[nx][ny] || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>        <br>        st[nx][ny]=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-built_in\">dfs</span>(nx, ny);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> g);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=m; j++)<br>            <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;@&#x27;</span>) S=&#123;i,j&#125;;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 进入这个位置，将其能够搜索到的其他位置打上标记</span><br>    st[S.fst][S.sed]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-built_in\">dfs</span>(S.fst, S.sed);<br>    cout&lt;&lt;cnt&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(cin&gt;&gt;m&gt;&gt;n)<br>        <span class=\"hljs-keyword\">if</span>(m!=<span class=\"hljs-number\">0</span> &amp;&amp; n!=<span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// bfs 写法</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;,&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">30</span>;<br><br><span class=\"hljs-type\">int</span> n, m, cnt;<br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br>PII S;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    <br>    queue&lt;PII&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(&#123;x, y&#125;), st[x][y]=<span class=\"hljs-number\">1</span>, cnt++;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>            <span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br>            <br>            <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;m) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny] || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <br>            q.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>, cnt++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cnt=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">memset</span>(g, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> g);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=m; j++)<br>            <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;@&#x27;</span>) S=&#123;i,j&#125;;<br>    &#125;<br>    <br>    <span class=\"hljs-comment\">// 进入这个位置，将其能够搜索到的其他位置打上标记</span><br>    st[S.fst][S.sed]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-built_in\">bfs</span>(S.fst, S.sed);<br>    cout&lt;&lt;cnt&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">while</span>(cin&gt;&gt;m&gt;&gt;n)<br>        <span class=\"hljs-keyword\">if</span>(m!=<span class=\"hljs-number\">0</span> &amp;&amp; n!=<span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n<details> \n<summary> AcWing 1233. 全球变暖 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1235/\">AcWing 1233. 全球变暖</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1010</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br><span class=\"hljs-type\">int</span> n, res;<br><br><span class=\"hljs-comment\">// 如果存在一个点，满足其上下左右都是岛屿的情况，那么这个点肯定不会被淹没</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span></span>&#123;<br>    <span class=\"hljs-type\">bool</span> flg=<span class=\"hljs-number\">0</span>; <br>    <br>    queue&lt;PII&gt; q;<br>    q.<span class=\"hljs-built_in\">push</span>(&#123;x,y&#125;), st[x][y]=<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-type\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>            <span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>            <span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br>            <br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny]==<span class=\"hljs-number\">1</span>) cnt++;<br>            <br>            <span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;n) <span class=\"hljs-keyword\">continue</span>;<br>            <span class=\"hljs-keyword\">if</span>(g[nx][ny]!=<span class=\"hljs-number\">1</span> || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br>            <br>            q.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(cnt==<span class=\"hljs-number\">4</span>) flg=<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 存在上下左右都有岛屿的情况</span><br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> flg==<span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        string s; cin&gt;&gt;s;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;#&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(g[i][j] &amp;&amp; !st[i][j])<br>                <span class=\"hljs-keyword\">if</span>( <span class=\"hljs-built_in\">bfs</span>(i,j) ) res++;<br>    <br>    cout&lt;&lt;res;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n<details> \n<summary> Luogu P1141 01迷宫 </summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1141\">Luogu P1141 01迷宫</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> dxy[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">2</span>]=&#123;&#123;<span class=\"hljs-number\">-1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">-1</span>&#125;, &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>&#125;&#125;;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e3</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> n, m, flg, cnt;<br><br><span class=\"hljs-type\">bool</span> g[N][N];<br><span class=\"hljs-type\">bool</span> st[N][N];<br><span class=\"hljs-type\">int</span> res[N][N]; <span class=\"hljs-comment\">// 用res存标记，每个标记对应连接数量</span><br><span class=\"hljs-type\">int</span> num[<span class=\"hljs-number\">1000000</span>];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ux, <span class=\"hljs-type\">int</span> uy)</span></span>&#123;<br>\t<br>\tqueue&lt;PII&gt; q;<br>\tq.<span class=\"hljs-built_in\">push</span>(&#123;ux, uy&#125;), st[ux][uy]=<span class=\"hljs-number\">1</span>, res[ux][uy]=flg;<br>\t<br>\t<span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>\t\t<span class=\"hljs-keyword\">auto</span> u=q.<span class=\"hljs-built_in\">front</span>();<br>\t\tq.<span class=\"hljs-built_in\">pop</span>();<br>\t\tcnt++;<br>\t\t<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++)&#123;<br>\t\t\t<span class=\"hljs-type\">int</span> nx=u.fst+dxy[i][<span class=\"hljs-number\">0</span>];<br>\t\t\t<span class=\"hljs-type\">int</span> ny=u.sed+dxy[i][<span class=\"hljs-number\">1</span>];<br><br>\t\t\t<span class=\"hljs-keyword\">if</span>(nx&lt;<span class=\"hljs-number\">1</span> || ny&lt;<span class=\"hljs-number\">1</span> || nx&gt;n || ny&gt;n) <span class=\"hljs-keyword\">continue</span>;<br>\t\t\t<span class=\"hljs-keyword\">if</span>(g[nx][ny]==g[u.fst][u.sed] || st[nx][ny]) <span class=\"hljs-keyword\">continue</span>;<br><br>\t\t\tq.<span class=\"hljs-built_in\">push</span>(&#123;nx, ny&#125;), st[nx][ny]=<span class=\"hljs-number\">1</span>, res[nx][ny]=flg;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123; <br>    cin&gt;&gt;n&gt;&gt;m;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>\t\tstring s; cin&gt;&gt;s;<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>\t\t\t<span class=\"hljs-keyword\">if</span>(s[j<span class=\"hljs-number\">-1</span>]==<span class=\"hljs-string\">&#x27;1&#x27;</span>) g[i][j]=<span class=\"hljs-number\">1</span>;<br>\t&#125;<br>    <br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>\t\t\t<span class=\"hljs-keyword\">if</span>(!st[i][j]) <br>\t\t\t\tcnt=<span class=\"hljs-number\">0</span>, ++flg, <span class=\"hljs-built_in\">bfs</span>(i, j), num[flg]=cnt;<br>    <span class=\"hljs-comment\">// 因为每个 连通块 的大小，需要走完才知道</span><br>    <span class=\"hljs-comment\">// 所以我们在进入每一块连通块时，给次连通块每个位置做上唯一flg</span><br>    <span class=\"hljs-comment\">// bfs结束的时候，将cnt赋值给num[flg]，查询时，就可以直接查询了</span><br><br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>\t\t<span class=\"hljs-type\">int</span> a, b; <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>\t\tcout&lt;&lt;num[res[a][b]]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>\t&#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=1.6><font color=\"green\"> 六、数学 </font></h2>\n\n<ul>\n<li><h3 id=1.6.4> 质（素）数 </h3></li>\n</ul>\n<details> \n<summary> AcWing 866. 试除法判定质数 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/868/\">AcWing 866. 试除法判定质数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isP</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n&lt;<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n/i; i++)<br>        <span class=\"hljs-keyword\">if</span>(n%i==<span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">isP</span>(n))<br>        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> T; cin&gt;&gt;T; <span class=\"hljs-keyword\">while</span>(T--)<br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary> AcWing 867. 分解质因数 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/869/\">AcWing 867. 分解质因数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n/i; i++)<br>        <span class=\"hljs-keyword\">if</span>(n%i==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-comment\">// 质因数 i</span><br>            <br>            <span class=\"hljs-type\">int</span> cnt=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">while</span>(n%i==<span class=\"hljs-number\">0</span>)&#123;<br>                n/=i;<br>                cnt++;<br>            &#125;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>, i, cnt);<br>        &#125;<br>        <br>    <span class=\"hljs-keyword\">if</span>(n&gt;<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d 1\\n&quot;</span>, n);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> T; cin&gt;&gt;T; <span class=\"hljs-keyword\">while</span>(T--)<br>    <span class=\"hljs-built_in\">solve</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary> AcWing 868. 筛质数 </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/description/870/\">AcWing 867. 分解质因数</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 埃式筛 O(nloglogn)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e6</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-comment\">// 素数的数量 近似 N/(2*lgN)</span><br><br><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">100000</span>], cnt;  <span class=\"hljs-comment\">// 素数集合</span><br><span class=\"hljs-type\">bool</span> st[N];     <span class=\"hljs-comment\">// 标记合数</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    st[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">if</span>(!st[i])&#123;<br>            primes[++cnt]=i;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i; j&lt;=n; j+=i) st[j]=<span class=\"hljs-number\">1</span>;   <span class=\"hljs-comment\">// 标记合数</span><br>        &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-built_in\">make_primes</span>(n);<br>    <br>    cout&lt;&lt;cnt;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 欧拉筛 O(n)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e6</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">100000</span>], cnt;<br><span class=\"hljs-type\">bool</span> st[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    st[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(!st[i]) primes[++cnt]=i;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; primes[j]&lt;=n/i; j++)&#123;<br>            st[ primes[j]*i ] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 用最小质因子去筛</span><br>            <span class=\"hljs-keyword\">if</span>(i%primes[j]==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n; cin&gt;&gt;n;<br>    <br>    <span class=\"hljs-built_in\">make_primes</span>(n);<br>    <br>    cout&lt;&lt;cnt;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</details>\n\n\n\n<details> \n<summary>Luogu P1835 素数密度 </summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1835\">Luogu P1835 素数密度</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unordered_set&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e6</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> primes[<span class=\"hljs-number\">100000</span>], cnt;<br><span class=\"hljs-type\">bool</span> st[N];<br><br>LL L, R, ans;<br>unordered_set &lt;LL&gt; H;    <span class=\"hljs-comment\">// 如果H=1，说明被筛掉</span><br><br><span class=\"hljs-comment\">// 对于 n 而言</span><br><span class=\"hljs-comment\">// 其质因子的范围是 [ 2-sqrt(n) ]</span><br><span class=\"hljs-comment\">// 因此我们可以用质因子去将[ L-R ] 中的合数给弄出来</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">make_primes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span>&#123;<br>    st[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(!st[i]) primes[++cnt]=i;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; primes[j]&lt;=n/i; j++)&#123;<br>            st[ primes[j]*i ] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 用最小质因子去筛</span><br>            <span class=\"hljs-keyword\">if</span>(i%primes[j]==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">make_primes</span>( <span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)<span class=\"hljs-number\">-1</span>) );<br>    <br>    cin&gt;&gt;L&gt;&gt;R;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=cnt; i++)&#123;  <span class=\"hljs-comment\">// 枚举质数</span><br>        LL b = L / primes[i];<br>        LL j = b * primes[i];<br>        <span class=\"hljs-keyword\">while</span>(j&lt;L) j+=primes[i];   <span class=\"hljs-comment\">// 定位到大于L，同时能被primes[i]整除的第一个数</span><br>        <br>        <span class=\"hljs-keyword\">for</span>( ; j&lt;=R; j+=primes[i])<br>            H.<span class=\"hljs-built_in\">insert</span>(j); <span class=\"hljs-comment\">// 筛掉再说</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span>(LL i=L; i&lt;=R; i++)&#123;        <br>        <span class=\"hljs-keyword\">if</span>(i&lt;<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)<span class=\"hljs-number\">-1</span>)) &#123;<br>            <span class=\"hljs-keyword\">if</span>(st[i]==<span class=\"hljs-number\">0</span>) ans++;<br>            <span class=\"hljs-keyword\">continue</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(!H.<span class=\"hljs-built_in\">count</span>(i)) ans++;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</details>\n\n\n\n\n\n<h2 id=1.7><font color=\"green\"> 七、图论 </font></h2>\n\n<ul>\n<li><h3 id=1.7.1> 最短路 </h3></li>\n</ul>\n<details> \n<summary> AcWing 849. Dijkstra求最短路 I <font style=\"background-color:red\", color=black><b>dijkstra[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/851/\">AcWing 849. Dijkstra求最短路 I</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">510</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><br><span class=\"hljs-type\">int</span> n, m;<br><span class=\"hljs-type\">int</span> edge[N][N]; <span class=\"hljs-comment\">// 稠密图</span><br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否确定最短</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)&#123;<br>        <br>        <span class=\"hljs-type\">int</span> t=<span class=\"hljs-number\">-1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(!st[j] &amp;&amp; (t==<span class=\"hljs-number\">-1</span> ||  dis[t]&gt;dis[j]))<br>                t=j;    <br>        <br>        st[t]=<span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">if</span>(t==e) <span class=\"hljs-keyword\">break</span>;<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            dis[j]=<span class=\"hljs-built_in\">min</span>(dis[j], dis[t]+edge[t][j]);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(edge, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x][y]=<span class=\"hljs-built_in\">min</span>(edge[x][y], z);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">dijkstra</span>(<span class=\"hljs-number\">1</span>, n);<br>    <br>    <span class=\"hljs-keyword\">if</span>(dis[n]==inf)<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;-1&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>Luogu P4779 【模板】单源最短路径（标准版） <font style=\"background-color:red\", color=black><b>dijkstra堆优化[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P4779\">Luogu P4779 【模板】单源最短路径（标准版）</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><br>vector&lt;vector&lt;PII&gt;&gt; <span class=\"hljs-built_in\">edge</span>(N);    <span class=\"hljs-comment\">// 邻接表</span><br><span class=\"hljs-type\">bool</span> st[N];<br><span class=\"hljs-type\">int</span> dis[N];<br><br><span class=\"hljs-type\">int</span> n, m, S;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br><br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> &amp;[y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;S;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        edge[x].<span class=\"hljs-built_in\">pb</span>(&#123;y, w&#125;);<br>    &#125;<br><br>    <span class=\"hljs-built_in\">dijkstra</span>(S);<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) cout&lt;&lt;dis[i]&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary>AcWing 853. 有边数限制的最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/855/\">AcWing 853. 有边数限制的最短路</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">510</span>;<br><br><span class=\"hljs-type\">int</span> n, m, k;<br><span class=\"hljs-type\">int</span> edge[N][N];<br><span class=\"hljs-type\">int</span> dis[N];<br><span class=\"hljs-type\">int</span> bkup[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bellman_ford</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123;<br>        <span class=\"hljs-type\">bool</span> flg=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">memcpy</span>(bkup, dis, <span class=\"hljs-keyword\">sizeof</span> dis);   <br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> x=<span class=\"hljs-number\">1</span>; x&lt;=n; x++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">1</span>; y&lt;=n; y++)<br>                <span class=\"hljs-keyword\">if</span>( dis[y] &gt; bkup[x]+edge[x][y] )&#123;<br>                    dis[y] = bkup[x]+edge[x][y];<br>                    flg=<span class=\"hljs-number\">1</span>;<br>                &#125;<br>        <br>        <span class=\"hljs-keyword\">if</span>(!flg) <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(edge, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x][y]=<span class=\"hljs-built_in\">min</span>(edge[x][y], z);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">bellman_ford</span>(<span class=\"hljs-number\">1</span>, n);<br>    <br>    <span class=\"hljs-keyword\">if</span>(dis[n]&gt;inf/<span class=\"hljs-number\">2</span>)<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;impossible&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary>AcWing 851. spfa求最短路 <font style=\"background-color:orange\", color=black><b>bellman-ford队列优化（spfa）[ 模板 ]</b></font> </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/853/\">AcWing 851. spfa求最短路</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> n, m;<br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N]; <br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否在队列中</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">spfa</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    queue&lt;<span class=\"hljs-type\">int</span>&gt; q;<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    q.<span class=\"hljs-built_in\">push</span>(s), st[s]=<span class=\"hljs-number\">1</span>;<br>    <br>    <span class=\"hljs-keyword\">while</span>(q.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=q.<span class=\"hljs-built_in\">front</span>();<br>        q.<span class=\"hljs-built_in\">pop</span>(), st[x]=<span class=\"hljs-number\">0</span>;<br>        <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span>&amp; [y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z)&#123;<br>                dis[y] = dis[x]+z;<br>                <span class=\"hljs-keyword\">if</span>(!st[y])<br>                    q.<span class=\"hljs-built_in\">push</span>(y), st[y]=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        edge[x].<span class=\"hljs-built_in\">push_back</span>(&#123;y, z&#125;);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">spfa</span>(<span class=\"hljs-number\">1</span>, n);<br>    <br>    <span class=\"hljs-keyword\">if</span>(dis[n]==inf)<br>        cout&lt;&lt;<span class=\"hljs-string\">&quot;impossible&quot;</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        cout&lt;&lt;dis[n];<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary> Luogu P3371 【模板】单源最短路径（弱化版） <font style=\"background-color:orange\", color=black><b>spfa??[ 模板 ]</b></font></summary>  \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P3371\">Luogu P3371 【模板】单源最短路径（弱化版）</a></li>\n</ul>\n</details>\n\n<details> \n<summary>AcWing 854. Floyd求最短路 <font style=\"background-color:yellow\", color=black><b>Floyd[ 模板 ]</b></font> </summary>  \n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/856/\">AcWing 854. Floyd求最短路</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> n, m, k;<br><span class=\"hljs-type\">int</span> dis[N][N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">floyd</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>; k&lt;=n; k++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>                dis[i][j]=<span class=\"hljs-built_in\">min</span>(dis[i][j], dis[i][k]+dis[k][j]);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++)<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++)<br>            <span class=\"hljs-keyword\">if</span>(i==j) dis[i][j]=<span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-keyword\">else</span> dis[i][j]=inf;<br>                <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, z; <br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        dis[x][y]=<span class=\"hljs-built_in\">min</span>(dis[x][y], z);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">floyd</span>();<br>    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class=\"hljs-keyword\">if</span>(dis[x][y]&gt;inf/<span class=\"hljs-number\">2</span>) <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;impossible&quot;</span>);<br>        <span class=\"hljs-keyword\">else</span> cout&lt;&lt;dis[x][y]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details> \n<summary> Luogu P1629 邮递员送信 <font style=\"background-color:red\", color=black><b>dijkstra堆优化</b></font></summary> \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1629\">Luogu P1629 邮递员送信</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span> ,<span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e3</span>+<span class=\"hljs-number\">10</span>;<br><br>vector&lt;vector&lt;PII&gt;&gt; <span class=\"hljs-built_in\">edge</span>(N);<br>vector&lt;vector&lt;PII&gt;&gt; <span class=\"hljs-built_in\">redge</span>(N); <span class=\"hljs-comment\">// 反向边</span><br><span class=\"hljs-type\">bool</span> st[N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 1到每个点的最短路</span><br><br><span class=\"hljs-type\">int</span> n, m;<br>LL ans;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, vector&lt;vector&lt;PII&gt;&gt; &amp;e)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br><br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> &amp;[y, z]: e[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-comment\">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br>    <span class=\"hljs-type\">int</span> n, m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        edge[x].<span class=\"hljs-built_in\">pb</span>(&#123;y, w&#125;);<br>        redge[y].<span class=\"hljs-built_in\">pb</span>(&#123;x, w&#125;);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">dijkstra</span>(<span class=\"hljs-number\">1</span>, edge);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++) ans+=dis[i];<br>    <span class=\"hljs-built_in\">dijkstra</span>(<span class=\"hljs-number\">1</span>, redge);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">2</span>; i&lt;=n; i++) ans+=dis[i];<br>    cout&lt;&lt;ans;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n<details> \n<summary>  Luogu P1119 灾后重建 <font style=\"background-color:yellow\", color=black><b>Floyd</b></font></summary> \n\n<ul>\n<li><a href=\"https://www.luogu.com.cn/problem/P1119\">Luogu P1119 灾后重建</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> dis[N][N];<br><span class=\"hljs-type\">int</span> ti[N];<br><span class=\"hljs-type\">bool</span> st[N];<br><br><span class=\"hljs-type\">int</span> n, m, q;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">floyd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> t)</span></span>&#123;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>; k&lt;n; k++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(ti[k]&gt;t || st[k]) <span class=\"hljs-keyword\">continue</span>;<br>        st[k]=<span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;n; i++)<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;n; j++)<br>                <span class=\"hljs-keyword\">if</span>( dis[i][j] &gt; dis[i][k] + dis[k][j])<br>                    dis[j][i] = dis[i][j] = dis[i][k] + dis[k][j];<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(dis[x][y]==<span class=\"hljs-number\">0x3f3f3f3f</span> || ti[x]&gt;t || ti[y]&gt;t) <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">return</span> dis[x][y];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;in.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>, stdin); <span class=\"hljs-built_in\">freopen</span>(<span class=\"hljs-string\">&quot;out.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>, stdout);<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;ti[i]);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        dis[x][y]=<span class=\"hljs-built_in\">min</span>(dis[x][y], w);<br>        dis[y][x]=<span class=\"hljs-built_in\">min</span>(dis[y][x], w);<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;n; i++) dis[i][i]=<span class=\"hljs-number\">0</span>;<br><br>    cin&gt;&gt;q;<br>    <span class=\"hljs-keyword\">while</span>(q--)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, t;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;t);<br>        cout&lt;&lt;<span class=\"hljs-built_in\">floyd</span>(x, y, t)&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">210</span>;<br><br><span class=\"hljs-type\">int</span> edge[N][N];<br><span class=\"hljs-type\">int</span> dis[N]; <span class=\"hljs-comment\">// 最短路</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否确定最短路</span><br><br><span class=\"hljs-type\">int</span> n, m, q;<br><span class=\"hljs-type\">int</span> ti[N];  <span class=\"hljs-comment\">// 每个村庄完成重建的时间</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e, <span class=\"hljs-type\">int</span> t)</span></span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br><br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br>    <br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br><br>        edge[s][x]=<span class=\"hljs-built_in\">min</span>(edge[s][x], dis[x]); <span class=\"hljs-comment\">// 更新最短路</span><br><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">1</span>; y&lt;=n; y++)&#123;    <span class=\"hljs-comment\">// 用邻接表可能会更快</span><br>            <span class=\"hljs-type\">int</span> z=edge[x][y];<br><br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z &amp;&amp; ti[x]&lt;=t &amp;&amp; ti[y]&lt;=t )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(dis[e]==<span class=\"hljs-number\">0x3f3f3f3f</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">return</span> dis[e];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-comment\">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br>    <span class=\"hljs-built_in\">memset</span>(edge, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> edge);<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;ti[i]);    <br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, w;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;w);<br>        x++, y++;<br>        edge[x][y]=<span class=\"hljs-built_in\">min</span>(edge[x][y], w);<br>        edge[y][x]=<span class=\"hljs-built_in\">min</span>(edge[y][x], w);<br>    &#125;<br><br>    cin&gt;&gt;q;<br>    <span class=\"hljs-keyword\">while</span>(q--)&#123;<br>        <span class=\"hljs-type\">int</span> x, y, t;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;t);<br>        x++, y++;<br>        cout&lt;&lt;<span class=\"hljs-built_in\">dijkstra</span>(x, y, t)&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n\n\n\n<details>\n<summary> AcWing 1488. 最短距离 </summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/1490/\">AcWing 1488. 最短距离</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 超级源点</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> inf=<span class=\"hljs-number\">0x3f3f3f3f</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N=<span class=\"hljs-number\">1e5</span>+<span class=\"hljs-number\">10</span>;<br><br><span class=\"hljs-type\">int</span> n, m, k, q;<br>vector&lt;PII&gt; edge[N];<br><span class=\"hljs-type\">int</span> dis[N];<br><span class=\"hljs-type\">bool</span> st[N];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s)</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> ans=inf;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    <span class=\"hljs-built_in\">memset</span>(st, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> st);<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    <br>    dis[s]=<span class=\"hljs-number\">0</span>;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[s], s&#125;);<br>    <br>    <span class=\"hljs-keyword\">while</span>(heap.<span class=\"hljs-built_in\">size</span>())&#123;<br>        <span class=\"hljs-keyword\">auto</span> x=heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br>        <br>        <span class=\"hljs-keyword\">if</span>(st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x]=<span class=\"hljs-number\">1</span>;<br>        <br>        <span class=\"hljs-comment\">//cout&lt;&lt;dis[x]&lt;&lt;&quot;\\n&quot;;</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> &amp;[y, z]: edge[x])<br>            <span class=\"hljs-keyword\">if</span>( dis[y] &gt; dis[x]+z )&#123;<br>                dis[y] = dis[x]+z;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123;dis[y], y&#125;);<br>            &#125;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> ans;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=m; i++)&#123;<br>        <span class=\"hljs-type\">int</span> a, b, c;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        edge[a].<span class=\"hljs-built_in\">pb</span>(&#123;b, c&#125;);<br>        edge[b].<span class=\"hljs-built_in\">pb</span>(&#123;a, c&#125;);<br>    &#125;<br>    cin&gt;&gt;k;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;=k; i++)&#123;<br>        <span class=\"hljs-type\">int</span> j;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;j);<br>        edge[n+<span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">pb</span>(&#123;j, <span class=\"hljs-number\">0</span>&#125;);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">dijkstra</span>(n+<span class=\"hljs-number\">1</span>);<br>    <br>    cin&gt;&gt;q;<br>    <span class=\"hljs-keyword\">while</span>(q--)&#123;<br>        <span class=\"hljs-type\">int</span> s;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;s);<br>        cout&lt;&lt;dis[s]&lt;&lt;<span class=\"hljs-string\">&quot;\\n&quot;</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n<details>\n\n<summary> AcWing 1507. 旅行计划 </summary>\n\n<ul>\n<li><a href=\"https://www.acwing.com/problem/content/description/1509/\">AcWing 1507. 旅行计划</a></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 记录路径</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> G++ optimize(<span class=\"hljs-string\">&quot;Ofast&quot;</span>)</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pb push_back</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> fst first</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> sed second</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-keyword\">typedef</span> pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; PII;<br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">510</span>;<br><br><span class=\"hljs-type\">int</span> n, m, S, D;<br>vector&lt;pair&lt;<span class=\"hljs-type\">int</span>, PII&gt;&gt; edge[N]; <span class=\"hljs-comment\">// x-&gt;y </span><br><span class=\"hljs-type\">int</span> pre[N]; <span class=\"hljs-comment\">// 最短路径中，最短的一条路径的前驱</span><br>PII dis[N]; <span class=\"hljs-comment\">// 最短路径及最小花费</span><br><span class=\"hljs-type\">bool</span> st[N]; <span class=\"hljs-comment\">// 是否确定最小</span><br><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s, <span class=\"hljs-type\">int</span> e)</span> </span>&#123;<br>    <span class=\"hljs-built_in\">memset</span>(dis, <span class=\"hljs-number\">0x3f</span>, <span class=\"hljs-keyword\">sizeof</span> dis);<br>    priority_queue&lt;pair&lt;PII, <span class=\"hljs-type\">int</span>&gt;, vector&lt;pair&lt;PII, <span class=\"hljs-type\">int</span>&gt;&gt;, greater&lt;pair&lt;PII, <span class=\"hljs-type\">int</span>&gt;&gt;&gt; heap;<br><br>    dis[s] = &#123; <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> &#125;;<br>    heap.<span class=\"hljs-built_in\">push</span>(&#123; dis[s], s &#125;);<br><br>    <span class=\"hljs-keyword\">while</span> (heap.<span class=\"hljs-built_in\">size</span>()) &#123;<br>        <span class=\"hljs-keyword\">auto</span> x = heap.<span class=\"hljs-built_in\">top</span>().sed;<br>        heap.<span class=\"hljs-built_in\">pop</span>();<br><br>        <span class=\"hljs-keyword\">if</span> (st[x]) <span class=\"hljs-keyword\">continue</span>;<br>        st[x] = <span class=\"hljs-number\">1</span>;<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; [y, w] : edge[x]) &#123;<br>            PII t = &#123; dis[x].fst + w.fst, dis[x].sed + w.sed &#125;;<br>            <span class=\"hljs-keyword\">if</span> (dis[y] &gt; t) &#123;<br>                dis[y] = t;<br>                heap.<span class=\"hljs-built_in\">push</span>(&#123; dis[y], y &#125;);<br>                pre[y]=x;   <span class=\"hljs-comment\">// 通过x点到y</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; S &gt;&gt; D;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= m; i++) &#123;<br>        <span class=\"hljs-type\">int</span> a, b, c, d;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);<br>        edge[a].<span class=\"hljs-built_in\">pb</span>(&#123; b, &#123;c, d&#125; &#125;);<br>        edge[b].<span class=\"hljs-built_in\">pb</span>(&#123; a, &#123;c, d&#125; &#125;);<br>    &#125;<br><br>    <span class=\"hljs-built_in\">dijkstra</span>(D, S); <span class=\"hljs-comment\">// 反着来，这样可以直接用pre输出</span><br><br>    <span class=\"hljs-type\">int</span> u = S;<br>    cout&lt;&lt;S&lt;&lt;<span class=\"hljs-string\">&quot; &quot;</span>;<br>    <span class=\"hljs-keyword\">while</span> (u != D) cout &lt;&lt; pre[u] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>, u = pre[u];<br><br>    cout &lt;&lt; dis[S].fst &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; dis[S].sed;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n</details>\n\n</details>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n<h1 id=2><font color=\"blue\">牛刀小试</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n<ol>\n<li><p>基础算法</p>\n<ul>\n<li>位运算 <a href=\"\">0x01</a></li>\n<li>倍增 <a href=\"\">0x39</a></li>\n<li>构造</li>\n</ul>\n</li>\n<li><p>数据结构</p>\n<ul>\n<li>并查集 <a href=\"\">0x41</a></li>\n<li>树状数组 <a href=\"\">0x42</a></li>\n<li>线段树 <a href=\"\">0x43</a></li>\n<li>二叉搜索树与平衡树 <a href=\"\">0x46</a></li>\n<li>分块</li>\n<li>点分治</li>\n<li>可持久化数据结构</li>\n</ul>\n</li>\n<li><p>搜索</p>\n<ul>\n<li>迭代加深</li>\n<li>双向DFS或BFS</li>\n<li>BFS变形</li>\n<li>A* 与 IDA*  </details></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h1 id=3><font color=\"red\">略有所成</font></h1>\n\n  <details>\n  <summary>目录</summary>\n\n  </details>\n\n\n\n"},{"title":"龙在天","date":"2002-05-12T16:00:00.000Z","password":"龙在天","abstract":"龙在天","message":"龙在天？","wrong_pass_message":"龙在天！","_content":"\n<h1 id=2>2022</h1>\n\n- 2022-12\n    ```第五届“传智杯”程序设计挑战赛本科B组``` `初赛二等奖` [公示 / 排名](https://docs.qq.com/doc/DZnZESVduS0JxcUFh) \n    <p style=\"text-align: center;\"><img src=\"/ff/ttt.jpg\" height=315/></p>\n\n- 2022-10\n    ```第一届“码题杯”全国职业院校程序设计大赛``` `决赛铜奖` [公示 / 排名](https://mp.weixin.qq.com/s/pbwGtLsuM2l_8ftM-ir4Cg) \n    <p style=\"text-align: center;\"><img src=\"/ff/ttt.jpg\" height=315></p>\n\n- 2022-09\n    ```全国高等学校计算机教学与产业实践资源建设专家委员会（TIPCC）志愿者``` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）码题集.jpg\" height=315></p>\n\n- 2022-08\n    ```第八届“互联网+”大学生创新创业大赛``` `重庆市金奖` [公示 / 排名](/ff/（排名）22互联网+.pdf) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省1）互联网+.jpg\" height=315></p>\n\n- 2022-07\n    ```第十三届“挑战杯”中国大学生创业计划竞赛``` `重庆市铜奖` [公示 / 排名](/ff/（排名）22挑战杯.pdf ) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省3）挑战杯.jpg\" height=315></p>\n\n- 2022-07\n    ```单项奖学金 ``` \n    <p style=\"text-align: center;\"><img src=\"/ff/（单项）3000.jpg\" height=315> <img src=\"/ff/（单项）150.jpg\" height=315></p> \n\n- 2022-06\n    ```第十三届“蓝桥杯”C/C++程序设计本科B组``` `国赛优秀奖` [公示 / 排名](https://dasai.lanqiao.cn/notices/1341)\n    <p style=\"text-align: center;\"><img src=\"/ff/（国优）蓝桥杯22.jpg\" height=315>\n\n- 2022-04\n    ```第十三届“蓝桥杯”C/C++程序设计本科B组``` `重庆市一等奖` [公示 / 排名](https://dasai.lanqiao.cn/notices/1305) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省1）蓝桥杯22.jpg\" height=315></p>\n\n- 2022-04\n    ```综合奖学金``` \n    <p style=\"text-align: center;\"><img src=\"/ff/（综合）400.jpg\" height=315></p>\n\n<h1 id=1>2021</h1>\n\n- 2021-12\n    ```全国工业和信息化技术技能大赛-工业大数据算法``` `重庆市第3名` [公示 / 排名](/ff/（排名）工业大数据.jpg) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省2）工业大数据算法.jpg\" height=315></p>\n\n- 2021-10\n    ```全国行业职业技能竞赛-数据智能标注分析与应用``` `重庆市第8名` \n    <p style=\"text-align: center;\"><img src=\"/ff/（排名）数据标注& 21.9.jpg\" height=315></p> \n\n- 2021-09\n    ```高等学校英语应用能力考试``` `B级` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）英语B级.jpg\" height=315></p>\n\n- 2021-07\n    ```重庆市第十二届大学生心理成长论坛心理成长微课比赛``` `重庆市二等奖` [公示 / 排名](/ff/（排名）心理.jpg) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省2）心理.jpg\" height=315></p>\n\n- 2021-03\n    ```普通话水平测试``` `二级乙等` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）普通话二乙.png\"></p>\n\n- 2021-03\n    ```计算机等级考试二级C语言程序设计``` `良好` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）计算机二级.png\" height=315></p>","source":"_posts/me.md","raw":"---\ntitle: 龙在天\ndate: 2002-05-13 00:00:00\npassword: 龙在天\nabstract: 龙在天\nmessage: 龙在天？\nwrong_pass_message: 龙在天！\n---\n\n<h1 id=2>2022</h1>\n\n- 2022-12\n    ```第五届“传智杯”程序设计挑战赛本科B组``` `初赛二等奖` [公示 / 排名](https://docs.qq.com/doc/DZnZESVduS0JxcUFh) \n    <p style=\"text-align: center;\"><img src=\"/ff/ttt.jpg\" height=315/></p>\n\n- 2022-10\n    ```第一届“码题杯”全国职业院校程序设计大赛``` `决赛铜奖` [公示 / 排名](https://mp.weixin.qq.com/s/pbwGtLsuM2l_8ftM-ir4Cg) \n    <p style=\"text-align: center;\"><img src=\"/ff/ttt.jpg\" height=315></p>\n\n- 2022-09\n    ```全国高等学校计算机教学与产业实践资源建设专家委员会（TIPCC）志愿者``` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）码题集.jpg\" height=315></p>\n\n- 2022-08\n    ```第八届“互联网+”大学生创新创业大赛``` `重庆市金奖` [公示 / 排名](/ff/（排名）22互联网+.pdf) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省1）互联网+.jpg\" height=315></p>\n\n- 2022-07\n    ```第十三届“挑战杯”中国大学生创业计划竞赛``` `重庆市铜奖` [公示 / 排名](/ff/（排名）22挑战杯.pdf ) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省3）挑战杯.jpg\" height=315></p>\n\n- 2022-07\n    ```单项奖学金 ``` \n    <p style=\"text-align: center;\"><img src=\"/ff/（单项）3000.jpg\" height=315> <img src=\"/ff/（单项）150.jpg\" height=315></p> \n\n- 2022-06\n    ```第十三届“蓝桥杯”C/C++程序设计本科B组``` `国赛优秀奖` [公示 / 排名](https://dasai.lanqiao.cn/notices/1341)\n    <p style=\"text-align: center;\"><img src=\"/ff/（国优）蓝桥杯22.jpg\" height=315>\n\n- 2022-04\n    ```第十三届“蓝桥杯”C/C++程序设计本科B组``` `重庆市一等奖` [公示 / 排名](https://dasai.lanqiao.cn/notices/1305) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省1）蓝桥杯22.jpg\" height=315></p>\n\n- 2022-04\n    ```综合奖学金``` \n    <p style=\"text-align: center;\"><img src=\"/ff/（综合）400.jpg\" height=315></p>\n\n<h1 id=1>2021</h1>\n\n- 2021-12\n    ```全国工业和信息化技术技能大赛-工业大数据算法``` `重庆市第3名` [公示 / 排名](/ff/（排名）工业大数据.jpg) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省2）工业大数据算法.jpg\" height=315></p>\n\n- 2021-10\n    ```全国行业职业技能竞赛-数据智能标注分析与应用``` `重庆市第8名` \n    <p style=\"text-align: center;\"><img src=\"/ff/（排名）数据标注& 21.9.jpg\" height=315></p> \n\n- 2021-09\n    ```高等学校英语应用能力考试``` `B级` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）英语B级.jpg\" height=315></p>\n\n- 2021-07\n    ```重庆市第十二届大学生心理成长论坛心理成长微课比赛``` `重庆市二等奖` [公示 / 排名](/ff/（排名）心理.jpg) \n    <p style=\"text-align: center;\"><img src=\"/ff/（省2）心理.jpg\" height=315></p>\n\n- 2021-03\n    ```普通话水平测试``` `二级乙等` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）普通话二乙.png\"></p>\n\n- 2021-03\n    ```计算机等级考试二级C语言程序设计``` `良好` \n    <p style=\"text-align: center;\"><img src=\"/ff/（证）计算机二级.png\" height=315></p>","slug":"me","published":1,"updated":"2022-12-15T10:40:19.670Z","_id":"clbot8ivf0000f4h3hjo9a7tl","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"龙在天！\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"55fc59e46f4d50c08aaa5cacb4d43f3e6e4b7b2863e0d06e2cd8959bdac9dfee\">426cf188bce79bdda53fd0c13e4bc5c637b39e34cb3e0c29e0e60757b2a49c2d19ad6aaacd79ec0075f34e879590e03cb1f8a2d8908ed9b24031e1cd88682f758befda1642c9b3192541b015c0b4411b29d0037d081249209d8a683e421125d9b935da1b84c901216904ad7d643c7d73d69ea8cfea6f4d64ad986e40f7bed56ca0380c36da8643b8f2d8408a2667ebec8c545def8f4875c9c875700d8de45a942bee6db70bd9ee974c3a51483ef46e371f75badf64d89aac685452886b9443276006d6ad9f7b6e52e8b8ba7667b9a3e146e8afd63007224786d589b0007aed87e3ea9b706cd494b750c217c107d2236013f5e8f73576717162e0c8382360eeb59d062ae2770e24f597d7ace2fa84bb3a9e1aefc29b968bc899ed38a3a1a89f72c9393d93defef6da49aede5f07c94bba4216214567025836619b33d72827deaa1d789a1e6c134a8ded5faf41c3dde421c565bb2a0e478ff7ead468fac65723b85ddcfcffee38af00c6f705385b342d72e6252e8f013621eba5f885b8b7281f5cfb48145b16835668c8ee87f4833c0167a53c4e821a1e2a6c4e6d50d7265c4d33272bf8495aec2da69358e9a556fc7f8c34b9f4ae4a539c1147df3a226a6070c624c861460da3e9494d5926bdfba26daee74270d93b7b2bd3d801b7c680b896352f4d19900296be14d00b856ec656355b89b7ecc4b13517d599b514b1ec9d0f123f73be895b38e447e0e71d3539df23d34dd14065f8e4c89c650ffdb364cdc85b3c63ecf7ce6f916dd467ee47b703b0ed4f4315a458c9746d581a22cca45b0fdfc6b55069bbdec138708dba98ba41e15035300a572ea607d4ca17a0e654a6c63c6053571ba976d8fc06d95197a31699223542924ee3ac47ce8dea67081f761073fd80a60d5e664afb422a6eb006b3e0beec17e259008934498ee06622bf42260238ecb8b6208f1fb06aaf1cc0fef79c8ef8bb3576a60415bb6a0c9ee5a22965fcaad2b58d74218d4987729f58e443c94943ec717b3b578e8a5d54f0746e444d6826a37f6834a76c63515465c4500a382129902620da9044b15da15fdc7dcc5f30631c04663e13bad81312b3e6c48a642e8a4d9aa43366f117e195210ca61afb70f1a2a452d80722e90a1e34c9b49d3e2d89e91fe5f15e243706eafea475e66766bb0c21ba4540c4798ef5f06564080c89a71a2fb566f3e7bec6b70327dfd3821f7571bac1318ad45fe57fc1e48c22c4a522aa34ad1da7dd87c71c52b1b48dd958cb017118a45410a4b6fd8849caafec871d51071a357ae311ec60f46843417879631b7b5520d12f261d7449692a14bb310d1de68eb3e80845453ca0c232d5a13eba40e338d0821fa3ae139985dd78f4df7a276d100454391a4689dd1f6f568b9f7854b98043c8efb84052f3adba66f81ecbfb4f3aea4217a3a4ce0db65ab137500e6acf553169e146d474f644a3c6f298cf723ae1e9c4d50a58d8608eef033af8b2016e7af6cfcf2f499b3e21b2910da2a6736769c97b1a60e7cd5c9a1323034819184ca8a8347019f1693ef046cf94eeea34da36d1e4f548f47c89ba1fc8e22e4b8b556300c06b8875bb7d2713d2d95c9c414a3d5eb73d65bedfe0b8f0027206913357622e2990f4591e36028ad54dd4992f8e1efe5f19ac01d76541b7d9925534134c10adbb1e410cf170903c980ed197a7b44e3612dcf5a243941d82f0ceebeeed8f8b9cb835f51e70c0035cf68a616bba3fda1f57ddb75b1fd964860e316e80c0e45fc77799d02dfbfa5a67be0c1d861b1a3b501cc3f63e5e8c01eb846c09856718a32a2af8efea1d0c22c391a43d84f7840e44b962aa6e6f26e4be46ce074cbaecabe0f93146d26c3a6448f952aca7777acad5c444e3414814df73c98943aaf38ad533fdf0356b469e0f3d1d1bed2e630d60c32a752b583126e55c5bfe04af0879e684d1e81296bf3dd262eb8ef77148e66314524b01c8074965fc8e521cc183026a6ad1c47c7a6cfcf84656d25fb5fb359f663c012af48175c3d776ef92f35ae17c392e6d0f2729d7fd78b83080ee8407cc27067b1791d6f3620e3e6b0e1cc9675b39c128187f7c4f20e76004dbe46c455d334af809a1c901a82d567097d3740eaf462e8339a0687746d2df5209cf92ffe71d6ed3713e7bcdbcc469535f6b91f646cde78ab60300dea0893f2692784e9cd5d5e0baa8d0f83c64060387538bf89190ed315feb6e5666a628597c6c6ca40038bd6270ec2a2b50f8ea7bd202543487b94b152f083302b54d4cc2a0bee5118673f863dfebff77e53e5940f47c83e33c1f9372b3c0971b38a0385c9561b9c9f1bdb389d35a0d3288bcd0809120e838e1f029e67dac9afc856668682a99475fdbbacbe7796989a49a4bcd113675527a6cdaa356e1a20708bead700f81f0dbe9990a3758bdfd08caa1beabab1f9c55dab38741d04b6111a52d02a4168b1dbeb834382bb410402ab96279831259a0a33a037294b08a9265a65ab0cbf62c79be08bd259c6785b4f593b5cf01ecd10ac0a042c44d913ec05e81d0c13c51107baee62315f9d36ac0b310c49e066dbf9357d7d69f3fdb943c31f41c9258da889f2284364001a8b6a674b7374d7b98b77c7d193c2354b3ffd2f05275f87e62e8df73a96c6a34ec5b1c260f057fb94b5076dd6fcc1f2fcd3b1417b15bce35e967cc56d7d14221a48c8274a25d8697a0582d7a9c9462584c2f216c6aec06d1ec806ad8f75190dd4372a6dab8863b1d37667b61e4dcb11b1ff52bac7232229de3e0962d63efd75f636c59d72675735cc747d46d220ff2ddddf2eb2718a35457b8abeccf4aa3120b6b892797713b0c0e4f683cf0effa0887d4a0875f70e0eba3ce415f3b22beceb5b387562da849aa3145bf2f11d4967d3075a4340427ac345d6b8293058ee4a757a058cedf6c955a78f8f293673bb0695cefa625ab2eaed1e8d61b441fa34726bbced5eb5deed19e165e8d232b01062c14581b11acdd239d5a07904d118eb6625bb0e9ecbcbee5e398d6a9cccd5a497b6a4414ae84b952c72987fff5c032e1818d8bbd4d359b7174e0476b93283cccff3ea3726b4c6ecd99f48d3745e5e9cbd0aa4e5f31c95abec62112cae90e725d47708244ac923350a65e67b69453cbff1c376d54935f34d9d4626c761469388ef2fde0d1f226784a294d85e0ba2f9832bdb0e4a474e744d682bc73119644ca7a4597fed691c5e6c6e04dd27dd93da0fbf1c71ea25cf22387b4de5bf2f3283d32a7d1cd2f32fd2694a08f6e50929578c1e206366aa4850713c8a8acea4234f8f61abddeb4b9363bb28da4e87553248c410a9a176a086f3cb41fea5a7b97b19da575c77274c282308535e6eec55a6d991b7068e179f179d0f8c76d20ab523b10910a03e96b80e024708aa64fba1b231a4f6307ac0ccb25426a62afdc0f94c666dc9ede3411a069b955d3ae63c97f198110eb3a12c403568c589f23a5d29fd0dc6806fa8688faa3a50912d68c0e9c348892dc5c8fd4d06d5be8d48154941e95a9392132c89d4b2e6e1ca5ecb987ac4f468da0ad22b8f367d33f0e151bd351ab507522f3948fb538d529a0ec5b0cd40f21384a10d0025b9c259379a6788b592763818ae3ca19a85561a7689d19a59b03c8ed479ea9d24db44f69a5e2638aa41270a0a1f95ded4f6b7aad54bda1fb6b4e3eb73e7eeb5a63d6fe29335beb32014d8c129189ccbf15c87658c19b1ed37ec6d768da8e4b85d3d9b6595a873e036a2bd3bef1cbe209ba79fc68b4a2e26aca1d1c9853f9a8af06a001fc1475f1e4ea661459b26078f2a8fec0b6686e42b28aff1220e9e36aa2974de91c76accf6e8a181108e2ea3949e20d1bf9aceb6c5f42bbb138463bfac13b849031293cf93e7130cf7cf84cc04ee3cb31d7e3a991847f7fb674324e62a00933828fe2864e7ee1c8f9c06bf8ade2d219157f5bd2022c358e234a17df163f55e71709386da5082155a27d16bf52531ae4a850e2c4040892a58cc27b8d6d67f4144d0067fa92b1a85317e0cb7c97a7a453bd2994c98d575f9d1e1ff9bc6b25223cc0947af99ef37595773cb8c308d7620ced9eda5eee58105c7649e285b658fab4f8a28b4b5a946b37674e6e3a857c8be3b0d1af4d857a762067ec0b8b94130eed86e4fbcc441d5852c829ac4e3b2e5b6292858547019c9299389bd8f341b4b142786150ca581dd069ed345ad0230c7e7d3231d2b4b9652e148a8eab4c44c24ed0ec21c70e8477c8ad5c6643e872481333a1b64aca3438a75ef8e48e7e262e8378373b04b4dcfac5b618ed6bf06fe7aae358dea395f766de3b1c6ca5c47f56f82c786811ca6d1106534de91737db6b53143b0b520ba4ac9ba3602191cfb4762d034aca34185b36b3ef8e594439d1c0494c10aaa3838845e72de2eb3e51dad43f094528b74d54eb5abae82c0b95226b069904f3287ab3bf0ebcd1115b7e4467daa68e9f94882c290c02be7c7992432233fa770c20c6002c0311e465266d13995aca48c82fbbbb8fb070d842cec7e44827a8a47f3f694ed203dbb5e3195d7f85b7265f87acaa7344c61001d11c876630497e08c4418086bfbd432fad6144b43647dcba8c3fc5048934e4620b096c1b175b93dcdab4fbeef57347e0bf1cc6b1cd72f65023fe58d6fca27dceaa4963584ae794bf80131a21e384c06b1afea4eab9fce42b7327f70aa57b4e6927b87a38a5c962136c0ce66abc5f099c5c2e60bc48f301fe2ded1727d1dce162e89fbde344d268c8e8e919801314d234aeca08b1e58068c00606f69e96bad010142b05a3152dda9c70c6579004c75b7bcd85b023d4c2d40095045b9f4e0c4308bd829fa94ce0d9767a825c3fe7c98cfc7bb51bc03d484accad58a50db54e3bf96210ff53e01960116e4ec73a91f7e7a2d488a8c5330cab221089fa431ac029553a2926b10c6df790b18c8b485500a8c37c5199e54d88a488e4c1171bbf959b52586b27c24681e846a0969f781977e5c4aafa30e74d56cb99349f91a6643afe879d64cc25afed0a538a411414b8e8f174dbbe5404cef6a03be4463b9724be86bd2333e29f54a0ea3dd06787c10cc7ea87a02b3788109d96b385d21219b48f9a23172bdf91362a2a367e54d7a6dfd4c89733d76be8830de87201e792eb2845d7f9ff5c786f354dbab781cf4bf5229e138c8c5020aeeb57ee36eab0fb5d64b6c32a7249bd0e559ba0ed34c712227d170d2dceca83a8fbd07c35107d44bdd95f5251765c530df0654d58dbc84f8428f12590131b68b9342d78d4f20f8489c7391ec6176f12a56290933279c473fad1974ffc3ba49f60e9234643e9aac3cf3902d28f5a5410fd89f1a5212b4a11859802aee5e8b6ee1331671960a230bc2e6aae62b9e4a2e69ea3ee733a6a6a80d4c7e81e838a263c356c09f6b61f59aa79a8584a8331d7410f46dfad3ab1210d5d3ec71bc081115ec94c8cf04d4436ce89f16be13fd66c7e06ffa1bb057e9e9e50b2a1c6580bf13dfe873e4677b61edfc384b33be47fb80cd73681b0c85c0c0590a41830107717b917146c6fd842e06bc7484160fd64c487e72c4888246c71f9630bbe160c992166e6d98d8c467483407a678b</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">龙在天？</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"wordcount":518,"excerpt":"龙在天","more":"龙在天","origin":"<h1 id=2>2022</h1>\n\n<ul>\n<li><p>2022-12<br>  <code>第五届“传智杯”程序设计挑战赛本科B组</code> <code>初赛二等奖</code> <a href=\"https://docs.qq.com/doc/DZnZESVduS0JxcUFh\">公示 &#x2F; 排名</a> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/ttt.jpg\" height=315/></p>\n</li>\n<li><p>2022-10<br>  <code>第一届“码题杯”全国职业院校程序设计大赛</code> <code>决赛铜奖</code> <a href=\"https://mp.weixin.qq.com/s/pbwGtLsuM2l_8ftM-ir4Cg\">公示 &#x2F; 排名</a> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/ttt.jpg\" height=315></p>\n</li>\n<li><p>2022-09<br>  <code>全国高等学校计算机教学与产业实践资源建设专家委员会（TIPCC）志愿者</code> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（证）码题集.jpg\" height=315></p>\n</li>\n<li><p>2022-08<br>  <code>第八届“互联网+”大学生创新创业大赛</code> <code>重庆市金奖</code> <a href=\"/ff/%EF%BC%88%E6%8E%92%E5%90%8D%EF%BC%8922%E4%BA%92%E8%81%94%E7%BD%91+.pdf\">公示 &#x2F; 排名</a> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（省1）互联网+.jpg\" height=315></p>\n</li>\n<li><p>2022-07<br>  <code>第十三届“挑战杯”中国大学生创业计划竞赛</code> <code>重庆市铜奖</code> <a href=\"/ff/%EF%BC%88%E6%8E%92%E5%90%8D%EF%BC%8922%E6%8C%91%E6%88%98%E6%9D%AF.pdf\">公示 &#x2F; 排名</a> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（省3）挑战杯.jpg\" height=315></p>\n</li>\n<li><p>2022-07<br>  <code>单项奖学金 </code> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（单项）3000.jpg\" height=315> <img src=\"/ff/（单项）150.jpg\" height=315></p> \n</li>\n<li><p>2022-06<br>  <code>第十三届“蓝桥杯”C/C++程序设计本科B组</code> <code>国赛优秀奖</code> <a href=\"https://dasai.lanqiao.cn/notices/1341\">公示 &#x2F; 排名</a></p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（国优）蓝桥杯22.jpg\" height=315>\n</li>\n<li><p>2022-04<br>  <code>第十三届“蓝桥杯”C/C++程序设计本科B组</code> <code>重庆市一等奖</code> <a href=\"https://dasai.lanqiao.cn/notices/1305\">公示 &#x2F; 排名</a> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（省1）蓝桥杯22.jpg\" height=315></p>\n</li>\n<li><p>2022-04<br>  <code>综合奖学金</code> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（综合）400.jpg\" height=315></p></li>\n</ul>\n<h1 id=1>2021</h1>\n\n<ul>\n<li><p>2021-12<br>  <code>全国工业和信息化技术技能大赛-工业大数据算法</code> <code>重庆市第3名</code> <a href=\"/ff/%EF%BC%88%E6%8E%92%E5%90%8D%EF%BC%89%E5%B7%A5%E4%B8%9A%E5%A4%A7%E6%95%B0%E6%8D%AE.jpg\">公示 &#x2F; 排名</a> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（省2）工业大数据算法.jpg\" height=315></p>\n</li>\n<li><p>2021-10<br>  <code>全国行业职业技能竞赛-数据智能标注分析与应用</code> <code>重庆市第8名</code> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（排名）数据标注& 21.9.jpg\" height=315></p> \n</li>\n<li><p>2021-09<br>  <code>高等学校英语应用能力考试</code> <code>B级</code> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（证）英语B级.jpg\" height=315></p>\n</li>\n<li><p>2021-07<br>  <code>重庆市第十二届大学生心理成长论坛心理成长微课比赛</code> <code>重庆市二等奖</code> <a href=\"/ff/%EF%BC%88%E6%8E%92%E5%90%8D%EF%BC%89%E5%BF%83%E7%90%86.jpg\">公示 &#x2F; 排名</a> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（省2）心理.jpg\" height=315></p>\n</li>\n<li><p>2021-03<br>  <code>普通话水平测试</code> <code>二级乙等</code> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（证）普通话二乙.png\"></p>\n</li>\n<li><p>2021-03<br>  <code>计算机等级考试二级C语言程序设计</code> <code>良好</code> </p>\n  <p style=\"text-align: center;\"><img src=\"/ff/（证）计算机二级.png\" height=315></p></li>\n</ul>\n","encrypt":true}],"PostAsset":[],"PostCategory":[{"post_id":"cl9jcqvzp0002qoh30xp65ia1","category_id":"cl9jcqvzt0004qoh3b5jg837b","_id":"cl9jcqvzw0007qoh38hgph0w1"},{"post_id":"cl9jcqvzr0003qoh3claw052p","category_id":"cl9jcqvzv0006qoh3c5op5k8h","_id":"cl9jcqvzx0009qoh38eiq1qii"},{"post_id":"cl9jcqvzu0005qoh393dk2qxc","category_id":"cl9jcqvzv0006qoh3c5op5k8h","_id":"cl9jcqvzx000aqoh3d9yh4pmw"},{"post_id":"clars00ks00009oh3ghx7fxpc","category_id":"clanjlipp0001gsh34cpq3bt7","_id":"clars0f5100019oh3hk14db9u"}],"PostTag":[],"Tag":[{"name":"me","_id":"clbot9too00002kh3h7vt8ecn"}]}}